/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./data/addApp.ts":
/*!************************!*\
  !*** ./data/addApp.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addApp: () => (/* binding */ addApp)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ui/utilities/array */ "./ui/utilities/array.ts");
/* harmony import */ var _ui_utilities_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/utilities/string */ "./ui/utilities/string.ts");
/* harmony import */ var _script__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../script */ "./script.ts");




function addApp(obj) {
  var duplicates = _script__WEBPACK_IMPORTED_MODULE_3__.apps.filter(function (app) {
    return (0,_ui_utilities_string__WEBPACK_IMPORTED_MODULE_2__.equalsIgnoreCase)(app.name, obj.name) || app.website && obj.website && (0,_ui_utilities_string__WEBPACK_IMPORTED_MODULE_2__.equalsIgnoreCase)(app.website, obj.website);
  });
  if (duplicates.length === 0) {
    _script__WEBPACK_IMPORTED_MODULE_3__.apps.push(obj);
    (0,_script__WEBPACK_IMPORTED_MODULE_3__.extendFilter)(obj);
  } else {
    var _app$images, _app$coverage, _app$languages, _app$genre, _app$topics, _app$platform, _app$coverage2;
    var app = duplicates[0];
    if (app.lastRelease && obj.lastRelease && app.lastRelease < obj.lastRelease) app.lastRelease = obj.lastRelease;else app.lastRelease = app.lastRelease || obj.lastRelease;
    app.unmaintained = app.unmaintained || obj.unmaintained;
    app.description = app.description || obj.description;
    (_app$images = app.images).push.apply(_app$images, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.images));
    app.images = (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(app.images);
    app.imageWiki = app.imageWiki || obj.imageWiki;
    app.website = app.website || obj.website;
    if (!app.documentation) {
      app.documentation = obj.documentation;
    } else if (/List.of.OSM.based.services/gi.test(app.documentation)) {
      app.documentation = obj.documentation || app.documentation;
    }
    (_app$coverage = app.coverage).push.apply(_app$coverage, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.coverage));
    app.coverage = (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(app.coverage);

    // make the first source the newest
    if (app.source[0].lastChange.toUpperCase() > obj.source[0].lastChange.toUpperCase()) {
      app.source = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(app.source), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.source));
    } else {
      app.source = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.source), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(app.source));
    }
    app.author = app.author || obj.author;
    app.gratis = app.gratis || obj.gratis;
    app.libre = app.libre || obj.libre;
    app.license = app.license || obj.license;
    app.sourceCode = app.sourceCode || obj.sourceCode;
    (_app$languages = app.languages).push.apply(_app$languages, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.languages));
    app.languages = (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(app.languages);
    app.languagesUrl = app.languagesUrl || obj.languagesUrl;
    (_app$genre = app.genre).push.apply(_app$genre, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.genre));
    app.genre = (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(app.genre);
    (_app$topics = app.topics).push.apply(_app$topics, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.topics));
    app.topics = (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(app.topics);
    (_app$platform = app.platform).push.apply(_app$platform, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.platform));
    app.platform = (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(app.platform);
    (_app$coverage2 = app.coverage).push.apply(_app$coverage2, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(obj.coverage));
    app.coverage = (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(app.coverage);
    app.install.asin = app.install.asin || obj.install.asin;
    app.install.fDroidID = app.install.fDroidID || obj.install.fDroidID;
    app.install.googlePlayID = app.install.googlePlayID || obj.install.googlePlayID;
    app.install.huaweiAppGalleryID = app.install.huaweiAppGalleryID || obj.install.huaweiAppGalleryID;
    app.install.appleStoreID = app.install.appleStoreID || obj.install.appleStoreID;
    app.install.macAppStoreID = app.install.macAppStoreID || obj.install.macAppStoreID;
    app.install.microsoftAppID = app.install.microsoftAppID || obj.install.microsoftAppID;
    app.map = merge(app.map, obj.map);
    app.routing = merge(app.routing, obj.routing);
    app.navigating = merge(app.navigating, obj.navigating);
    app.tracking = merge(app.tracking, obj.tracking);
    app.monitoring = merge(app.monitoring, obj.monitoring);
    app.editing = merge(app.editing, obj.editing);
    app.rendering = merge(app.rendering, obj.rendering);
    app.accessibility = merge(app.accessibility, obj.accessibility);
    (0,_script__WEBPACK_IMPORTED_MODULE_3__.extendFilter)(app);
  }
}
function merge(o1, o2) {
  if (!o1 && !o2) {
    return undefined;
  }
  if (o1 && !o2) {
    return o1;
  }
  if (!o1 && o2) {
    return o2;
  }
  if (o1 && o2) {
    var keys = Object.keys(o1);
    keys.push.apply(keys, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(Object.keys(o2)));
    keys.forEach(function (k) {
      var _o1$k;
      if (o1[k] && !o2[k]) {
        return;
      }
      if (!o1[k] && o2[k]) {
        o1[k] = o2[k];
        return;
      }
      (_o1$k = o1[k]).push.apply(_o1$k, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(o2[k]));
      o1[k] = (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_1__.removeDuplicates)(o1[k]);
    });
    return o1;
  }
  throw new Error("Not expected...");
}

/***/ }),

/***/ "./data/i18n.ts":
/*!**********************!*\
  !*** ./data/i18n.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var _locales_en_json__WEBPACK_IMPORTED_MODULE_2___namespace_cache;
var _locales_cs_json__WEBPACK_IMPORTED_MODULE_3___namespace_cache;
var _locales_de_json__WEBPACK_IMPORTED_MODULE_4___namespace_cache;
var _locales_el_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache;
var _locales_es_json__WEBPACK_IMPORTED_MODULE_6___namespace_cache;
var _locales_fr_json__WEBPACK_IMPORTED_MODULE_7___namespace_cache;
var _locales_id_json__WEBPACK_IMPORTED_MODULE_8___namespace_cache;
var _locales_it_json__WEBPACK_IMPORTED_MODULE_9___namespace_cache;
var _locales_ja_json__WEBPACK_IMPORTED_MODULE_10___namespace_cache;
var _locales_ko_json__WEBPACK_IMPORTED_MODULE_11___namespace_cache;
var _locales_nb_NO_json__WEBPACK_IMPORTED_MODULE_12___namespace_cache;
var _locales_pl_json__WEBPACK_IMPORTED_MODULE_13___namespace_cache;
var _locales_pt_json__WEBPACK_IMPORTED_MODULE_14___namespace_cache;
var _locales_ru_json__WEBPACK_IMPORTED_MODULE_15___namespace_cache;
var _locales_tr_json__WEBPACK_IMPORTED_MODULE_16___namespace_cache;
var _locales_uk_json__WEBPACK_IMPORTED_MODULE_17___namespace_cache;
var _locales_zh_Hant_json__WEBPACK_IMPORTED_MODULE_18___namespace_cache;
var _locales_zh_Hans_json__WEBPACK_IMPORTED_MODULE_19___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var i18next_browser_languagedetector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18next-browser-languagedetector */ "../node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js");
/* harmony import */ var _locales_en_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locales/en.json */ "./data/locales/en.json");
/* harmony import */ var _locales_cs_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locales/cs.json */ "./data/locales/cs.json");
/* harmony import */ var _locales_de_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./locales/de.json */ "./data/locales/de.json");
/* harmony import */ var _locales_el_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locales/el.json */ "./data/locales/el.json");
/* harmony import */ var _locales_es_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./locales/es.json */ "./data/locales/es.json");
/* harmony import */ var _locales_fr_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locales/fr.json */ "./data/locales/fr.json");
/* harmony import */ var _locales_id_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./locales/id.json */ "./data/locales/id.json");
/* harmony import */ var _locales_it_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locales/it.json */ "./data/locales/it.json");
/* harmony import */ var _locales_ja_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./locales/ja.json */ "./data/locales/ja.json");
/* harmony import */ var _locales_ko_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./locales/ko.json */ "./data/locales/ko.json");
/* harmony import */ var _locales_nb_NO_json__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./locales/nb_NO.json */ "./data/locales/nb_NO.json");
/* harmony import */ var _locales_pl_json__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./locales/pl.json */ "./data/locales/pl.json");
/* harmony import */ var _locales_pt_json__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./locales/pt.json */ "./data/locales/pt.json");
/* harmony import */ var _locales_ru_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./locales/ru.json */ "./data/locales/ru.json");
/* harmony import */ var _locales_tr_json__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./locales/tr.json */ "./data/locales/tr.json");
/* harmony import */ var _locales_uk_json__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./locales/uk.json */ "./data/locales/uk.json");
/* harmony import */ var _locales_zh_Hant_json__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./locales/zh_Hant.json */ "./data/locales/zh_Hant.json");
/* harmony import */ var _locales_zh_Hans_json__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./locales/zh_Hans.json */ "./data/locales/zh_Hans.json");




















i18next__WEBPACK_IMPORTED_MODULE_0__["default"].use(i18next_browser_languagedetector__WEBPACK_IMPORTED_MODULE_1__["default"]).init({
  detection: {
    lookupQuerystring: "lang"
  },
  fallbackLng: "en",
  resources: {
    en: {
      translation: /*#__PURE__*/ (_locales_en_json__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (_locales_en_json__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(_locales_en_json__WEBPACK_IMPORTED_MODULE_2__, 2)))
    },
    cs: {
      translation: /*#__PURE__*/ (_locales_cs_json__WEBPACK_IMPORTED_MODULE_3___namespace_cache || (_locales_cs_json__WEBPACK_IMPORTED_MODULE_3___namespace_cache = __webpack_require__.t(_locales_cs_json__WEBPACK_IMPORTED_MODULE_3__, 2)))
    },
    de: {
      translation: /*#__PURE__*/ (_locales_de_json__WEBPACK_IMPORTED_MODULE_4___namespace_cache || (_locales_de_json__WEBPACK_IMPORTED_MODULE_4___namespace_cache = __webpack_require__.t(_locales_de_json__WEBPACK_IMPORTED_MODULE_4__, 2)))
    },
    el: {
      translation: /*#__PURE__*/ (_locales_el_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache || (_locales_el_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache = __webpack_require__.t(_locales_el_json__WEBPACK_IMPORTED_MODULE_5__, 2)))
    },
    es: {
      translation: /*#__PURE__*/ (_locales_es_json__WEBPACK_IMPORTED_MODULE_6___namespace_cache || (_locales_es_json__WEBPACK_IMPORTED_MODULE_6___namespace_cache = __webpack_require__.t(_locales_es_json__WEBPACK_IMPORTED_MODULE_6__, 2)))
    },
    fr: {
      translation: /*#__PURE__*/ (_locales_fr_json__WEBPACK_IMPORTED_MODULE_7___namespace_cache || (_locales_fr_json__WEBPACK_IMPORTED_MODULE_7___namespace_cache = __webpack_require__.t(_locales_fr_json__WEBPACK_IMPORTED_MODULE_7__, 2)))
    },
    id: {
      translation: /*#__PURE__*/ (_locales_id_json__WEBPACK_IMPORTED_MODULE_8___namespace_cache || (_locales_id_json__WEBPACK_IMPORTED_MODULE_8___namespace_cache = __webpack_require__.t(_locales_id_json__WEBPACK_IMPORTED_MODULE_8__, 2)))
    },
    it: {
      translation: /*#__PURE__*/ (_locales_it_json__WEBPACK_IMPORTED_MODULE_9___namespace_cache || (_locales_it_json__WEBPACK_IMPORTED_MODULE_9___namespace_cache = __webpack_require__.t(_locales_it_json__WEBPACK_IMPORTED_MODULE_9__, 2)))
    },
    ja: {
      translation: /*#__PURE__*/ (_locales_ja_json__WEBPACK_IMPORTED_MODULE_10___namespace_cache || (_locales_ja_json__WEBPACK_IMPORTED_MODULE_10___namespace_cache = __webpack_require__.t(_locales_ja_json__WEBPACK_IMPORTED_MODULE_10__, 2)))
    },
    ko: {
      translation: /*#__PURE__*/ (_locales_ko_json__WEBPACK_IMPORTED_MODULE_11___namespace_cache || (_locales_ko_json__WEBPACK_IMPORTED_MODULE_11___namespace_cache = __webpack_require__.t(_locales_ko_json__WEBPACK_IMPORTED_MODULE_11__, 2)))
    },
    no: {
      translation: /*#__PURE__*/ (_locales_nb_NO_json__WEBPACK_IMPORTED_MODULE_12___namespace_cache || (_locales_nb_NO_json__WEBPACK_IMPORTED_MODULE_12___namespace_cache = __webpack_require__.t(_locales_nb_NO_json__WEBPACK_IMPORTED_MODULE_12__, 2)))
    },
    pl: {
      translation: /*#__PURE__*/ (_locales_pl_json__WEBPACK_IMPORTED_MODULE_13___namespace_cache || (_locales_pl_json__WEBPACK_IMPORTED_MODULE_13___namespace_cache = __webpack_require__.t(_locales_pl_json__WEBPACK_IMPORTED_MODULE_13__, 2)))
    },
    pt: {
      translation: /*#__PURE__*/ (_locales_pt_json__WEBPACK_IMPORTED_MODULE_14___namespace_cache || (_locales_pt_json__WEBPACK_IMPORTED_MODULE_14___namespace_cache = __webpack_require__.t(_locales_pt_json__WEBPACK_IMPORTED_MODULE_14__, 2)))
    },
    ru: {
      translation: /*#__PURE__*/ (_locales_ru_json__WEBPACK_IMPORTED_MODULE_15___namespace_cache || (_locales_ru_json__WEBPACK_IMPORTED_MODULE_15___namespace_cache = __webpack_require__.t(_locales_ru_json__WEBPACK_IMPORTED_MODULE_15__, 2)))
    },
    tr: {
      translation: /*#__PURE__*/ (_locales_tr_json__WEBPACK_IMPORTED_MODULE_16___namespace_cache || (_locales_tr_json__WEBPACK_IMPORTED_MODULE_16___namespace_cache = __webpack_require__.t(_locales_tr_json__WEBPACK_IMPORTED_MODULE_16__, 2)))
    },
    uk: {
      translation: /*#__PURE__*/ (_locales_uk_json__WEBPACK_IMPORTED_MODULE_17___namespace_cache || (_locales_uk_json__WEBPACK_IMPORTED_MODULE_17___namespace_cache = __webpack_require__.t(_locales_uk_json__WEBPACK_IMPORTED_MODULE_17__, 2)))
    },
    zh: {
      translation: /*#__PURE__*/ (_locales_zh_Hant_json__WEBPACK_IMPORTED_MODULE_18___namespace_cache || (_locales_zh_Hant_json__WEBPACK_IMPORTED_MODULE_18___namespace_cache = __webpack_require__.t(_locales_zh_Hant_json__WEBPACK_IMPORTED_MODULE_18__, 2)))
    },
    "zh-Hans": {
      translation: /*#__PURE__*/ (_locales_zh_Hans_json__WEBPACK_IMPORTED_MODULE_19___namespace_cache || (_locales_zh_Hans_json__WEBPACK_IMPORTED_MODULE_19___namespace_cache = __webpack_require__.t(_locales_zh_Hans_json__WEBPACK_IMPORTED_MODULE_19__, 2)))
    }
  }
});

/***/ }),

/***/ "./data/loadApps.ts":
/*!**************************!*\
  !*** ./data/loadApps.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadApps: () => (/* binding */ loadApps)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "../node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../script */ "./script.ts");
/* harmony import */ var _addApp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./addApp */ "./data/addApp.ts");
/* harmony import */ var _wikidata__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wikidata */ "./data/wikidata.ts");


function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }



function loadApps(_x) {
  return _loadApps.apply(this, arguments);
}
function _loadApps() {
  _loadApps = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(doUpdate) {
    var language,
      wikidataRequest,
      wikidataResults,
      _iterator,
      _step,
      source,
      obj,
      _args = arguments;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          language = _args.length > 1 && _args[1] !== undefined ? _args[1] : "en";
          // const serviceItemObjectsRequest = requestTemplates("Service item", language);
          // const layerObjectsRequest = requestTemplates("Layer", language);
          // const softwareObjectsRequest = requestTemplates("Software", language);
          wikidataRequest = (0,_wikidata__WEBPACK_IMPORTED_MODULE_4__.requestWikidata)(language); // const serviceItemObjects = await serviceItemObjectsRequest;
          // for (const source of serviceItemObjects.filter(
          //   (s) => !containsOfflineLink(s["name"])
          // )) {
          //   const obj: App = transformServiceItem(source);
          //   addApp(obj);
          // }
          // shuffle(apps);
          // doUpdate(apps);
          // const layerObjects = await layerObjectsRequest;
          // for (const source of layerObjects.filter(
          //   (s) =>
          //     !containsOfflineLink(s["name"]) &&
          //     !containsOfflineLink(s["slippy_web"]) &&
          //     !equalsYes(s["discontinued"])
          // )) {
          //   const obj: App = transformLayer(source);
          //   addApp(obj);
          // }
          // doUpdate(apps);
          // const softwareObjects = await softwareObjectsRequest;
          // for (const source of softwareObjects.filter(
          //   (s) =>
          //     !containsOfflineLink(s["name"]) &&
          //     !containsOfflineLink(s["web"]) &&
          //     !equalsIgnoreCase(s["status"], "unfinished") &&
          //     (!equalsIgnoreCase(s["status"], "unmaintained") ||
          //       // No longer maintained but can still be installed.
          //       toUrl(s["web"]) ||
          //       s["asin"] ||
          //       s["fDroidID"] ||
          //       s["googlePlayID"] ||
          //       s["huaweiAppGalleryID"] ||
          //       s["appleStoreID"] ||
          //       s["macAppStoreID"] ||
          //       s["microsoftAppID"]) &&
          //     !equalsIgnoreCase(s["status"], "broken")
          // )) {
          //   const obj: App = transformSoftware(source);
          //   addApp(obj);
          // }
          // doUpdate(apps);
          _context.next = 4;
          return wikidataRequest;
        case 4:
          wikidataResults = _context.sent.results.bindings;
          _iterator = _createForOfIteratorHelper(wikidataResults);
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              source = _step.value;
              obj = (0,_wikidata__WEBPACK_IMPORTED_MODULE_4__.transformWikidataResult)(source);
              if (obj.website) {
                (0,_addApp__WEBPACK_IMPORTED_MODULE_3__.addApp)(obj);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          doUpdate(_script__WEBPACK_IMPORTED_MODULE_2__.apps);

          // const projectObjects = window.tagInfoProjectsResponse as {
          //   url: string;
          //   data_until: string;
          //   data: {
          //     id: string;
          //     name: string;
          //     project_url: string;
          //     icon_url: string;
          //     doc_url: string;
          //     description: string;
          //     key_entries: number;
          //     tag_entries: number;
          //     unique_keys: number;
          //     unique_tags: number;
          //   }[];
          // };
          // const source = "https://taginfo.openstreetmap.org/projects/";
          // for (const obj of projectObjects.data) {
          //   const app: App = {
          //     name: obj.name,
          //     website: obj.project_url,
          //     images: obj.icon_url ? [obj.icon_url] : [],
          //     documentation: obj.doc_url,
          //     source: [
          //       {
          //         name: "taginfo",
          //         displayName: "taginfo",
          //         url: source + obj.id,
          //         lastChange: projectObjects.data_until,
          //       },
          //     ],
          //     description: obj.description,
          //     genre: [],
          //     topics: [],
          //     languages: [],
          //     platform: [],
          //     coverage: [],
          //     install: {},
          //   };

          //   addApp(app);
          // }
          // doUpdate(apps);
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _loadApps.apply(this, arguments);
}

/***/ }),

/***/ "./data/template/utilities.ts":
/*!************************************!*\
  !*** ./data/template/utilities.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   containsOfflineLink: () => (/* binding */ containsOfflineLink),
/* harmony export */   extractLanguageCodeFromTemplate: () => (/* binding */ extractLanguageCodeFromTemplate),
/* harmony export */   extractNameWebsiteWiki: () => (/* binding */ extractNameWebsiteWiki),
/* harmony export */   extractRepo: () => (/* binding */ extractRepo),
/* harmony export */   extractWebsite: () => (/* binding */ extractWebsite),
/* harmony export */   processWikiText: () => (/* binding */ processWikiText),
/* harmony export */   splitByCommaButNotInsideBraceRegex: () => (/* binding */ splitByCommaButNotInsideBraceRegex),
/* harmony export */   toWikiText: () => (/* binding */ toWikiText)
/* harmony export */ });
/* harmony import */ var _ui_utilities_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ui/utilities/url */ "./ui/utilities/url.ts");
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.


var splitByCommaButNotInsideBraceRegex = /[,;]+(?![^\(]*\))/;
function containsOfflineLink() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return /<((s(trike)?)|(del))>/gi.test(value);
}
function extractLanguageCodeFromTemplate(value) {
  var match = /{{#language:([\w-]+)/.exec(value);
  if (match) return match[1];
  return value;
}
function extractNameWebsiteWiki(value, pageName) {
  value = (value || "").replace(/{{PAGENAME}}/gi, pageName || "");
  var obj = {
    name: value
  };
  {
    var regex = /(\[(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*))\])/gi;
    var match = regex.exec(value);
    if (match) {
      obj.website = match[2];
      value = value.replace(regex, "").trim();
      if (value) obj.name = value;
    }
  }
  {
    var _regex = /(\[(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)) ([^\]]*)\])/gi;
    var _match = _regex.exec(value);
    if (_match) {
      obj.name = _match[5];
      obj.website = _match[2];
      value = value.replace(_regex, "");
    }
  }
  {
    var _regex2 = /\[\[([^\]]*(?![^\|]))(\|([^\]]*))?\]\]/g;
    var _match2 = _regex2.exec(value);
    if (_match2) {
      if (_match2[3]) obj.name = _match2[3];else obj.name = _match2[1];
      obj.wiki = (0,_ui_utilities_url__WEBPACK_IMPORTED_MODULE_0__.toWikiUrl)(_match2[1]);
      value = value.replace(_regex2, "");
    }
  }
  {
    var _regex3 = /\[\[([^\]]*)\]\]/g;
    var _match3 = _regex3.exec(value);
    if (_match3) {
      obj.name = _match3[1];
      obj.wiki = (0,_ui_utilities_url__WEBPACK_IMPORTED_MODULE_0__.toWikiUrl)(_match3[1]);
      value = value.replace(_regex3, "");
    }
  }
  return obj;
}
function extractWebsite() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  {
    var regex = /(\[(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*))\])/gi;
    var match = regex.exec(value);
    if (match) {
      return match[2];
    }
  }
  {
    var _regex4 = /(\[(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)) ([^\]]*)\])/gi;
    var _match4 = _regex4.exec(value);
    if (_match4) {
      return _match4[2];
    }
  }
  {
    var _regex5 = /\[\[([^\]]*(?![^\|]))(\|([^\]]*))?\]\]/g;
    var _match5 = _regex5.exec(value);
    if (_match5) {
      return (0,_ui_utilities_url__WEBPACK_IMPORTED_MODULE_0__.toWikiUrl)(_match5[1]);
    }
  }
  {
    var _regex6 = /{{URL\|(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*))}}/gi;
    var _match6 = _regex6.exec(value);
    if (_match6) {
      return _match6[1];
    }
  }
  {
    var _regex7 = /(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*))/gi;
    var _match7 = _regex7.exec(value);
    if (_match7) {
      return _match7[1];
    }
  }
  return undefined;
}
function extractRepo() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var regex = /{{[Gg]it[Hh]ub[_ ]link\|(((?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)(\|([^(}})]+))?}}/g;
  return value.replace(regex, "https://github.com/$1");
}
function processWikiText() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  // clean up <ref>
  {
    var regex = /<ref>([^<]*)<\/ref>/g;
    text = text.replace(regex, "");
  }

  // Wikipedia
  {
    var _regex8 = /\[\[:wikipedia:([^\]]*(?![^\|]))(\|([^\]]*))?\]\]/g;
    text = text.replace(_regex8, "<a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/$1\">$3</a>");
  }
  {
    var _regex9 = /\[\[:wikipedia:([^\]]*)\]\]/g;
    text = text.replace(_regex9, "<a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/$1\">$1</a>");
  }
  // Url
  {
    var _regex10 = /\[\[([^\]]*(?![^\|]))(\|([^\]]*))?\]\]/;
    var match = _regex10.exec(text);
    while (match) {
      text = text.replace(_regex10, "<a target=\"_blank\" href=\"".concat((0,_ui_utilities_url__WEBPACK_IMPORTED_MODULE_0__.toWikiUrl)(match[1]), "\">").concat(match[3], "</a>"));
      match = _regex10.exec(text);
    }
  }
  {
    var _regex11 = /\[\[([^\]]*)\]\]/;
    var _match8 = _regex11.exec(text);
    while (_match8) {
      text = text.replace(_regex11, "<a target=\"_blank\" href=\"".concat((0,_ui_utilities_url__WEBPACK_IMPORTED_MODULE_0__.toWikiUrl)(_match8[1]), "\">").concat(_match8[1], "</a>"));
      _match8 = _regex11.exec(text);
    }
  }
  {
    var _regex12 = /(\[(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*))\])/gi;
    text = text.replace(_regex12, "<a target=\"_blank\" href=\"$2\">$2</a>");
  }
  {
    var _regex13 = /(\[(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)) ([^\]]*)\])/gi;
    text = text.replace(_regex13, "<a target=\"_blank\" href=\"$2\">$5</a>");
  }
  {
    var _regex14 = /{{(Key|Tag|TagKey)\|([^}|]*)(\|([^}|]*))?}}/gi;
    var _match9 = _regex14.exec(text);
    while (_match9) {
      if (!_match9[4]) {
        text = text.replace(_regex14, "<a target=\"_blank\" href=\"https://wiki.openstreetmap.org/wiki/Key:$2\">$2</a>=*");
      } else {
        text = text.replace(_regex14, "<a target=\"_blank\" href=\"https://wiki.openstreetmap.org/wiki/Key:$2\">$2</a>=<a target=\"_blank\" href=\"https://wiki.openstreetmap.org/wiki/Tag:$2=$4\">$4</a>");
      }
      _match9 = _regex14.exec(text);
    }
  }

  // Format
  {
    var _regex15 = /'''([^(''')]*)'''/g;
    text = text.replace(_regex15, "<strong>$1</strong>");
  }

  // GitHub
  {
    var _regex16 = /{{GitHub[_ ]link\|(((?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)}}/g;
    text = text.replace(_regex16, "<a target=\"_blank\" href=\"https://github.com/$1\">$1</a>");
  }
  {
    var _regex17 = /{{GitHub[_ ]link\|(((?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)(\|([^(}})]+))?}}/g;
    text = text.replace(_regex17, "<a target=\"_blank\" href=\"https://github.com/$1\">$5</a>");
  }

  // GitLab
  {
    var _regex18 = /{{GitLab[_ ]link\|(((?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)}}/g;
    text = text.replace(_regex18, "<a target=\"_blank\" href=\"https://gitlab.com/$1\">$1</a>");
  }
  {
    var _regex19 = /{{GitLab[_ ]link\|(((?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)(\|([^(}})]+))?}}/g;
    text = text.replace(_regex19, "<a target=\"_blank\" href=\"https://gitlab.com/$1\">$5</a>");
  }
  return text;
}
function toWikiText() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  text = text.replaceAll(/\!\!/g, "!&#33;");
  var regex = /<a target="_blank" href="(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]+\b([-a-zA-Z0-9()@:%_\+.~#?&//= ]*))">([^\<]*)<\/a>/i;
  var match = regex.exec(text);
  while (match) {
    if (match[1].startsWith("https://wiki.openstreetmap.org/wiki/")) {
      text = text.replace(regex, "[[".concat(match[1].substring(36), "|").concat(match[4], "]]"));
    } else {
      text = text.replace(regex, "[".concat(match[1], " ").concat(match[4], "]"));
    }
    match = regex.exec(text);
  }
  return text;
}

/***/ }),

/***/ "./data/wikidata.ts":
/*!**************************!*\
  !*** ./data/wikidata.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   requestWikidata: () => (/* binding */ requestWikidata),
/* harmony export */   transformWikidataResult: () => (/* binding */ transformWikidataResult)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "../node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ui_language__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ui/language */ "./ui/language.ts");
/* harmony import */ var _ui_utilities_jsonRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/utilities/jsonRequest */ "./ui/utilities/jsonRequest.ts");




function extractGenre(result) {
  var _result$viewing, _result$routing, _result$editor, _result$comparing, _result$hashtagTool, _result$monitoring, _result$changsetRevie;
  var genre = [];
  if (((_result$viewing = result.viewing) === null || _result$viewing === void 0 ? void 0 : _result$viewing.value) === "yes") {
    genre.push("Viewing tool");
  }
  if (((_result$routing = result.routing) === null || _result$routing === void 0 ? void 0 : _result$routing.value) === "yes") {
    genre.push("Routing tool");
  }
  if (((_result$editor = result.editor) === null || _result$editor === void 0 ? void 0 : _result$editor.value) === "yes") {
    genre.push("Editor tool");
  }
  if (((_result$comparing = result.comparing) === null || _result$comparing === void 0 ? void 0 : _result$comparing.value) === "yes") {
    genre.push("Comparing tool");
  }
  if (((_result$hashtagTool = result.hashtagTool) === null || _result$hashtagTool === void 0 ? void 0 : _result$hashtagTool.value) === "yes") {
    genre.push("Hashtag tool");
  }
  if (((_result$monitoring = result.monitoring) === null || _result$monitoring === void 0 ? void 0 : _result$monitoring.value) === "yes") {
    genre.push("Monitoring tool");
  }
  if (((_result$changsetRevie = result.changsetReview) === null || _result$changsetRevie === void 0 ? void 0 : _result$changsetRevie.value) === "yes") {
    genre.push("Changeset review tool");
  }
  return genre;
}
function transformWikidataResult(result) {
  var _result$description, _result$image, _result$website, _result$websiteDefaul, _result$documentation, _result$documentation2, _result$sourceCode, _result$languages, _result$languagesUrl, _result$asin, _result$googlePlayID, _result$huaweiAppGall, _result$fDroidID, _result$appleStoreID;
  return {
    name: result.itemLabel.value || "",
    description: ((_result$description = result.description) === null || _result$description === void 0 ? void 0 : _result$description.value) || "",
    images: (_result$image = result.image) !== null && _result$image !== void 0 && _result$image.value ? [result.image.value] : [],
    website: ((_result$website = result.website) === null || _result$website === void 0 ? void 0 : _result$website.value) || ((_result$websiteDefaul = result.websiteDefault) === null || _result$websiteDefaul === void 0 ? void 0 : _result$websiteDefaul.value) || "",
    documentation: ((_result$documentation = result.documentation) === null || _result$documentation === void 0 ? void 0 : _result$documentation.value) || ((_result$documentation2 = result.documentationDefault) === null || _result$documentation2 === void 0 ? void 0 : _result$documentation2.value) || "",
    sourceCode: ((_result$sourceCode = result.sourceCode) === null || _result$sourceCode === void 0 ? void 0 : _result$sourceCode.value) || "",
    languages: (((_result$languages = result.languages) === null || _result$languages === void 0 ? void 0 : _result$languages.value) || "").split(";").filter(function (v) {
      return v;
    }).map(function (v) {
      return (0,_ui_language__WEBPACK_IMPORTED_MODULE_2__.languageValueToDisplay)(v);
    }),
    languagesUrl: ((_result$languagesUrl = result.languagesUrl) === null || _result$languagesUrl === void 0 ? void 0 : _result$languagesUrl.value) || "",
    genre: extractGenre(result),
    topics: extractGenre(result),
    platform: [],
    coverage: [],
    install: {
      asin: (_result$asin = result.asin) === null || _result$asin === void 0 ? void 0 : _result$asin.value,
      googlePlayID: (_result$googlePlayID = result.googlePlayID) === null || _result$googlePlayID === void 0 ? void 0 : _result$googlePlayID.value,
      huaweiAppGalleryID: (_result$huaweiAppGall = result.huaweiAppGalleryID) === null || _result$huaweiAppGall === void 0 ? void 0 : _result$huaweiAppGall.value,
      fDroidID: (_result$fDroidID = result.fDroidID) === null || _result$fDroidID === void 0 ? void 0 : _result$fDroidID.value,
      appleStoreID: (_result$appleStoreID = result.appleStoreID) === null || _result$appleStoreID === void 0 ? void 0 : _result$appleStoreID.value
    },
    source: [{
      name: "Wikidata",
      wiki: "",
      displayName: "Wikidata <i class=\"fas fa-pen\"></i>",
      url: result.item.value,
      lastChange: result.modified.value
    }]
  };
}
function requestWikidata(_x) {
  return _requestWikidata.apply(this, arguments);
}
function _requestWikidata() {
  _requestWikidata = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(language) {
    var base, params;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          base = "https://query.wikidata.org/sparql";
          params = {};
          params["query"] = "\n   SELECT DISTINCT \n      ?item ?itemLabel \n      ?description \n      (SAMPLE(?image) AS ?image) \n      (SAMPLE(?websiteDefault) AS ?websiteDefault)\n      (SAMPLE(?website) AS ?website)\n      (SAMPLE(?documentationDefault) AS ?documentationDefault)\n      (SAMPLE(?documentation) AS ?documentation)\n      (SAMPLE(?licenseShortName) AS ?licenseShortName)\n      (SAMPLE(?sourceCode) AS ?sourceCode)\n      (GROUP_CONCAT(DISTINCT ?languageCode; SEPARATOR = \";\") AS ?languages)\n      (SAMPLE(?languagesUrl) AS ?languagesUrl) \n      (SAMPLE(?asin) AS ?asin) \n      (SAMPLE(?googlePlayID) AS ?googlePlayID) \n      (SAMPLE(?huaweiAppGalleryID) AS ?huaweiAppGalleryID) \n      (SAMPLE(?fDroidID) AS ?fDroidID) \n      (SAMPLE(?appleStoreID) AS ?appleStoreID) \n      ?viewing\n      ?routing\n      ?editor\n      ?comparing\n      ?hashtagTool\n      ?monitoring\n      ?changsetReview\n      ?modified \n    WHERE {\n      ?item (wdt:P31/(wdt:P279*)) wd:Q7397.\n      { ?item wdt:P144 wd:Q936. }\n      UNION { ?item wdt:P2283 wd:Q936. }\n      UNION { ?item wdt:P144 wd:Q125124940. }\n      UNION { ?item wdt:P2283 wd:Q125124940. }\n      UNION { ?item wdt:P144 wd:Q116859711. }\n      UNION { ?item wdt:P2283 wd:Q116859711. }\n      UNION { ?item wdt:P144 wd:Q25822543. }\n      UNION { ?item wdt:P2283 wd:Q25822543. }\n      UNION { ?item (wdt:P31/(wdt:P279*)) wd:Q125118130. }\n      OPTIONAL {\n        ?item schema:description ?description.\n        FILTER((LANG(?description)) = \"".concat(language, "\")\n      }\n      OPTIONAL { ?item wdt:P18 ?image. }\n      OPTIONAL { ?item wdt:P856 ?websiteDefault. }\n      OPTIONAL { \n        ?item p:P856 ?websiteStatement. \n        ?websiteStatement ps:P856 ?website.\n        ?websiteStatement pq:P407 ?websiteLanguage.\n        ?websiteLanguage wdt:P218 ?websiteLanguageCode \n        FILTER(?websiteLanguageCode = \"").concat(language, "\")\n      }\n      OPTIONAL { \n        ?item p:P1343 ?documentationDefaultStatement. \n        ?documentationDefaultStatement pq:P2699 ?documentationDefault.\n        }\n      OPTIONAL { \n        ?item p:P973 ?documentationStatement. \n        ?documentationStatement ps:P973 ?documentation.\n        ?documentationStatement pq:P407 ?documentaionLanguage.\n        ?documentaionLanguage wdt:P218 ?documentaionLanguageCode \n        FILTER(?documentaionLanguageCode = \"").concat(language, "\")\n      }\n      OPTIONAL { ?item wdt:P1324 ?sourceCode. }\n      OPTIONAL { \n        ?item wdt:P407 ?language.\n        ?language wdt:P218 ?languageCode.\n      }\n      OPTIONAL { ?item wdt:P11254 ?languagesUrl. }\n      OPTIONAL { ?item wdt:P5749 ?asin. }\n      OPTIONAL { ?item wdt:P3597 ?fDroidID. }\n      OPTIONAL { ?item wdt:P3418 ?googlePlayID. }\n      OPTIONAL { ?item wdt:P8940 ?huaweiAppGalleryID. }\n      OPTIONAL { ?item wdt:P3861 ?appleStoreID. }\n      OPTIONAL { \n        ?item wdt:P31 wd:Q122264265.\n        BIND(\"yes\" AS ?viewing)\n      }\n      OPTIONAL { \n        ?item wdt:P31 wd:Q122264957.\n        BIND(\"yes\" AS ?routing)\n      }\n      OPTIONAL { \n        ?item wdt:P31 wd:Q98163019.\n        BIND(\"yes\" AS ?editor)\n      }\n      OPTIONAL { \n        ?item wdt:P31 wd:Q122264344.\n        BIND(\"yes\" AS ?comparing)\n      }\n      OPTIONAL { \n        ?item wdt:P31 wd:Q122270779.\n        BIND(\"yes\" AS ?hashtagTool)\n      }\n      OPTIONAL { \n        ?item wdt:P31 wd:Q122270784.\n        BIND(\"yes\" AS ?monitoring)\n      }\n      OPTIONAL { \n        ?item wdt:P31 wd:Q125191237.\n        BIND(\"yes\" AS ?changsetReview)\n      }\n      OPTIONAL { ?item schema:dateModified ?modified }\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"").concat(language, ",en\". }\n    }\n    GROUP BY ?item ?itemLabel \n             ?description\n             ?viewing \n             ?routing \n             ?editor \n             ?comparing \n             ?hashtagTool \n             ?monitoring \n             ?changsetReview \n             ?modified\n  ").replaceAll("  ", " ");
          params["format"] = "json";
          _context.next = 6;
          return (0,_ui_utilities_jsonRequest__WEBPACK_IMPORTED_MODULE_3__.getJson)(base, params);
        case 6:
          return _context.abrupt("return", _context.sent);
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _requestWikidata.apply(this, arguments);
}

/***/ }),

/***/ "./script.ts":
/*!*******************!*\
  !*** ./script.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   apps: () => (/* binding */ apps),
/* harmony export */   extendFilter: () => (/* binding */ extendFilter)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/regenerator */ "../node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/utilities/html */ "./ui/utilities/html.ts");
/* harmony import */ var _ui_utilities_debounce__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/utilities/debounce */ "./ui/utilities/debounce.ts");
/* harmony import */ var slim_select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! slim-select */ "../node_modules/slim-select/dist/slimselect.min.mjs");
/* harmony import */ var _ui_lazyLoadImages__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/lazyLoadImages */ "./ui/lazyLoadImages.ts");
/* harmony import */ var _ui_utilities_storage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/utilities/storage */ "./ui/utilities/storage.ts");
/* harmony import */ var _ui_views_list__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui/views/list */ "./ui/views/list.ts");
/* harmony import */ var _ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui/utilities/array */ "./ui/utilities/array.ts");
/* harmony import */ var _ui_utilities_string__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ui/utilities/string */ "./ui/utilities/string.ts");
/* harmony import */ var _ui_utilities_url__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ui/utilities/url */ "./ui/utilities/url.ts");
/* harmony import */ var _ui_utilities_coloriz_Solver__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ui/utilities/coloriz/Solver */ "./ui/utilities/coloriz/Solver.ts");
/* harmony import */ var _ui_utilities_coloriz_Color__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui/utilities/coloriz/Color */ "./ui/utilities/coloriz/Color.ts");
/* harmony import */ var _ui_utilities_filter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ui/utilities/filter */ "./ui/utilities/filter.ts");
/* harmony import */ var _ui_views_compare__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ui/views/compare */ "./ui/views/compare.ts");
/* harmony import */ var _data_loadApps__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./data/loadApps */ "./data/loadApps.ts");
/* harmony import */ var _ui_lazyInitMore__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ui/lazyInitMore */ "./ui/lazyInitMore.ts");
/* harmony import */ var _data_i18n__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./data/i18n */ "./data/i18n.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! i18next */ "../node_modules/i18next/dist/esm/i18next.js");



function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.


















var onInit = true;
var onUpdate = false;
var apps = [];
var topicsSelect = new slim_select__WEBPACK_IMPORTED_MODULE_5__["default"]({
  select: "#topic",
  placeholder: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.topic"),
  onChange: function onChange() {
    doUpdate(apps);
  }
});
var platformsSelect = new slim_select__WEBPACK_IMPORTED_MODULE_5__["default"]({
  select: "#platform",
  placeholder: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.platform"),
  onChange: function onChange() {
    doUpdate(apps);
  }
});
var languagesSelect = new slim_select__WEBPACK_IMPORTED_MODULE_5__["default"]({
  select: "#language",
  placeholder: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.language"),
  onChange: function onChange() {
    doUpdate(apps);
  }
});
var coverageSelect = new slim_select__WEBPACK_IMPORTED_MODULE_5__["default"]({
  select: "#coverage",
  placeholder: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.coverage"),
  onChange: function onChange() {
    doUpdate(apps);
  }
});
var freeCheckbox = document.getElementById("free");
freeCheckbox.addEventListener("change", function () {
  doUpdate(apps);
});
document.getElementById("freeDisplay").innerText = i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.free");
document.getElementById("about").setAttribute("title", i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("about"));
var searchElement = document.getElementById("search");
searchElement.placeholder = i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.search");
searchElement.addEventListener("input", (0,_ui_utilities_debounce__WEBPACK_IMPORTED_MODULE_4__.debounce)(function () {
  return doUpdate(apps);
}, 500));
document.getElementById("listView").addEventListener("input", function () {
  doUpdate(apps);
});
document.getElementById("compareView").addEventListener("input", function () {
  doUpdate(apps);
});
var categorySelect = new slim_select__WEBPACK_IMPORTED_MODULE_5__["default"]({
  select: "#category",
  showSearch: false,
  placeholder: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category"),
  data: [{
    value: "all",
    innerHTML: "<i class='fas fa-layer-group' style='position: absolute;right: 28px;'></i> " + i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.all"),
    text: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.all")
  }, {
    value: "focus",
    innerHTML: "<i class='far fa-eye' style='position: absolute;right: 27px;'></i> " + i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.focus"),
    text: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.focus")
  }, {
    value: "latest",
    innerHTML: "<i class='far fa-clock' style='position: absolute;right: 28px;'></i> " + i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.latest"),
    text: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.latest")
  }, {
    value: "mobile",
    innerHTML: "<i class='fas fa-mobile-alt' style='position: absolute;right: 31px;'></i> " + i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.mobile"),
    text: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.mobile")
  }, {
    value: "navigation",
    innerHTML: "<i class='far fa-compass' style='position: absolute;right: 28px;'></i> " + i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.navigation"),
    text: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.navigation")
  }, {
    value: "edit",
    innerHTML: "<i class='fas fa-edit' style='position: absolute;right: 26px;'></i> " + i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.edit"),
    text: i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("filter.category.edit")
  }],
  onChange: function onChange(i) {
    document.querySelectorAll(".filter").forEach(function (e) {
      return e.classList.toggle("hidden", i.value === "focus");
    });
    doUpdate(apps, i.value === "focus");
  }
});
var lang = ((0,_ui_utilities_url__WEBPACK_IMPORTED_MODULE_11__.findGetParameter)("lang") || "en").toLowerCase();
function doUpdate(newApps, reset) {
  apps = newApps;
  if (!onUpdate) {
    onUpdate = true;
    if (reset) {
      searchElement.value = "";
      topicsSelect.set([]);
      platformsSelect.set([]);
      languagesSelect.set([]);
      coverageSelect.set([]);
    }
    var state = {
      lang: lang,
      freeOnly: freeCheckbox.checked,
      search: searchElement.value,
      topics: topicsSelect.selected(),
      platforms: platformsSelect.selected(),
      languages: languagesSelect.selected(),
      coverage: coverageSelect.selected(),
      category: categorySelect.selected(),
      view: document.getElementById("listView").checked ? "list" : "compare"
    };
    if (onInit) {
      var _params$get, _params$get2, _params$get3, _params$get4;
      var params = new URLSearchParams(location.search);
      state = {
        lang: params.get("lang") || "",
        freeOnly: params.get("freeOnly") === "1" ? true : false,
        search: params.get("search") || "",
        topics: params.get("topics") ? ((_params$get = params.get("topics")) === null || _params$get === void 0 ? void 0 : _params$get.split(",")) || [] : [],
        platforms: params.get("platforms") ? ((_params$get2 = params.get("platforms")) === null || _params$get2 === void 0 ? void 0 : _params$get2.split(",")) || [] : [],
        languages: params.get("languages") ? ((_params$get3 = params.get("languages")) === null || _params$get3 === void 0 ? void 0 : _params$get3.split(",")) || [] : [],
        coverage: params.get("coverage") ? ((_params$get4 = params.get("coverage")) === null || _params$get4 === void 0 ? void 0 : _params$get4.split(",")) || [] : [],
        category: params.get("category") || "all",
        view: params.get("view") === "compare" ? "compare" : "list"
      };
      onInit = false;
    } else {
      updateState(state);
    }
    update(state);
    onUpdate = false;
  }
}
window.addEventListener("popstate", function (e) {
  onUpdate = true;
  update(e.state);
  onUpdate = false;
});
function updateState(state) {
  history.pushState(state, "", "?" + new URLSearchParams([["lang", state.lang === "en" ? "" : state.lang], ["freeOnly", state.freeOnly ? "1" : ""], ["category", state.category === "all" ? "" : state.category], ["search", state.search], ["topics", state.topics.join(",")], ["platforms", state.platforms.join(",")], ["languages", state.languages.join(",")], ["coverage", state.coverage.join(",")], ["view", state.view === "list" ? "" : state.view]].filter(function (pair) {
    return pair[1];
  })).toString());
}
function update(_ref) {
  var _params$get5, _params$get6, _params$get7, _params$get8;
  var freeOnly = _ref.freeOnly,
    category = _ref.category,
    search = _ref.search,
    topics = _ref.topics,
    platforms = _ref.platforms,
    languages = _ref.languages,
    coverage = _ref.coverage,
    view = _ref.view;
  categorySelect.set(category);
  updateDescription(category);
  (0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.getHtmlElement)("#list").innerHTML = "";
  (0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.getHtmlElement)("#compare").innerHTML = "";
  var filteredApps = apps.slice();
  freeCheckbox.checked = freeOnly;
  if (freeOnly) {
    filteredApps = filteredApps.filter(function (a) {
      return a.gratis || a.libre;
    });
  }
  if (category === "latest") {
    filteredApps = filteredApps.sort(function (a, b) {
      var nameA = a.source[0].lastChange.toUpperCase() || "";
      var nameB = b.source[0].lastChange.toUpperCase() || "";
      if (nameA < nameB) {
        return 1;
      }
      if (nameA > nameB) {
        return -1;
      }
      return 0;
    });
    filteredApps = filteredApps.sort(function (a, b) {
      var _a$lastRelease, _b$lastRelease;
      var nameA = ((_a$lastRelease = a.lastRelease) === null || _a$lastRelease === void 0 ? void 0 : _a$lastRelease.toUpperCase()) || "";
      var nameB = ((_b$lastRelease = b.lastRelease) === null || _b$lastRelease === void 0 ? void 0 : _b$lastRelease.toUpperCase()) || "";
      if (nameA < nameB) {
        return 1;
      }
      if (nameA > nameB) {
        return -1;
      }
      return 0;
    });
  } else if (category === "focus") {
    var latestApps = filteredApps.sort(function (a, b) {
      var nameA = a.source[0].lastChange.toUpperCase() || "";
      var nameB = b.source[0].lastChange.toUpperCase() || "";
      if (nameA < nameB) {
        return 1;
      }
      if (nameA > nameB) {
        return -1;
      }
      return 0;
    });
    filteredApps = [];
    var _iterator = _createForOfIteratorHelper(latestApps),
      _step;
    try {
      var _loop = function _loop() {
        var app = _step.value;
        if (filteredApps.length < 10) {
          if (!filteredApps.some(function (a) {
            return (0,_ui_utilities_string__WEBPACK_IMPORTED_MODULE_10__.equalsIgnoreCase)(a.source[0].url, app.source[0].url) || a.source[0].url.startsWith("https://taginfo.openstreetmap.org/projects/") && app.source[0].url.startsWith("https://taginfo.openstreetmap.org/projects/");
          })) {
            filteredApps.push(app);
          }
        } else {
          return 1; // break
        }
      };
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        if (_loop()) break;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  searchElement.value = search;
  search = search.toUpperCase();
  var topicsUp = topics.map(function (t) {
    return t.toUpperCase();
  });
  var platformsUp = platforms.map(function (t) {
    return t.toUpperCase();
  });
  var languagesUp = languages.map(function (t) {
    return t.toUpperCase();
  });
  var coverageUp = [];
  coverage.forEach(function (t) {
    var regions = t.toUpperCase().split(", ");
    var entry = [];
    for (var index = 0; index < regions.length; index++) {
      entry.push(regions[index]);
      coverageUp.push(entry.join(", "));
    }
  });
  if (search) filteredApps = filteredApps.filter(function (a) {
    return a.name.toUpperCase().search(search) !== -1 || a.description.toUpperCase().search(search) !== -1 || a.topics.filter(function (t) {
      return t.toUpperCase().search(search) !== -1;
    }).length > 0 || a.platform.filter(function (t) {
      return t.toUpperCase().search(search) !== -1;
    }).length > 0 || a.coverage.filter(function (t) {
      return t.toUpperCase().search(search) !== -1;
    }).length > 0;
  });
  if (topicsUp.length > 0) filteredApps = filteredApps.filter(function (a) {
    return (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__.includes)(a.topics.map(function (t) {
      return t.toUpperCase();
    }), topicsUp);
  });
  if (platformsUp.length > 0) filteredApps = filteredApps.filter(function (a) {
    return (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__.includes)(a.platform.map(function (t) {
      return t.toUpperCase();
    }), platformsUp);
  });
  if (languagesUp.length > 0) filteredApps = filteredApps.filter(function (a) {
    return (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__.some)(a.languages.map(function (t) {
      return t.toUpperCase();
    }), languagesUp);
  });
  if (coverageUp.length > 0) {
    filteredApps = filteredApps.filter(function (a) {
      return (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__.some)(a.coverage.map(function (t) {
        return t.toUpperCase();
      }), coverageUp);
    });
  }
  var categoriedApps = [];
  if (category === "mobile") {
    categoriedApps.push.apply(categoriedApps, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(filteredApps.filter(_ui_utilities_filter__WEBPACK_IMPORTED_MODULE_14__.mobile)));
    filteredApps = categoriedApps;
  } else if (category === "navigation") {
    categoriedApps.push.apply(categoriedApps, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(filteredApps.filter(_ui_utilities_filter__WEBPACK_IMPORTED_MODULE_14__.navigation)));
    filteredApps = categoriedApps;
  } else if (category === "edit") {
    categoriedApps.push.apply(categoriedApps, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(filteredApps.filter(_ui_utilities_filter__WEBPACK_IMPORTED_MODULE_14__.edit)));
    filteredApps = categoriedApps;
  }
  updateDescription(category, filteredApps.length);
  var params = new URLSearchParams(location.search);
  var topicsData = params.get("topics") ? ((_params$get5 = params.get("topics")) === null || _params$get5 === void 0 ? void 0 : _params$get5.split(",")) || [] : [];
  var platformsData = params.get("platforms") ? ((_params$get6 = params.get("platforms")) === null || _params$get6 === void 0 ? void 0 : _params$get6.split(",")) || [] : [];
  var languagesData = params.get("languages") ? ((_params$get7 = params.get("languages")) === null || _params$get7 === void 0 ? void 0 : _params$get7.split(",")) || [] : [];
  var coverageData = params.get("coverage") ? ((_params$get8 = params.get("coverage")) === null || _params$get8 === void 0 ? void 0 : _params$get8.split(",")) || [] : [];
  var _iterator2 = _createForOfIteratorHelper(filteredApps),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _a = _step2.value;
      topicsData.push.apply(topicsData, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_a.topics.map(function (t) {
        return t;
      })));
      platformsData.push.apply(platformsData, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_a.platform.map(function (t) {
        return t;
      })));
      coverageData.push.apply(coverageData, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_a.coverage.map(function (t) {
        return t;
      })));
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  var _iterator3 = _createForOfIteratorHelper(apps),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _a2 = _step3.value;
      languagesData.push.apply(languagesData, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_a2.languages.map(function (l) {
        return l;
      })));
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  topicsSelect.setData(prepareArrayForSelect(topicsData, topics));
  topicsSelect.set(topics);
  platformsSelect.setData(prepareArrayForSelect(platformsData, platforms));
  platformsSelect.set(platforms);
  languagesSelect.setData(prepareArrayForSelect(languagesData, languages));
  languagesSelect.set(languages);
  coverageSelect.setData(prepareArrayForSelect(coverageData, coverage));
  coverageSelect.set(coverage);
  switch (view) {
    case "list":
      document.getElementById("listView").checked = true;
      document.getElementById("compareView").checked = false;
      var _iterator4 = _createForOfIteratorHelper(filteredApps),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var a = _step4.value;
          (0,_ui_views_list__WEBPACK_IMPORTED_MODULE_8__.render)(a);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      if (filteredApps.length === 0) {
        (0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.getHtmlElement)("#list").appendChild((0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.createElement)("div", i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("noResults"), ["no-results"]));
      }
      renderSimilarApps(filteredApps, search, topicsUp, platformsUp, languagesUp, coverageUp);
      break;
    case "compare":
      document.getElementById("listView").checked = false;
      document.getElementById("compareView").checked = true;
      if (filteredApps.length === 0) {
        (0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.getHtmlElement)("#compare").appendChild((0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.createElement)("div", i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("noResults"), ["no-results"]));
      }
      (0,_ui_views_compare__WEBPACK_IMPORTED_MODULE_15__.render)(filteredApps, lang);
      setTimeout(function () {
        (0,_ui_lazyInitMore__WEBPACK_IMPORTED_MODULE_17__.lazyInitMore)(true);
      }, 0);
      break;
    default:
      throw new Error("Not expected value for view.");
  }
  setTimeout(function () {
    (0,_ui_lazyLoadImages__WEBPACK_IMPORTED_MODULE_6__.lazyLoadImages)(true);
  }, 0);
}
function updateDescription(category, numberOfApps) {
  (0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.getHtmlElement)(".description").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("category.".concat(category, ".description"), {
    numberOfApps: numberOfApps || ""
  });
}
function renderSimilarApps(filteredApps, search, topicsUp, platformsUp, languagesUp, coverageUp) {
  if (topicsUp.length > 0) {
    var similarApps = apps.filter(function (a) {
      return !filteredApps.includes(a);
    });
    similarApps = similarApps.filter(function (a) {
      return topicsUp.every(function (t) {
        return a.name.toUpperCase().search(t) !== -1 || a.description.toUpperCase().search(t) !== -1;
      });
    });
    if (search) similarApps = similarApps.filter(function (a) {
      return a.name.toUpperCase().search(search) !== -1 || a.description.toUpperCase().search(search) !== -1 || a.topics.filter(function (t) {
        return t.toUpperCase().search(search) !== -1;
      }).length > 0 || a.platform.filter(function (t) {
        return t.toUpperCase().search(search) !== -1;
      }).length > 0 || a.coverage.filter(function (t) {
        return t.toUpperCase().search(search) !== -1;
      }).length > 0;
    });
    if (platformsUp.length > 0) similarApps = similarApps.filter(function (a) {
      return (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__.includes)(a.platform.map(function (t) {
        return t.toUpperCase();
      }), platformsUp);
    });
    if (languagesUp.length > 0) similarApps = similarApps.filter(function (a) {
      return (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__.some)(a.languages.map(function (t) {
        return t.toUpperCase();
      }), languagesUp);
    });
    if (coverageUp.length > 0) similarApps = similarApps.filter(function (a) {
      return (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__.some)(a.coverage.map(function (t) {
        return t.toUpperCase();
      }), coverageUp);
    });
    if (similarApps.length > 0) {
      var similarTag = (0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.createElement)("h2", i18next__WEBPACK_IMPORTED_MODULE_19__["default"].t("relatedApps", {
        numberOfApps: similarApps.length
      }));
      (0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.getHtmlElement)("#list").appendChild(similarTag);
      var _iterator5 = _createForOfIteratorHelper(similarApps),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var a = _step5.value;
          (0,_ui_views_list__WEBPACK_IMPORTED_MODULE_8__.render)(a);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }
}
function saveAppCatalog() {
  try {
    (0,_ui_utilities_storage__WEBPACK_IMPORTED_MODULE_7__.set)("".concat(lang, "-apps"), apps);
    (0,_ui_utilities_storage__WEBPACK_IMPORTED_MODULE_7__.set)("".concat(lang, "-apps-date"), new Date());
  } catch (e) {
    // Error occurs, perhaps the local storage is full. Clear and try again.
    localStorage.clear();
    (0,_ui_utilities_storage__WEBPACK_IMPORTED_MODULE_7__.set)("".concat(lang, "-apps"), apps);
    (0,_ui_utilities_storage__WEBPACK_IMPORTED_MODULE_7__.set)("".concat(lang, "-apps-date"), new Date());
  }
  console.info("added catalog to cache");

  //printJsonLd();
}
function printJsonLd() {
  console.info(JSON.stringify(apps.sort(function (a, b) {
    var nameA = a.name.toUpperCase() || "";
    var nameB = b.name.toUpperCase() || "";
    if (nameA < nameB) {
      return 1;
    }
    if (nameA > nameB) {
      return -1;
    }
    return 0;
  }).map(function (app) {
    var _app$install$appleSto, _app$install$macAppSt;
    return {
      "@context": "http://schema.org",
      "@type": "SoftwareApplication",
      name: app.name,
      description: app.description,
      image: app.images[0],
      url: app.website,
      downloadUrl: app.install.fDroidID ? "https://f-droid.org/repository/browse/?fdid=" + app.install.fDroidID :  false || app.install.googlePlayID ? "https://play.google.com/store/apps/details?id=" + app.install.googlePlayID :  false || app.install.asin ? "https://www.amazon.com/dp/" + app.install.asin :  false || app.install.appleStoreID ? "https://apps.apple.com/app/" + ((_app$install$appleSto = app.install.appleStoreID) === null || _app$install$appleSto === void 0 ? void 0 : _app$install$appleSto.toUpperCase().startsWith("ID")) ? app.install.appleStoreID : 0 :  false || app.install.macAppStoreID ? "https://apps.apple.com/app/" + ((_app$install$macAppSt = app.install.macAppStoreID) === null || _app$install$macAppSt === void 0 ? void 0 : _app$install$macAppSt.toUpperCase().startsWith("ID")) ? app.install.macAppStoreID : 0 :  false || app.install.microsoftAppID ? "https://apps.microsoft.com/detail/" + app.install.microsoftAppID :  false || app.install.huaweiAppGalleryID ? "https://appgallery.huawei.com/#/app/" + app.install.huaweiAppGalleryID : undefined,
      author: {
        "@type": "Person",
        name: app.author
      },
      datePublished: app.lastRelease,
      license: app.license,
      applicationCategory: ["Map"].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(app.topics)).join(", "),
      operatingSystem: app.platform.join(", ")
    };
  })));
}
function getAppCatalog() {
  return _getAppCatalog.apply(this, arguments);
}
function _getAppCatalog() {
  _getAppCatalog = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default().mark(function _callee() {
    var date, day;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          date = (0,_ui_utilities_storage__WEBPACK_IMPORTED_MODULE_7__.get)("".concat(lang, "-apps-date"));
          day = 24 * 60 * 60 * 1000;
          if (date && new Date(date).valueOf() > Date.now() - day || !window.navigator.onLine) {
            console.info("get catalog from cache");
            apps = (0,_ui_utilities_storage__WEBPACK_IMPORTED_MODULE_7__.get)("".concat(lang, "-apps")) || [];
            doUpdate(apps);
          }
          if (!(apps.length === 0)) {
            _context.next = 12;
            break;
          }
          console.info("load catalog from wiki");
          if (!(lang !== "en")) {
            _context.next = 8;
            break;
          }
          _context.next = 8;
          return (0,_data_loadApps__WEBPACK_IMPORTED_MODULE_16__.loadApps)(doUpdate, lang);
        case 8:
          _context.next = 10;
          return (0,_data_loadApps__WEBPACK_IMPORTED_MODULE_16__.loadApps)(doUpdate);
        case 10:
          (0,_ui_utilities_array__WEBPACK_IMPORTED_MODULE_9__.shuffle)(apps);
          saveAppCatalog();
        case 12:
          (0,_ui_utilities_html__WEBPACK_IMPORTED_MODULE_3__.getHtmlElement)("#loading").remove();
        case 13:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getAppCatalog.apply(this, arguments);
}
function extendFilter(app) {
  if (app.images.length === 0 && !app.filter) {
    var defaultColor = (0,_ui_utilities_string__WEBPACK_IMPORTED_MODULE_10__.textToColor)(app.name);
    app.filter = new _ui_utilities_coloriz_Solver__WEBPACK_IMPORTED_MODULE_12__.Solver(new _ui_utilities_coloriz_Color__WEBPACK_IMPORTED_MODULE_13__.Color(defaultColor.r, defaultColor.g, defaultColor.b)).solve().filter.replace(/filter:/gi, "filter: brightness(0%)");
  }
}
getAppCatalog();
function prepareArrayForSelect(names, selected) {
  names.sort(function (a, b) {
    if (a.toUpperCase() < b.toUpperCase()) return -1;
    if (a.toUpperCase() > b.toUpperCase()) return 1;
    return 0;
  });
  var nameCounts = [];
  var _iterator6 = _createForOfIteratorHelper(names),
    _step6;
  try {
    var _loop2 = function _loop2() {
      var name = _step6.value;
      var nameCountFiltered = nameCounts.filter(function (nc) {
        return (0,_ui_utilities_string__WEBPACK_IMPORTED_MODULE_10__.equalsIgnoreCase)(nc.name, name);
      });
      if (nameCountFiltered.length > 0) {
        nameCountFiltered[0].count++;
      } else {
        nameCounts.push({
          name: name,
          count: 1
        });
      }
    };
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  return nameCounts.map(function (t) {
    if (selected.filter(function (s) {
      return (0,_ui_utilities_string__WEBPACK_IMPORTED_MODULE_10__.equalsIgnoreCase)(t.name, s);
    }).length > 0) return {
      value: t.name,
      text: t.name
    };else return {
      value: t.name,
      text: "".concat(t.name, " (").concat(t.count, ")")
    };
  });
}

/***/ }),

/***/ "./ui/getLocalizedValue.ts":
/*!*********************************!*\
  !*** ./ui/getLocalizedValue.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getLocalizedValue: () => (/* binding */ getLocalizedValue)
/* harmony export */ });
function getLocalizedValue(setting, locale) {
  if (!setting) {
    return undefined;
  }
  if (typeof setting === "string") {
    return setting;
  }
  if (setting[locale]) {
    // excact match found
    return setting[locale];
  }
  var parts = locale.split("-");
  if (parts.length > 1) {
    if (setting[parts[0]]) {
      // found eg. "de" for "de-CH"
      return setting[locale];
    }
  }

  // fallback take first
  return setting[Object.keys(setting)[0]];
}

/***/ }),

/***/ "./ui/language.ts":
/*!************************!*\
  !*** ./ui/language.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   languageValueToDisplay: () => (/* binding */ languageValueToDisplay)
/* harmony export */ });
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../node_modules/i18next/dist/esm/i18next.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.


var languages = [{
  code: "aa",
  display: "Afar"
}, {
  code: "ab",
  display: "Аҧсуа"
}, {
  code: "af",
  display: "Afrikaans"
}, {
  code: "ak",
  display: "Akana"
}, {
  code: "als",
  display: "Alemannisch"
}, {
  code: "am",
  display: "አማርኛ"
}, {
  code: "an",
  display: "Aragonés"
}, {
  code: "ang",
  display: "Angal Heneng"
}, {
  code: "ang",
  display: "Englisc"
}, {
  code: "ar",
  display: "العربية"
}, {
  code: "arc",
  display: "ܣܘܪܬ"
}, {
  code: "as",
  display: "অসমীয়া"
}, {
  code: "ast",
  display: "Asturianu"
}, {
  code: "av",
  display: "Авар"
}, {
  code: "awa",
  display: "Awadhi"
}, {
  code: "ay",
  display: "Aymar"
}, {
  code: "az",
  display: "Azərbaycanca / آذربايجان"
}, {
  code: "ba",
  display: "Башҡорт"
}, {
  code: "bar",
  display: "Boarisch"
}, {
  code: "bat-smg",
  display: "Žemaitėška"
}, {
  code: "bcl",
  display: "Bikol Central"
}, {
  code: "be",
  display: "Беларуская"
}, {
  code: "be-x-old",
  display: "Беларуская (тарашкевіца)"
}, {
  code: "bg",
  display: "Български"
}, {
  code: "bh",
  display: "भोजपुरी"
}, {
  code: "bi",
  display: "Bislama"
}, {
  code: "bm",
  display: "Bamanankan"
}, {
  code: "bn",
  display: "বাংলা"
}, {
  code: "bo",
  display: "བོད་ཡིག / Bod skad"
}, {
  code: "bpy",
  display: "ইমার ঠার/বিষ্ণুপ্রিয়া মণিপুরী"
}, {
  code: "br",
  display: "Brezhoneg"
}, {
  code: "bs",
  display: "Bosanski"
}, {
  code: "bug",
  display: "ᨅᨔ ᨕᨘᨁᨗ / Basa Ugi"
}, {
  code: "bxr",
  display: "Буряад хэлэн"
}, {
  code: "ca",
  display: "Català"
}, {
  code: "cdo",
  display: "Mìng-dĕ̤ng-ngṳ̄ / 閩東語"
}, {
  code: "ce",
  display: "Нохчийн"
}, {
  code: "ceb",
  display: "Sinugboanong Binisaya"
}, {
  code: "ch",
  display: "Chamoru"
}, {
  code: "cho",
  display: "Choctaw"
}, {
  code: "chr",
  display: "ᏣᎳᎩ"
}, {
  code: "chy",
  display: "Tsetsêhestâhese"
}, {
  code: "closed-zh-tw",
  display: "‪中文(台灣)‬"
}, {
  code: "co",
  display: "Corsu"
}, {
  code: "cr",
  display: "Nehiyaw"
}, {
  code: "cs",
  display: "Česky"
}, {
  code: "csb",
  display: "Kaszëbsczi"
}, {
  code: "cu",
  display: "словѣньскъ / slověnĭskŭ"
}, {
  code: "cv",
  display: "Чăваш"
}, {
  code: "cy",
  display: "Cymraeg"
}, {
  code: "da",
  display: "Dansk"
}, {
  code: "de",
  display: "Deutsch"
}, {
  code: "diq",
  display: "Zazaki"
}, {
  code: "dsb",
  display: "Dolnoserbski"
}, {
  code: "dv",
  display: "ދިވެހިބަސް"
}, {
  code: "dz",
  display: "ཇོང་ཁ"
}, {
  code: "ee",
  display: "Ɛʋɛ"
}, {
  code: "el",
  display: "Ελληνικά"
}, {
  code: "en",
  display: "English"
}, {
  code: "eo",
  display: "Esperanto"
}, {
  code: "es",
  display: "Español"
}, {
  code: "et",
  display: "Eesti"
}, {
  code: "eu",
  display: "Euskara"
}, {
  code: "ext",
  display: "Estremeñu"
}, {
  code: "fa",
  display: "فارسی"
}, {
  code: "ff",
  display: "Fulfulde"
}, {
  code: "fi",
  display: "Suomi"
}, {
  code: "fiu-vro",
  display: "Võro"
}, {
  code: "fj",
  display: "Na Vosa Vakaviti"
}, {
  code: "fo",
  display: "Føroyskt"
}, {
  code: "fr",
  display: "Français"
}, {
  code: "frp",
  display: "Arpitan / francoprovençal"
}, {
  code: "fur",
  display: "Furlan"
}, {
  code: "fy",
  display: "Frysk"
}, {
  code: "ga",
  display: "Gaeilge"
}, {
  code: "gan",
  display: "贛語"
}, {
  code: "gbm",
  display: "गढ़वळी"
}, {
  code: "gcf",
  display: "Kréyòl gwadloupéyen"
}, {
  code: "gd",
  display: "Gàidhlig"
}, {
  code: "gil",
  display: "Taetae ni kiribati"
}, {
  code: "gl",
  display: "Galego"
}, {
  code: "gn",
  display: "Avañe'ẽ"
}, {
  code: "got",
  display: "gutisk"
}, {
  code: "gu",
  display: "ગુજરાતી"
}, {
  code: "gv",
  display: "Gaelg"
}, {
  code: "ha",
  display: "هَوُسَ"
}, {
  code: "hak",
  display: "客家語/Hak-kâ-ngî"
}, {
  code: "haw",
  display: "Hawai`i"
}, {
  code: "he",
  display: "עברית"
}, {
  code: "hi",
  display: "हिन्दी"
}, {
  code: "ho",
  display: "Hiri Motu"
}, {
  code: "hr",
  display: "Hrvatski"
}, {
  code: "ht",
  display: "Krèyol ayisyen"
}, {
  code: "hu",
  display: "Magyar"
}, {
  code: "hy",
  display: "Հայերեն"
}, {
  code: "hz",
  display: "Otsiherero"
}, {
  code: "ia",
  display: "Interlingua"
}, {
  code: "id",
  display: "Bahasa Indonesia"
}, {
  code: "ie",
  display: "Interlingue"
}, {
  code: "ig",
  display: "Igbo"
}, {
  code: "ii",
  display: "ꆇꉙ / 四川彝语"
}, {
  code: "ik",
  display: "Iñupiak"
}, {
  code: "ilo",
  display: "Ilokano"
}, {
  code: "inh",
  display: "ГӀалгӀай"
}, {
  code: "io",
  display: "Ido"
}, {
  code: "is",
  display: "Íslenska"
}, {
  code: "it",
  display: "Italiano"
}, {
  code: "iu",
  display: "ᐃᓄᒃᑎᑐᑦ"
}, {
  code: "ja",
  display: "日本語"
}, {
  code: "jbo",
  display: "Lojban"
}, {
  code: "jv",
  display: "Basa Jawa"
}, {
  code: "ka",
  display: "ქართული"
}, {
  code: "kg",
  display: "KiKongo"
}, {
  code: "khw",
  display: "کھوار"
}, {
  code: "ki",
  display: "Gĩkũyũ"
}, {
  code: "kj",
  display: "Kuanyama"
}, {
  code: "kk",
  display: "Қазақша"
}, {
  code: "kl",
  display: "Kalaallisut"
}, {
  code: "km",
  display: "ភាសាខ្មែរ"
}, {
  code: "kn",
  display: "ಕನ್ನಡ"
}, {
  code: "ko",
  display: "한국어"
}, {
  code: "kr",
  display: "Kanuri"
}, {
  code: "ks",
  display: "कश्मीरी / كشميري"
}, {
  code: "ksh",
  display: "Ripoarisch"
}, {
  code: "ku",
  display: "Kurdî / كوردی"
}, {
  code: "kv",
  display: "Коми"
}, {
  code: "kw",
  display: "Kernewek"
}, {
  code: "ky",
  display: "Kırgızca / Кыргызча"
}, {
  code: "la",
  display: "Latina"
}, {
  code: "lad",
  display: "Dzhudezmo / Djudeo-Espanyol"
}, {
  code: "lan",
  display: "Leb Lango / Luo"
}, {
  code: "lb",
  display: "Lëtzebuergesch"
}, {
  code: "lg",
  display: "Luganda"
}, {
  code: "li",
  display: "Limburgs"
}, {
  code: "lij",
  display: "Líguru"
}, {
  code: "lmo",
  display: "Lumbaart"
}, {
  code: "ln",
  display: "Lingála"
}, {
  code: "lo",
  display: "ລາວ / Pha xa lao"
}, {
  code: "lt",
  display: "Lietuvių"
}, {
  code: "lv",
  display: "Latviešu"
}, {
  code: "lzz",
  display: "Lazuri / ლაზური"
}, {
  code: "man",
  display: "官話/官话"
}, {
  code: "map-bms",
  display: "Basa Banyumasan"
}, {
  code: "mg",
  display: "Malagasy"
}, {
  code: "mh",
  display: "Kajin Majel / Ebon"
}, {
  code: "mi",
  display: "Māori"
}, {
  code: "min",
  display: "Minangkabau"
}, {
  code: "mk",
  display: "Македонски"
}, {
  code: "ml",
  display: "മലയാളം"
}, {
  code: "mn",
  display: "Монгол"
}, {
  code: "mo",
  display: "Moldovenească"
}, {
  code: "mr",
  display: "मराठी"
}, {
  code: "mrh",
  display: "Mara"
}, {
  code: "ms",
  display: "Bahasa Melayu"
}, {
  code: "mt",
  display: "bil-Malti"
}, {
  code: "mul",
  display: function display() {
    return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("multilingual");
  }
}, {
  code: "mus",
  display: "Mvskoke"
}, {
  code: "mwl",
  display: "Mirandés"
}, {
  code: "my",
  display: "Myanmasa / မြန်မာဘာသာ"
}, {
  code: "na",
  display: "Dorerin Naoero"
}, {
  code: "nah",
  display: "Nahuatl"
}, {
  code: "nap",
  display: "Nnapulitano"
}, {
  code: "nb",
  display: "Norsk (bokmål)"
}, {
  code: "nd",
  display: "Sindebele"
}, {
  code: "nds",
  display: "Plattdüütsch"
}, {
  code: "nds-nl",
  display: "Nedersaksisch"
}, {
  code: "ne",
  display: "नेपाली"
}, {
  code: "new",
  display: "नेपालभाषा / Newah Bhaye"
}, {
  code: "ng",
  display: "Oshiwambo"
}, {
  code: "nl",
  display: "Nederlands"
}, {
  code: "nn",
  display: "Norsk (nynorsk)"
}, {
  code: "no",
  display: "Norsk (bokmål / riksmål)"
}, {
  code: "nr",
  display: "isiNdebele"
}, {
  code: "nrm",
  display: "Nouormand / Normaund"
}, {
  code: "nso",
  display: "Sesotho sa Leboa / Sepedi"
}, {
  code: "nv",
  display: "Diné bizaad"
}, {
  code: "ny",
  display: "Chi-Chewa"
}, {
  code: "oc",
  display: "Occitan"
}, {
  code: "oj",
  display: "ᐊᓂᔑᓈᐯᒧᐎᓐ / Anishinaabemowin"
}, {
  code: "om",
  display: "Oromoo"
}, {
  code: "or",
  display: "ଓଡ଼ିଆ"
}, {
  code: "os",
  display: "Иронау"
}, {
  code: "pa",
  display: "ਪੰਜਾਬੀ / पंजाबी / پنجابي"
}, {
  code: "pag",
  display: "Pangasinan"
}, {
  code: "pam",
  display: "Kapampangan"
}, {
  code: "pap",
  display: "Papiamentu"
}, {
  code: "pdc",
  display: "Deitsch"
}, {
  code: "pi",
  display: "Pāli / पाऴि"
}, {
  code: "pih",
  display: "Norfuk"
}, {
  code: "pl",
  display: "Polski"
}, {
  code: "pms",
  display: "Piemontèis"
}, {
  code: "ps",
  display: "پښتو"
}, {
  code: "pt",
  display: "Português"
}, {
  code: "qu",
  display: "Runa Simi"
}, {
  code: "rm",
  display: "Rumantsch"
}, {
  code: "rmy",
  display: "Romani / रोमानी"
}, {
  code: "rn",
  display: "Kirundi"
}, {
  code: "ro",
  display: "Română"
}, {
  code: "roa-rup",
  display: "Armâneashti"
}, {
  code: "ru",
  display: "Русский"
}, {
  code: "rw",
  display: "Kinyarwandi"
}, {
  code: "sa",
  display: "संस्कृतम्"
}, {
  code: "sc",
  display: "Sardu"
}, {
  code: "scn",
  display: "Sicilianu"
}, {
  code: "sco",
  display: "Scots"
}, {
  code: "sd",
  display: "सिनधि"
}, {
  code: "se",
  display: "Davvisámegiella"
}, {
  code: "sg",
  display: "Sängö"
}, {
  code: "sh",
  display: "Srpskohrvatski / Српскохрватски"
}, {
  code: "si",
  display: "සිංහල"
}, {
  code: "simple",
  display: "Simple English"
}, {
  code: "sk",
  display: "Slovenčina"
}, {
  code: "sl",
  display: "Slovenščina"
}, {
  code: "sm",
  display: "Gagana Samoa"
}, {
  code: "sn",
  display: "chiShona"
}, {
  code: "so",
  display: "Soomaaliga"
}, {
  code: "sq",
  display: "Shqip"
}, {
  code: "sr-latn",
  display: "srpski (latinica)"
}, {
  code: "sr",
  display: "Српски / Srpski"
}, {
  code: "ss",
  display: "SiSwati"
}, {
  code: "st",
  display: "Sesotho"
}, {
  code: "su",
  display: "Basa Sunda"
}, {
  code: "sv",
  display: "Svenska"
}, {
  code: "sw",
  display: "Kiswahili"
}, {
  code: "ta",
  display: "தமிழ்"
}, {
  code: "te",
  display: "తెలుగు"
}, {
  code: "tet",
  display: "Tetun"
}, {
  code: "tg",
  display: "Тоҷикӣ"
}, {
  code: "th",
  display: "ไทย / Phasa Thai"
}, {
  code: "ti",
  display: "ትግርኛ"
}, {
  code: "tk",
  display: "Туркмен / تركمن"
}, {
  code: "tl",
  display: "Tagalog"
}, {
  code: "tlh",
  display: "tlhIngan-Hol"
}, {
  code: "tn",
  display: "Setswana"
}, {
  code: "to",
  display: "Lea Faka-Tonga"
}, {
  code: "tokipona",
  display: "tokipona"
}, {
  code: "tpi",
  display: "Tok Pisin"
}, {
  code: "tr",
  display: "Türkçe"
}, {
  code: "ts",
  display: "Xitsonga"
}, {
  code: "tt",
  display: "Tatarça"
}, {
  code: "tum",
  display: "chiTumbuka"
}, {
  code: "tw",
  display: "Twi"
}, {
  code: "ty",
  display: "Reo Mā`ohi"
}, {
  code: "tzm",
  display: "ⵜⴰⵎⴰⵣⵉⵖⵜ"
}, {
  code: "udm",
  display: "Удмурт кыл"
}, {
  code: "ug",
  display: "Uyƣurqə / ئۇيغۇرچە"
}, {
  code: "uk",
  display: "Українська"
}, {
  code: "ur",
  display: "اردو"
}, {
  code: "uz",
  display: "Ўзбек"
}, {
  code: "ve",
  display: "Tshivenḓa"
}, {
  code: "vec",
  display: "Vèneto"
}, {
  code: "vi",
  display: "Việtnam"
}, {
  code: "vls",
  display: "West-Vlaoms"
}, {
  code: "vo",
  display: "Volapük"
}, {
  code: "wa",
  display: "Walon"
}, {
  code: "war",
  display: "Winaray / Binisaya Lineyte-Samarnon"
}, {
  code: "wo",
  display: "Wollof"
}, {
  code: "xal",
  display: "Хальмг"
}, {
  code: "xh",
  display: "isiXhosa"
}, {
  code: "xmf",
  display: "მარგალური"
}, {
  code: "yi",
  display: "ייִדיש"
}, {
  code: "yo",
  display: "Yorùbá"
}, {
  code: "yue",
  display: "粵語"
}, {
  code: "za",
  display: "Cuengh / Tôô / 壮语"
}, {
  code: "zh",
  display: "中文"
}, {
  code: "zh-classical",
  display: "文言"
}, {
  code: "zh-hans",
  display: "中文 (简体)"
}, {
  code: "zh-hant",
  display: "中文 (繁體)"
}, {
  code: "zh-min-nan",
  display: "Bân-lâm-gú"
}, {
  code: "zh-tw",
  display: "‪中文(台灣)‬"
}, {
  code: "zh-yue",
  display: "粵語 / 粤语"
}, {
  code: "zu",
  display: "isiZulu"
}];
function languageValueToDisplay(value) {
  if (!Number.isNaN(Number.parseInt(value, 10))) {
    value = "mul";
  } else {
    value = value.replaceAll("_", "-").toLowerCase();
  }
  var _iterator = _createForOfIteratorHelper(languages),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var language = _step.value;
      if (language.code === value) {
        if (typeof language.display === "function") {
          return language.display();
        } else {
          return language.display;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  value = extractLanguageCodeFromLocal(value);
  var _iterator2 = _createForOfIteratorHelper(languages),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _language = _step2.value;
      if (_language.code === value) {
        if (typeof _language.display === "function") {
          return _language.display();
        } else {
          return _language.display;
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return value;
}
function extractLanguageCodeFromLocal(value) {
  var match = /(\w+)/g.exec(value);
  if (match) return match[1];
  return value;
}

/***/ }),

/***/ "./ui/lazyInitMore.ts":
/*!****************************!*\
  !*** ./ui/lazyInitMore.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lazyInitMore: () => (/* binding */ lazyInitMore)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "../node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);

var _document$getElementB, _document$getElementB2, _document$getElementB3;

// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

function isOverflown(element) {
  return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
}
var scrollLeft = 0;
function lazyInitMore(_x) {
  return _lazyInitMore.apply(this, arguments);
}
function _lazyInitMore() {
  _lazyInitMore = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(reset) {
    var contentElement, elements, i, boundingClientRect, div;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (reset) {
            scrollLeft = 0;
          }
          contentElement = document.getElementById("content");
          if (contentElement) {
            _context.next = 4;
            break;
          }
          return _context.abrupt("return");
        case 4:
          if (!(scrollLeft && contentElement.scrollLeft < scrollLeft + contentElement.clientWidth)) {
            _context.next = 6;
            break;
          }
          return _context.abrupt("return");
        case 6:
          scrollLeft = contentElement.scrollLeft + contentElement.clientWidth;
          elements = document.querySelectorAll("#compare .dynamic-more");
          for (i = 0; i < elements.length; i++) {
            boundingClientRect = elements[i].getBoundingClientRect();
            if (boundingClientRect.left < contentElement.clientWidth * 3) {
              if (isOverflown(elements[i])) {
                elements[i].classList.add("more");
                div = document.createElement("div");
                div.classList.add("fade-out");
                div.innerHTML = '<div class="button"><span class="text">&mdash; More &mdash;</span></div>';
                elements[i].appendChild(div);
                div.addEventListener("click", function () {
                  this.style.display = "none";
                  var h = this.parentElement;
                  h.style.height = h.scrollHeight + "px";
                  setTimeout(function () {
                    h.style.height = "auto";
                  }, 1200);
                });
              }
              elements[i].classList.remove("dynamic-more");
            }
          }
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _lazyInitMore.apply(this, arguments);
}
(_document$getElementB = document.getElementById("content")) === null || _document$getElementB === void 0 || _document$getElementB.addEventListener("scroll", function () {
  lazyInitMore();
});
(_document$getElementB2 = document.getElementById("content")) === null || _document$getElementB2 === void 0 || _document$getElementB2.addEventListener("load", function () {
  lazyInitMore();
});
(_document$getElementB3 = document.getElementById("content")) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.addEventListener("resize", function () {
  lazyInitMore();
});

/***/ }),

/***/ "./ui/lazyLoadImages.ts":
/*!******************************!*\
  !*** ./ui/lazyLoadImages.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lazyLoadImages: () => (/* binding */ lazyLoadImages)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "../node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);

var _document$getElementB, _document$getElementB2, _document$getElementB3;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

var scrollTop = 0;
var scrollLeft = 0;
function lazyLoadImages(_x) {
  return _lazyLoadImages.apply(this, arguments);
}
function _lazyLoadImages() {
  _lazyLoadImages = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(reset) {
    var contentElement, elements, i, boundingClientRect, sources, _iterator, _step, src, _elements, _i, _boundingClientRect, _sources, _iterator2, _step2, _src;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (reset) {
            scrollTop = 0;
            scrollLeft = 0;
          }
          contentElement = document.getElementById("content");
          if (contentElement) {
            _context.next = 4;
            break;
          }
          return _context.abrupt("return");
        case 4:
          if (!(!scrollTop || contentElement.scrollTop > scrollTop + contentElement.clientHeight)) {
            _context.next = 39;
            break;
          }
          scrollTop = contentElement.scrollTop + contentElement.clientHeight;
          elements = document.querySelectorAll("#list *[dynamic-src]");
          i = 0;
        case 8:
          if (!(i < elements.length)) {
            _context.next = 39;
            break;
          }
          boundingClientRect = elements[i].getBoundingClientRect();
          if (!(elements[i].hasAttribute("dynamic-src") && boundingClientRect.top < (contentElement === null || contentElement === void 0 ? void 0 : contentElement.clientHeight) * 3)) {
            _context.next = 36;
            break;
          }
          sources = (elements[i].getAttribute("dynamic-src") || "").split(" ");
          _iterator = _createForOfIteratorHelper(sources);
          _context.prev = 13;
          _iterator.s();
        case 15:
          if ((_step = _iterator.n()).done) {
            _context.next = 27;
            break;
          }
          src = _step.value;
          _context.t0 = document.body.contains(elements[i]);
          if (!_context.t0) {
            _context.next = 22;
            break;
          }
          _context.next = 21;
          return isImage(src);
        case 21:
          _context.t0 = _context.sent;
        case 22:
          if (!_context.t0) {
            _context.next = 25;
            break;
          }
          elements[i].setAttribute("src", src);
          return _context.abrupt("break", 27);
        case 25:
          _context.next = 15;
          break;
        case 27:
          _context.next = 32;
          break;
        case 29:
          _context.prev = 29;
          _context.t1 = _context["catch"](13);
          _iterator.e(_context.t1);
        case 32:
          _context.prev = 32;
          _iterator.f();
          return _context.finish(32);
        case 35:
          elements[i].removeAttribute("dynamic-src");
        case 36:
          i++;
          _context.next = 8;
          break;
        case 39:
          if (!(!scrollLeft || contentElement.scrollLeft > scrollLeft + contentElement.clientWidth)) {
            _context.next = 74;
            break;
          }
          scrollLeft = contentElement.scrollLeft + contentElement.clientWidth;
          _elements = document.querySelectorAll("#compare *[dynamic-src]");
          _i = 0;
        case 43:
          if (!(_i < _elements.length)) {
            _context.next = 74;
            break;
          }
          _boundingClientRect = _elements[_i].getBoundingClientRect();
          if (!(_elements[_i].hasAttribute("dynamic-src") && _boundingClientRect.left < (contentElement === null || contentElement === void 0 ? void 0 : contentElement.clientWidth) * 2)) {
            _context.next = 71;
            break;
          }
          _sources = (_elements[_i].getAttribute("dynamic-src") || "").split(" ");
          _iterator2 = _createForOfIteratorHelper(_sources);
          _context.prev = 48;
          _iterator2.s();
        case 50:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 62;
            break;
          }
          _src = _step2.value;
          _context.t2 = document.body.contains(_elements[_i]);
          if (!_context.t2) {
            _context.next = 57;
            break;
          }
          _context.next = 56;
          return isImage(_src);
        case 56:
          _context.t2 = _context.sent;
        case 57:
          if (!_context.t2) {
            _context.next = 60;
            break;
          }
          _elements[_i].setAttribute("src", _src);
          return _context.abrupt("break", 62);
        case 60:
          _context.next = 50;
          break;
        case 62:
          _context.next = 67;
          break;
        case 64:
          _context.prev = 64;
          _context.t3 = _context["catch"](48);
          _iterator2.e(_context.t3);
        case 67:
          _context.prev = 67;
          _iterator2.f();
          return _context.finish(67);
        case 70:
          _elements[_i].removeAttribute("dynamic-src");
        case 71:
          _i++;
          _context.next = 43;
          break;
        case 74:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[13, 29, 32, 35], [48, 64, 67, 70]]);
  }));
  return _lazyLoadImages.apply(this, arguments);
}
(_document$getElementB = document.getElementById("content")) === null || _document$getElementB === void 0 || _document$getElementB.addEventListener("scroll", function () {
  lazyLoadImages();
});
(_document$getElementB2 = document.getElementById("content")) === null || _document$getElementB2 === void 0 || _document$getElementB2.addEventListener("load", function () {
  lazyLoadImages();
});
(_document$getElementB3 = document.getElementById("content")) === null || _document$getElementB3 === void 0 || _document$getElementB3.addEventListener("resize", function () {
  lazyLoadImages();
});
function isImage(_x2) {
  return _isImage.apply(this, arguments);
}
function _isImage() {
  _isImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2(src) {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt("return", new Promise(function (resolve) {
            var img = new Image();
            img.addEventListener("load", function () {
              resolve(true);
            });
            img.addEventListener("error", function () {
              resolve(false);
            });
            img.src = src;
            if (img.complete) resolve(true);
          }));
        case 1:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _isImage.apply(this, arguments);
}

/***/ }),

/***/ "./ui/templateData.ts":
/*!****************************!*\
  !*** ./ui/templateData.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   templateData: () => (/* binding */ templateData)
/* harmony export */ });
var templateData = {
  params: {
    lang: {
      label: {
        de: "Sprache der Vorlage",
        en: "Template language",
        "zh-hans": "模板语言"
      },
      type: "string",
      description: {
        de: "Sprache, in der die Texte der Vorlage angezeigt werden"
      },
      example: {
        de: "de",
        en: "en"
      }
    },
    name: {
      label: {
        en: "Name",
        de: "Name",
        "zh-hans": "名称"
      },
      description: {
        en: "Official name, otherwise most common one",
        de: "Offizieller Name, ansonsten der verbreitetste"
      },
      type: "string",
      required: true,
      autovalue: "{{subst:PAGENAME}}"
    },
    status: {
      description: "Current status of the project.",
      label: "Status",
      suggestedvalues: ["active", "unmaintained", "broken", "unfinished"],
      type: "string",
      "default": "active",
      suggested: true
    },
    license: {
      description: "What free license or proprietary?",
      example: "GPL",
      label: {
        en: "License",
        de: "Lizenz"
      },
      suggestedvalues: ["GPL", "BSD", "MIT", "free", "proprietary", "AGPL"]
    },
    price: {
      description: "Costs if proprietary. If price is empty, application is for free.",
      example: "free;20$;35€;in-app purchases",
      label: {
        en: "Price",
        de: "Preis"
      },
      type: "string",
      suggestedvalues: ["free", "in-app purchases"]
    },
    web: {
      label: "Web address",
      example: "https://www.example.org",
      suggested: true,
      type: "url"
    },
    repo: {
      label: {
        de: "Quellcode",
        en: "Source code",
        "zh-hans": "源代码"
      },
      aliases: ["git", "svn"],
      description: "URL to view or download the source code (for example, a Git, Subversion, or CVS repository)",
      example: "https://git.example.org",
      type: "url"
    },
    logo: {
      label: "Logo",
      example: "xyz.png",
      type: "wiki-file-name"
    },
    screenshot: {
      label: {
        de: "Bildschirmfoto",
        en: "Screenshot",
        "zh-hans": "截图"
      },
      suggested: true,
      type: "wiki-file-name",
      example: "xyz.jpg"
    },
    description: {
      label: {
        de: "Beschreibung",
        en: "Description",
        "zh-hans": "描述"
      },
      type: "string",
      suggested: true,
      description: "Brief description. What distinguishes this from other tools? (Write your own description, don't just copy it from the website)",
      example: "Easy to use, nice UI"
    },
    author: {
      label: {
        de: "Autor",
        en: "Author",
        "zh-hans": "作者"
      },
      description: {
        de: "Name des Autors/der Autorin oder ein Link zu dessen/deren OSM-Wiki-Benutzerseite",
        en: "Name of the author or a link to their OSM-wiki user page"
      },
      type: "string",
      suggested: true
    },
    platform: {
      description: "List of platforms it runs on.",
      suggested: true,
      type: "string",
      suggestedvalues: ["Linux", "Android", "Firefox OS", "Maemo", "MeeGo", "Openmoko Linux", "Tizen", "WebOS", "iOS", "iPhone", "iPad", "iPod touch", "macOS", "Unix", "Bada OS", "BSD", "FreeBSD", "Amiga OS", "MorphOS", "ArOS", "Windows", "Windows XP", "Windows 2000", "Windows Vista", "Windows 7", "Windows 8", "Windows 8.1", "Windows 10", "Windows CE", "Windows Mobile", "Windows Mobile 5", "Windows Mobile 6", "Windows Mobile 2000", "Windows Mobile 2003", "Pocket PC", "Windows Phone", "BlackBerry OS", "Brew", "Palm OS", "Symbian", "Cross-platform", "Java", "Java ME", "Java SE", "Node.js", "Qt", "React Native", "Unity", "Web"],
      example: "Android;iOS",
      label: {
        en: "Supported platforms",
        de: "Plattform"
      }
    },
    genre: {
      description: "Main category for this tool.",
      suggested: true,
      label: "Genre",
      suggestedvalues: ["display", "navi", "logger", "router", "editor", "renderer", "converter", "analyser"]
    },
    languages: {
      description: "Supported languages (list of valid language codes separated by semicolons) or number of languages supported",
      example: "DE;EN;MUL",
      type: "string",
      suggestedvalues: ["aa", "ab", "af", "ak", "als", "am", "an", "ang", "ar", "arc", "as", "ast", "av", "awa", "ay", "az", "ba", "bar", "bat-smg", "bcl", "be", "be-x-old", "bg", "bh", "bi", "bm", "bn", "bo", "bpy", "br", "bs", "bug", "bxr", "ca", "cdo", "ce", "ceb", "ch", "cho", "chr", "chy", "closed-zh-tw", "co", "cr", "cs", "csb", "cu", "cv", "cy", "da", "de", "diq", "dsb", "dv", "dz", "ee", "el", "en", "eo", "es", "et", "eu", "ext", "fa", "ff", "fi", "fiu-vro", "fj", "fo", "fr", "frp", "fur", "fy", "ga", "gan", "gbm", "gcf", "gd", "gil", "gl", "gn", "got", "gu", "gv", "ha", "hak", "haw", "he", "hi", "ho", "hr", "ht", "hu", "hy", "hz", "ia", "id", "ie", "ig", "ii", "ik", "ilo", "inh", "io", "is", "it", "iu", "ja", "jbo", "jv", "ka", "kg", "khw", "ki", "kj", "kk", "kl", "km", "kn", "ko", "kr", "ks", "ksh", "ku", "kv", "kw", "ky", "la", "lad", "lan", "lb", "lg", "li", "lij", "lmo", "ln", "lo", "lt", "lv", "lzz", "man", "map-bms", "mg", "mh", "mi", "min", "mk", "ml", "mn", "mo", "mr", "mrh", "ms", "mt", "mul", "mus", "mwl", "my", "na", "nah", "nap", "nb", "nd", "nds", "nds-nl", "ne", "new", "ng", "nl", "nn", "no", "nr", "nrm", "nso", "nv", "ny", "oc", "oj", "om", "or", "os", "pa", "pag", "pam", "pap", "pdc", "pi", "pih", "pl", "pms", "ps", "pt", "qu", "rm", "rmy", "rn", "ro", "roa-rup", "ru", "rw", "sa", "sc", "scn", "sco", "sd", "se", "sg", "sh", "si", "simple", "sk", "sl", "sm", "sn", "so", "sq", "sr-latn", "sr", "ss", "st", "su", "sv", "sw", "ta", "te", "tet", "tg", "th", "ti", "tk", "tl", "tlh", "tn", "to", "tokipona", "tpi", "tr", "ts", "tt", "tum", "tw", "ty", "tzm", "udm", "ug", "uk", "ur", "uz", "ve", "vec", "vi", "vls", "vo", "wa", "war", "wo", "xal", "xh", "xmf", "yi", "yo", "yue", "za", "zh", "zh-classical", "zh-hans", "zh-hant", "zh-min-nan", "zh-tw", "zh-yue", "zu"],
      label: {
        en: "Languages",
        de: "Sprachen"
      }
    },
    coverage: {
      description: 'Coverage or target region of the app. Formatting: "Continent, Country, Region, ...". Use "Worldwide" or leave it empty for global use.',
      example: "Europe, Switzerland, Zurich, Gossau",
      label: "Coverage",
      "default": "Worldwide",
      type: "string"
    },
    languagesurl: {
      description: "Link to the actual full list of languages supported, described on another page (e.g. a portal page for the software, or a repository).",
      label: "Languages URL",
      type: "url"
    },
    code: {
      description: "List of programming languages used.",
      type: "string",
      suggestedvalues: ["C", "Objective-C", "Objective-C++", "C++", "C#", "Visual Basic .NET", "Pascal", "Java", "JavaScript", "ActionScript", "HTML", "CSS", "Perl", "PHP", "Python", "Ruby", "Lua", "SQL", "Swift", "TypeScript", ".NET", "Node.js"],
      label: {
        en: "Code",
        de: "Code"
      }
    },
    framework: {
      description: "List of frameworks used.",
      example: "GTK+;mono;J2ME;OpenGL",
      suggestedvalues: ["GTK+", "mono", "J2ME", "OpenGL"],
      label: {
        en: "Framework",
        de: "Framework"
      }
    },
    version: {
      label: {
        en: "Version",
        "zh-hans": "版本",
        de: "Version"
      },
      description: "Latest version",
      example: "1.0",
      type: "string"
    },
    date: {
      label: {
        en: "Release date",
        "zh-hans": "日期"
      },
      description: "Latest release date",
      example: "2010-12-24",
      type: "date"
    },
    asin: {
      description: "Amazon Standard Identification Number for the Amazon Appstore for Android",
      example: "XXXXXXXXXX",
      label: "Amazon Identification",
      type: "string"
    },
    bbWorldID: {
      description: "BlackBerry World application ID",
      label: "BlackBerry ID",
      deprecated: true,
      example: "XXX",
      type: "string"
    },
    fDroidID: {
      description: "F-Droid application ID",
      label: "F-Droid ID",
      example: "org.example",
      type: "string"
    },
    firefoxMarketplaceID: {
      description: "Mozilla Firefox Marketplace application ID",
      label: "Firefox Marketplace ID",
      deprecated: true,
      type: "string"
    },
    googlePlayID: {
      description: "Google Play Store application ID",
      label: "Google Play ID",
      example: "org.example",
      type: "string"
    },
    huaweiAppGalleryID: {
      description: "Huawei AppGallery application ID",
      example: "CXXXXXXXXX",
      type: "string"
    },
    appleStoreID: {
      description: "iTunes App Store application ID",
      label: "AppStore ID",
      example: "id12344556",
      type: "string"
    },
    macAppStoreID: {
      description: "Mac App Store application ID",
      label: "Mac AppStore ID",
      example: "id12344556",
      type: "string"
    },
    microsoftAppID: {
      description: "Microsoft Store Windows application UUID",
      label: "Microsoft ID",
      example: "XXXXXXXXXXXX",
      type: "string"
    },
    map: {
      description: "[Map display] Can it show a map?",
      label: {
        en: "Display map",
        de: "Karte anzeigen"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    mapData: {
      description: '[Map display] Maps drawn using pre-calculated/rasterized images (raster) or "on the fly" (vector)?',
      label: "Map data",
      type: "string",
      suggestedvalues: ["raster", "vector"]
    },
    datasource: {
      description: "[Map display] Can you store all map data offline? Download a separate file?",
      label: "Source",
      example: "online;cache",
      type: "string",
      suggestedvalues: ["online", "cache", "offline"]
    },
    rotateMap: {
      description: "[Map display] Does it turn the map in driving/walking direction?",
      label: {
        en: "Rotate map",
        de: "Karte drehen"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    "3D": {
      description: "[Map display] Is there some 3D or 2.5D view?",
      type: "string",
      suggestedvalues: ["yes", "no"],
      label: {
        en: "3D view",
        de: "3D-Ansicht"
      }
    },
    showWebsite: {
      description: "[POI Information] Shows link to the website from POI",
      label: "Shows website",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showPhoneNumber: {
      description: "[POI Information] Shows phone number from POI",
      label: "Shows phone number",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showOpeningHours: {
      description: "[POI Information] Shows hours of operation from POI",
      label: "Shows operation hours",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    routing: {
      description: {
        en: "[Routing] Can you calculate or otherwise plan a route?",
        de: "Funktionen: Können Sie eine Route berechnen oder sonst wie planen?"
      },
      label: "Routing",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    createRouteManually: {
      description: "[Routing]",
      label: {
        en: "Create route manually",
        de: "Route von Hand eingeben"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    calculateRoute: {
      description: "[Routing] Can it calculate a route using routing?",
      label: {
        en: "Calculate route",
        de: "Route berechnen"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    createRouteViaWaypoints: {
      description: "[Routing] Able to calculate route via Waypoints",
      label: {
        en: "Create route via Waypoints"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    profiles: {
      description: "[Routing] What profiles supported if it makes routing?",
      label: "Routing profiles",
      example: "car;bike;foot;wheelchair",
      type: "string",
      suggestedvalues: ["car", "bike", "foot", "wheelchair"]
    },
    turnRestrictions: {
      description: "[Routing] Can it deal with turn restrictions?",
      label: {
        en: "Turn restrictions",
        de: "Abbiegebeschränkungen"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    calculateRouteOffline: {
      description: "[Routing] Does it need internet to calculate a route?",
      label: {
        en: "Calculate route without Internet (Offline routing)",
        de: "Route berechnen ohne Internet"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    routingProviders: {
      description: "[Routing] What routing service(s) does it use?",
      label: "Routing providers",
      example: "OpenRouteService;Yours",
      type: "string",
      suggestedvalues: ["OpenRouteService", "Yours", "CloudMade", "MapQuest", "Graphhopper", "OSRM", "Valhalla"]
    },
    avoidTraffic: {
      description: "[Routing] Does app optimize route to avoid traffic jams?",
      label: "Avoid traffic",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    trafficProvider: {
      description: "[Routing] Traffic data source provider.",
      label: "Traffic Provider"
    },
    navigating: {
      description: "[Navigation] Can you navigate in a compass like way?",
      label: {
        en: "Navigate",
        de: "Navigieren"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    findLocation: {
      description: "[Navigation] Can it search for a street/place?",
      label: {
        en: "Find location",
        de: "Finde eine Position"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    findNearbyPOI: {
      description: "[Navigation] Can it discover/display Points of interests?",
      label: {
        en: "Find nearby POIs",
        de: "Finde POI in der Nähe"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    navToPoint: {
      description: "[Navigation] Can it guide you to a point somewhere?",
      label: {
        en: "Navigate to point",
        de: "Navigiere zu einem Punkt"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    voice: {
      description: "[Navigation] Can it give you commands with a computer voice?",
      label: {
        en: "Navigation with voice / Voice guidance",
        de: "Navigation mit Sprachansage"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    keepOnRoad: {
      description: "[Navigation] Can it assist you to keep your vehicle on the calculated route?",
      label: "Keep on road",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    turnLanes: {
      description: "[Navigation] Does it support lane guidance?",
      label: "Lane guidance",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    withoutGPS: {
      description: "[Navigation] Does it work even without a GPS?",
      label: {
        en: "Works without GPS",
        de: "Funktioniert ohne GPS"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    predefinedRoute: {
      description: "[Navigation] Can it follow other GPS tracks?",
      label: {
        en: "Navigate along predefined route",
        de: "Folge einer vordefinierten Route"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    tracking: {
      description: "[Track logging] Can it record a GPS track?",
      type: "string",
      suggestedvalues: ["yes", "no"],
      label: {
        en: "Make track",
        de: "Track aufzeichnen"
      }
    },
    customInterval: {
      description: "[Track logging] Can you tune the interval manually?",
      label: {
        en: "Customizable log interval",
        de: "Einstellbares Aufzeichnungsintervall"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    trackFormats: {
      description: "[Track logging] What formats for storage can you save your GPS track?",
      example: "gpx;csv",
      aliases: ["formats"],
      label: {
        en: "Track formats"
      },
      type: "string",
      suggestedvalues: ["gpx", "kml", "nmea", "csv", "trk"]
    },
    geotagging: {
      description: "[Track logging] Are further mapping techniques supported",
      label: "Geotagging",
      example: "note;photo",
      type: "string",
      suggestedvalues: ["note", "photo", "audio"]
    },
    fastWayPointAdding: {
      description: "[Track logging] Easy to add a new Waypoint?",
      label: {
        en: "Fast POI buttons",
        de: "Knöpfe zum schnellen Setzen von Wegpunkten"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    uploadGPX: {
      description: "[Track logging] Can it send tracks directly to OSM?",
      type: "string",
      suggestedvalues: ["yes", "no"],
      label: "Upload GPX to OSM"
    },
    monitoring: {
      description: "[Track monitoring] Can you monitor GPS datas?",
      label: {
        en: "Monitoring",
        de: "Monitoring"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showTrack: {
      description: "[Track monitoring] Show your current track?",
      label: {
        en: "Show current track",
        de: "Zeige aktuellen Track"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showExistingTrack: {
      description: "[Track monitoring] Can it load existing tracks so you can follow them?",
      label: {
        en: "Open existing track",
        de: "Öffne existierenden Track"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showAltitudeDiagram: {
      description: "[Track monitoring]",
      label: {
        en: "Altitude diagram",
        de: "Höhendiagramm"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showDOP: {
      description: "[Track monitoring] Shows signal quality?",
      label: {
        en: "Show POD value",
        de: "Zeige DOP-Wert"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showSatellites: {
      description: "[Track monitoring] Displays satellites?",
      label: {
        en: "Satellite view",
        de: "Zeige Satelliten"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showNMEAlive: {
      description: "[Track monitoring] Can you see the raw GPS stream?",
      label: {
        en: "Show live NMEA data",
        de: "Zeige NMEA-Livedaten"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    showSpeed: {
      description: "[Track monitoring]",
      label: "Show speed",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    sendPosition: {
      description: "[Track monitoring] Can it send position to others?",
      example: "yes;mail;www",
      label: {
        en: "Send current position",
        de: "Sende aktuelle Position"
      },
      type: "string",
      suggestedvalues: ["yes", "no", "sms", "mail", "www"]
    },
    addPOI: {
      description: "[Editor] Can you add a node?",
      label: {
        en: "Add POIs",
        de: "POI hinzufügen"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    editPOI: {
      description: "[Editor] Can you edit a node?",
      label: {
        en: "Edit / Delete POIs",
        de: "POI bearbeiten/löschen"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    addWay: {
      description: "[Editor] Can you add a way?",
      label: "Add way",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    editGeom: {
      description: "[Editor] Can you edit nodes/ways?",
      label: {
        en: "Edit geometries",
        de: "Geometrie bearbeiten"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    editTags: {
      description: "[Editor] Can you edit existing tags?",
      label: {
        en: "Edit arbitrary tags of existing OSM objects",
        de: "Beliebige Tags an vorhandenen OSM-Objekten bearbeiten"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    editRelations: {
      description: "[Editor] Can you edit relations?",
      label: "Edit relations",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    viewNotes: {
      description: "[Editor] Can you view OSM Notes?",
      label: "View notes",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    createNotes: {
      description: "[Editor] Can you add OSM Notes?",
      label: "Create notes",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    editNotes: {
      description: "[Editor] Can you comment/close OSM Notes?",
      label: "Edit notes",
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    editSource: {
      description: "[Editor] Can you work offline?",
      label: "Work offline",
      example: "online;cache",
      type: "string",
      suggestedvalues: ["online", "cache", "offline"]
    },
    offsetDBsupport: {
      description: "[Editor] Does it support the imagery offset DB?",
      label: {
        en: "Support imagery offset DB",
        de: "Unterstützt Luftbildversatz DB"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    uploadOSMData: {
      description: "[Editor] Can you send changes to OSM directly?",
      label: {
        en: "Upload to OSM",
        de: "Zu OSM hochladen"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    rendererOutputFormats: {
      description: "[Renderer] Supported output formats.",
      example: "svg;pdf;png",
      label: "Renderer output formats"
    },
    accessibility: {
      description: "[Accessibility] Does it help disabled people in some kind?",
      example: "blind;wheelchair",
      label: "Accessibility support",
      type: "string",
      suggestedvalues: ["blind", "wheelchair"]
    },
    textOnlyUI: {
      description: "[Accessibility] Text to braille compatible interface?",
      label: {
        en: "Complete non graphics text output",
        de: "Komplett ohne Grafik bedienbar"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    brailleUI: {
      description: "[Accessibility] A special braille interface?",
      label: {
        en: "Braille interface",
        de: "Braille-Oberfläche"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    explorerMode: {
      description: "[Accessibility] Has a exploration modus (tell all objects approaching)?",
      label: {
        en: "Exploration modus",
        de: "Erkundungsmodus"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    publicTransportMode: {
      description: "[Accessibility] Supports routing with public transport?",
      label: {
        en: "Public Transport mode",
        de: "ÖPNV-Modus"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    dangerWarnings: {
      description: "[Accessibility]",
      label: {
        en: "Danger Warnings",
        de: "Gefahrenwarnungen"
      },
      type: "string",
      suggestedvalues: ["yes", "no"]
    },
    screenReader: {
      description: "[Accessibility] List of supported screenreaders",
      example: "NVDA",
      label: {
        en: "Screenreader",
        de: "Screenreader"
      }
    },
    screenReaderLang: {
      description: "[Accessibility] List of supported screenreaders languages",
      example: "EN;DE",
      label: {
        en: "Screenreader languages",
        de: "Screenreader-Sprachen"
      }
    }
  },
  paramOrder: ["lang", "name", "status", "license", "price", "web", "repo", "logo", "screenshot", "description", "author", "platform", "genre", "languages", "languagesurl", "code", "framework", "version", "date",
  // Install options
  "asin", "bbWorldID", "fDroidID", "firefoxMarketplaceID", "googlePlayID", "huaweiAppGalleryID", "appleStoreID", "macAppStoreID", "microsoftAppID",
  // Map
  "map", "mapData", "datasource", "rotateMap", "3D", "showWebsite", "showPhoneNumber", "showOpeningHours",
  // Routing
  "routing", "createRouteManually", "calculateRoute", "createRouteViaWaypoints", "profiles", "turnRestrictions", "calculateRouteOffline", "routingProviders", "avoidTraffic", "trafficProvider",
  // Navigating
  "navigating", "findLocation", "findNearbyPOI", "navToPoint", "voice", "keepOnRoad", "turnLanes", "withoutGPS", "predefinedRoute",
  // Tracking
  "tracking", "customInterval", "trackFormats", "geotagging", "fastWayPointAdding", "uploadGPX",
  // Monitoring
  "monitoring", "showTrack", "showExistingTrack", "showAltitudeDiagram", "showDOP", "showSatellites", "showNMEAlive", "showSpeed", "sendPosition",
  // Editing
  "addPOI", "editPOI", "addWay", "editGeom", "editTags", "editRelations", "viewNotes", "createNotes", "editNotes", "editSource", "offsetDBsupport", "uploadOSMData",
  // Rendering
  "rendererOutputFormats",
  // Accessibility
  "accessibility", "textOnlyUI", "brailleUI", "explorerMode", "publicTransportMode", "dangerWarnings", "screenReader", "screenReaderLang"],
  format: "block",
  description: "This template collects all notes of a software together. Some common information is displayed as an infobox."
};

/***/ }),

/***/ "./ui/utilities/array.ts":
/*!*******************************!*\
  !*** ./ui/utilities/array.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   includes: () => (/* binding */ includes),
/* harmony export */   removeDuplicates: () => (/* binding */ removeDuplicates),
/* harmony export */   shuffle: () => (/* binding */ shuffle),
/* harmony export */   some: () => (/* binding */ some)
/* harmony export */ });
// Copyright (C) 2020 Markus Peloso
// 
// This file is part of OSM Apps Catalog.
// 
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

function includes(arr, target) {
  return target.every(function (v) {
    return arr.includes(v);
  });
}
function some(arr, target) {
  return target.some(function (v) {
    return arr.includes(v);
  });
}
function removeDuplicates(arr) {
  return arr.filter(function (c, index) {
    return arr.indexOf(c) === index;
  });
}
function shuffle(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var _ref = [array[j], array[i]];
    array[i] = _ref[0];
    array[j] = _ref[1];
  }
}

/***/ }),

/***/ "./ui/utilities/coloriz/Color.ts":
/*!***************************************!*\
  !*** ./ui/utilities/coloriz/Color.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "../node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "../node_modules/@babel/runtime/helpers/esm/createClass.js");


// Copyright (C) 2020 Markus Peloso
//
// This file is part of osm-app-component.
//
// osm-app-component is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// osm-app-component is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with osm-app-component.  If not, see <http://www.gnu.org/licenses/>.

function hexToRgb(hex) {
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function (_m, r, g, b) {
    return r + r + g + g + b + b;
  });
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  if (!result) throw "hex has a unexpected format.";
  return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
}
var Color = /*#__PURE__*/function () {
  function Color(r, g, b) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Color);
    this.r = r;
    this.g = g;
    this.b = b;
    this.set(r, g, b);
  }
  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Color, [{
    key: "toString",
    value: function toString() {
      return "rgb(".concat(Math.round(this.r), ", ").concat(Math.round(this.g), ", ").concat(Math.round(this.b), ")");
    }
  }, {
    key: "set",
    value: function set(r, g, b) {
      this.r = this.clamp(r);
      this.g = this.clamp(g);
      this.b = this.clamp(b);
    }
  }, {
    key: "hueRotate",
    value: function hueRotate() {
      var angle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      angle = angle / 180 * Math.PI;
      var sin = Math.sin(angle);
      var cos = Math.cos(angle);
      this.multiply([0.213 + cos * 0.787 - sin * 0.213, 0.715 - cos * 0.715 - sin * 0.715, 0.072 - cos * 0.072 + sin * 0.928, 0.213 - cos * 0.213 + sin * 0.143, 0.715 + cos * 0.285 + sin * 0.14, 0.072 - cos * 0.072 - sin * 0.283, 0.213 - cos * 0.213 - sin * 0.787, 0.715 - cos * 0.715 + sin * 0.715, 0.072 + cos * 0.928 + sin * 0.072]);
    }
  }, {
    key: "grayscale",
    value: function grayscale() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.multiply([0.2126 + 0.7874 * (1 - value), 0.7152 - 0.7152 * (1 - value), 0.0722 - 0.0722 * (1 - value), 0.2126 - 0.2126 * (1 - value), 0.7152 + 0.2848 * (1 - value), 0.0722 - 0.0722 * (1 - value), 0.2126 - 0.2126 * (1 - value), 0.7152 - 0.7152 * (1 - value), 0.0722 + 0.9278 * (1 - value)]);
    }
  }, {
    key: "sepia",
    value: function sepia() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.multiply([0.393 + 0.607 * (1 - value), 0.769 - 0.769 * (1 - value), 0.189 - 0.189 * (1 - value), 0.349 - 0.349 * (1 - value), 0.686 + 0.314 * (1 - value), 0.168 - 0.168 * (1 - value), 0.272 - 0.272 * (1 - value), 0.534 - 0.534 * (1 - value), 0.131 + 0.869 * (1 - value)]);
    }
  }, {
    key: "saturate",
    value: function saturate() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.multiply([0.213 + 0.787 * value, 0.715 - 0.715 * value, 0.072 - 0.072 * value, 0.213 - 0.213 * value, 0.715 + 0.285 * value, 0.072 - 0.072 * value, 0.213 - 0.213 * value, 0.715 - 0.715 * value, 0.072 + 0.928 * value]);
    }
  }, {
    key: "multiply",
    value: function multiply(matrix) {
      var newR = this.clamp(this.r * matrix[0] + this.g * matrix[1] + this.b * matrix[2]);
      var newG = this.clamp(this.r * matrix[3] + this.g * matrix[4] + this.b * matrix[5]);
      var newB = this.clamp(this.r * matrix[6] + this.g * matrix[7] + this.b * matrix[8]);
      this.r = newR;
      this.g = newG;
      this.b = newB;
    }
  }, {
    key: "brightness",
    value: function brightness() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.linear(value);
    }
  }, {
    key: "contrast",
    value: function contrast() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.linear(value, -(0.5 * value) + 0.5);
    }
  }, {
    key: "linear",
    value: function linear() {
      var slope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var intercept = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.r = this.clamp(this.r * slope + intercept * 255);
      this.g = this.clamp(this.g * slope + intercept * 255);
      this.b = this.clamp(this.b * slope + intercept * 255);
    }
  }, {
    key: "invert",
    value: function invert() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.r = this.clamp((value + this.r / 255 * (1 - 2 * value)) * 255);
      this.g = this.clamp((value + this.g / 255 * (1 - 2 * value)) * 255);
      this.b = this.clamp((value + this.b / 255 * (1 - 2 * value)) * 255);
    }
  }, {
    key: "hsl",
    value: function hsl() {
      // Code taken from https://stackoverflow.com/a/9493060/2688027, licensed under CC BY-SA.
      var r = this.r / 255;
      var g = this.g / 255;
      var b = this.b / 255;
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h = 0;
      var s = 0;
      var l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
            break;
        }
        h /= 6;
      }
      return {
        h: h * 100,
        s: s * 100,
        l: l * 100
      };
    }
  }, {
    key: "clamp",
    value: function clamp(value) {
      if (value > 255) {
        value = 255;
      } else if (value < 0) {
        value = 0;
      }
      return value;
    }
  }]);
  return Color;
}();

/***/ }),

/***/ "./ui/utilities/coloriz/Solver.ts":
/*!****************************************!*\
  !*** ./ui/utilities/coloriz/Solver.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Solver: () => (/* binding */ Solver)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "../node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "../node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "../node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Color */ "./ui/utilities/coloriz/Color.ts");



// Copyright (C) 2020 Markus Peloso
//
// This file is part of osm-app-component.
//
// osm-app-component is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// osm-app-component is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with osm-app-component.  If not, see <http://www.gnu.org/licenses/>.


var Solver = /*#__PURE__*/function () {
  function Solver(target) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Solver);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "target", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "targetHSL", void 0);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "reusedColor", void 0);
    this.target = target;
    this.targetHSL = target.hsl();
    this.reusedColor = new _Color__WEBPACK_IMPORTED_MODULE_3__.Color(0, 0, 0);
  }
  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Solver, [{
    key: "solve",
    value: function solve() {
      var result = this.solveNarrow(this.solveWide());
      return {
        values: result.values,
        loss: result.loss,
        filter: this.css(result.values)
      };
    }
  }, {
    key: "solveWide",
    value: function solveWide() {
      var A = 5;
      var c = 15;
      var a = [60, 180, 18000, 600, 1.2, 1.2];
      var best = {
        loss: Infinity,
        values: []
      };
      for (var i = 0; best.loss > 25 && i < 3; i++) {
        var initial = [50, 20, 3750, 50, 100, 100];
        var result = this.spsa(A, a, c, initial, 1000);
        if (result.loss < best.loss) {
          best = result;
        }
      }
      return best;
    }
  }, {
    key: "solveNarrow",
    value: function solveNarrow(wide) {
      var A = wide.loss;
      var c = 2;
      var A1 = A + 1;
      var a = [0.25 * A1, 0.25 * A1, A1, 0.25 * A1, 0.2 * A1, 0.2 * A1];
      return this.spsa(A, a, c, wide.values, 500);
    }
  }, {
    key: "spsa",
    value: function spsa(A, a, c, values, iters) {
      var alpha = 1;
      var gamma = 0.16666666666666666;
      var best = [];
      var bestLoss = Infinity;
      var deltas = new Array(6);
      var highArgs = new Array(6);
      var lowArgs = new Array(6);
      for (var k = 0; k < iters; k++) {
        var ck = c / Math.pow(k + 1, gamma);
        for (var i = 0; i < 6; i++) {
          deltas[i] = Math.random() > 0.5 ? 1 : -1;
          highArgs[i] = values[i] + ck * deltas[i];
          lowArgs[i] = values[i] - ck * deltas[i];
        }
        var lossDiff = this.loss(highArgs) - this.loss(lowArgs);
        for (var _i = 0; _i < 6; _i++) {
          var g = lossDiff / (2 * ck) * deltas[_i];
          var ak = a[_i] / Math.pow(A + k + 1, alpha);
          values[_i] = fix(values[_i] - ak * g, _i);
        }
        var loss = this.loss(values);
        if (loss < bestLoss) {
          best = values.slice(0);
          bestLoss = loss;
        }
      }
      return {
        values: best,
        loss: bestLoss
      };
      function fix(value, idx) {
        var max = 100;
        if (idx === 2 /* saturate */) {
          max = 7500;
        } else if (idx === 4 /* brightness */ || idx === 5 /* contrast */) {
          max = 200;
        }
        if (idx === 3 /* hue-rotate */) {
          if (value > max) {
            value %= max;
          } else if (value < 0) {
            value = max + value % max;
          }
        } else if (value < 0) {
          value = 0;
        } else if (value > max) {
          value = max;
        }
        return value;
      }
    }
  }, {
    key: "loss",
    value: function loss(filters) {
      // Argument is array of percentages.
      var color = this.reusedColor;
      color.set(0, 0, 0);
      color.invert(filters[0] / 100);
      color.sepia(filters[1] / 100);
      color.saturate(filters[2] / 100);
      color.hueRotate(filters[3] * 3.6);
      color.brightness(filters[4] / 100);
      color.contrast(filters[5] / 100);
      var colorHSL = color.hsl();
      return Math.abs(color.r - this.target.r) + Math.abs(color.g - this.target.g) + Math.abs(color.b - this.target.b) + Math.abs(colorHSL.h - this.targetHSL.h) + Math.abs(colorHSL.s - this.targetHSL.s) + Math.abs(colorHSL.l - this.targetHSL.l);
    }
  }, {
    key: "css",
    value: function css(filters) {
      function fmt(idx) {
        var multiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        return Math.round(filters[idx] * multiplier);
      }
      return "filter: invert(".concat(fmt(0), "%) sepia(").concat(fmt(1), "%) saturate(").concat(fmt(2), "%) hue-rotate(").concat(fmt(3, 3.6), "deg) brightness(").concat(fmt(4), "%) contrast(").concat(fmt(5), "%);");
    }
  }]);
  return Solver;
}();

/***/ }),

/***/ "./ui/utilities/debounce.ts":
/*!**********************************!*\
  !*** ./ui/utilities/debounce.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debounce: () => (/* binding */ debounce)
/* harmony export */ });
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

function debounce(func, wait, immediate) {
  // 'private' variable for instance
  // The returned function will be able to reference this due to closure.
  // Each call to the returned function will share this common timer.
  var timeout;

  // Calling debounce returns a new anonymous function
  return function () {
    // reference the context and args for the setTimeout function
    var context = this,
      args = arguments;

    // Should the function be called now? If immediate is true
    //   and not already in a timeout then the answer is: Yes
    var callNow = immediate && !timeout;

    // This is the basic debounce behaviour where you can call this
    //   function several times, but it will only execute once
    //   (before or after imposing a delay).
    //   Each time the returned function is called, the timer starts over.
    clearTimeout(timeout);

    // Set the new timeout
    timeout = setTimeout(function () {
      // Inside the timeout function, clear the timeout variable
      // which will let the next execution run when in 'immediate' mode
      timeout = undefined;

      // Check if the function already ran with the immediate flag
      if (!immediate) {
        // Call the original function with apply
        // apply lets you define the 'this' object as well as the arguments
        //    (both captured before setTimeout)
        func.apply(context, args);
      }
    }, wait);

    // Immediate mode and no wait timer? Execute the function...
    if (callNow) func.apply(context, args);
  };
}

/***/ }),

/***/ "./ui/utilities/filter.ts":
/*!********************************!*\
  !*** ./ui/utilities/filter.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   edit: () => (/* binding */ edit),
/* harmony export */   mobile: () => (/* binding */ mobile),
/* harmony export */   navigation: () => (/* binding */ navigation)
/* harmony export */ });
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

var mobilePlatforms = ["ANDROID", "GARMIN", "KINDLE", "MAEMO", "MEEGO", "PALM OS", "SYMBIAN", "UBUNTU PHONE", "UBUNTU TOUCH", "WEBOS", "WINDOWS MOBILE", "WINDOWS PHONE", "IOS", "ZAURUS"];
function mobile(a) {
  return a.topics.map(function (t) {
    return t.toUpperCase();
  }).some(function (t) {
    return ["OFFLINE", "CACHE"].includes(t);
  }) || a.platform.map(function (t) {
    return t.toUpperCase();
  }).some(function (t) {
    return mobilePlatforms.includes(t);
  }) || a.install.asin || a.install.fDroidID || a.install.googlePlayID || a.install.huaweiAppGalleryID || a.install.appleStoreID;
}
function navigation(a) {
  return a.topics.map(function (t) {
    return t.toUpperCase();
  }).some(function (t) {
    return ["NAVI", "ROUTING", "ROUTER", "ROUTING", "ROUTING TOOL"].includes(t);
  });
}
function edit(a) {
  return a.topics.map(function (t) {
    return t.toUpperCase();
  }).some(function (t) {
    return ["ADD POIS", "EDIT", "EDITING", "EDITOR", "EDITOR SOFTWARE", "ANALYSE", "ANALYSER", "ANALYSIS", "TRACK RECORDING", "TRACKER", "TRACKING", "VALIDATOR", "OSM TOOL", "QA", "QUALITY CONTROL", "NOTES", "COMPARING TOOL", "HASHTAG TOOL", "MONITORING TOOL", "CHANGESET REVIEW TOOL"].includes(t);
  });
}

/***/ }),

/***/ "./ui/utilities/html.ts":
/*!******************************!*\
  !*** ./ui/utilities/html.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createElement: () => (/* binding */ createElement),
/* harmony export */   getHtmlElement: () => (/* binding */ getHtmlElement),
/* harmony export */   getHtmlElements: () => (/* binding */ getHtmlElements)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");

// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

function getHtmlElement(selectors) {
  var contentElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
  var element = contentElement.querySelector(selectors);
  if (!element) throw "Element ".concat(selectors, " not found.");
  return element;
}
function getHtmlElements(selectors) {
  var contentElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
  var elements = [];
  contentElement.querySelectorAll(selectors).forEach(function (v) {
    elements.push(v);
  });
  return elements;
}
function createElement(tag) {
  var _element$classList;
  var innerHTML = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  var classNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var element = document.createElement(tag);
  element.innerHTML = innerHTML;
  (_element$classList = element.classList).add.apply(_element$classList, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(classNames.filter(function (c) {
    return c;
  })));
  return element;
}

/***/ }),

/***/ "./ui/utilities/jsonRequest.ts":
/*!*************************************!*\
  !*** ./ui/utilities/jsonRequest.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getJson: () => (/* binding */ getJson)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "../node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url */ "./ui/utilities/url.ts");


// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.


function getJson(_x, _x2) {
  return _getJson.apply(this, arguments);
}
function _getJson() {
  _getJson = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(url, params) {
    var response;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return fetch("".concat(url, "?").concat((0,_url__WEBPACK_IMPORTED_MODULE_2__.utilQsString)(params)), {
            headers: {
              Accept: "application/json, text/plain, */*",
              "Content-Type": "application/json"
            }
          });
        case 2:
          response = _context.sent;
          _context.next = 5;
          return response.json();
        case 5:
          return _context.abrupt("return", _context.sent);
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getJson.apply(this, arguments);
}

/***/ }),

/***/ "./ui/utilities/renderImage.ts":
/*!*************************************!*\
  !*** ./ui/utilities/renderImage.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderImage: () => (/* binding */ renderImage)
/* harmony export */ });
function renderImage(obj) {
  var defaultImage = "https://wiki.openstreetmap.org/w/images/thumb/c/ca/Map-14.svg/140px-Map-14.svg.png";
  if (obj.images.length > 0) {
    return "<img class=\"img\" src=\"".concat(defaultImage, "\" dynamic-src=\"").concat(obj.images.join(" "), " ").concat(defaultImage, "\"/>");
  } else {
    return "<img class=\"img\" style=\"".concat(obj.filter, "\" src=\"").concat(defaultImage, "\"/>");
  }
}

/***/ }),

/***/ "./ui/utilities/storage.ts":
/*!*********************************!*\
  !*** ./ui/utilities/storage.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   get: () => (/* binding */ get),
/* harmony export */   set: () => (/* binding */ set)
/* harmony export */ });
// Copyright (C) 2020 Markus Peloso
// 
// This file is part of OSM Apps Catalog.
// 
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

function set(key, value) {
  localStorage.setItem(key, JSON.stringify(value));
}
function get(key) {
  try {
    var v = localStorage.getItem(key);
    if (!v) return undefined;
    return JSON.parse(v);
  } catch (_unused) {
    return undefined;
  }
}

/***/ }),

/***/ "./ui/utilities/string.ts":
/*!********************************!*\
  !*** ./ui/utilities/string.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   appendFullStop: () => (/* binding */ appendFullStop),
/* harmony export */   equalsIgnoreCase: () => (/* binding */ equalsIgnoreCase),
/* harmony export */   equalsYes: () => (/* binding */ equalsYes),
/* harmony export */   findClosingBracketIndex: () => (/* binding */ findClosingBracketIndex),
/* harmony export */   firstLetterToUpperCase: () => (/* binding */ firstLetterToUpperCase),
/* harmony export */   startsWithIgnoreCase: () => (/* binding */ startsWithIgnoreCase),
/* harmony export */   textToColor: () => (/* binding */ textToColor),
/* harmony export */   toDate: () => (/* binding */ toDate),
/* harmony export */   trim: () => (/* binding */ trim)
/* harmony export */ });
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

function equalsIgnoreCase(a, b) {
  return typeof a === "string" && typeof b === "string" ? a.toUpperCase() === b.toUpperCase() : a === b;
}
function equalsYes() {
  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
    values[_key] = arguments[_key];
  }
  for (var _i = 0, _values = values; _i < _values.length; _i++) {
    var value = _values[_i];
    if ((value === null || value === void 0 ? void 0 : value.toUpperCase()) === "YES") return true;
  }
  return false;
}
function startsWithIgnoreCase(s, searchString, position) {
  return s === null || s === void 0 ? void 0 : s.toUpperCase().startsWith(searchString.toUpperCase(), position);
}
function findClosingBracketIndex(str, pos) {
  if (str[pos] !== "{") {
    throw new Error("The position must contain an opening bracket");
  }
  var level = 1;
  for (var index = pos + 1; index < str.length; index++) {
    if (str[index] === "{") {
      level++;
    } else if (str[index] === "}") {
      level--;
    }
    if (level === 0) {
      return index;
    }
  }
  return -1;
}
function firstLetterToUpperCase(value) {
  return "".concat(value[0].toUpperCase()).concat(value.slice(1));
}
function appendFullStop(value) {
  if (value && value[value.length - 1] !== ".") return "".concat(value, ".");
  return value;
}
function trim(value) {
  return (value || "").replace(/^[\.\s]+|[\.\s]+$/gm, "");
}
function toDate(value) {
  value = trim(value);
  if (/^[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,2}$/gi.test(value)) return value;else return "";
}
function textToColor(s) {
  var r = 0;
  var g = 0;
  var b = 0;

  // fixed colors
  switch (s.toUpperCase()) {
    case "FREE":
    case "YES":
      return {
        r: 153,
        g: 255,
        b: 153
      };
    case "NO":
    case "NONE":
      return {
        r: 255,
        g: 153,
        b: 153
      };
  }
  for (var i = 0; i < s.length; i++) {
    if (i % 3 === 0) r = (r + s.charCodeAt(i)) % 256;else if (i % 3 === 1) g = (g + s.charCodeAt(i)) % 256;else b = (b + s.charCodeAt(i)) % 256;
  }
  return {
    r: r,
    g: g,
    b: b
  };
}

/***/ }),

/***/ "./ui/utilities/url.ts":
/*!*****************************!*\
  !*** ./ui/utilities/url.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findGetParameter: () => (/* binding */ findGetParameter),
/* harmony export */   httpRegex: () => (/* binding */ httpRegex),
/* harmony export */   toUrl: () => (/* binding */ toUrl),
/* harmony export */   toWikiUrl: () => (/* binding */ toWikiUrl),
/* harmony export */   utilQsString: () => (/* binding */ utilQsString)
/* harmony export */ });
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.

var httpRegex = /^https?:\/\//i;
function toUrl(url) {
  if (!url) return undefined;
  if (!httpRegex.test(url)) return "http://".concat(url);
  return url;
}
function toWikiUrl(wiki) {
  if (!wiki) return undefined;
  if (httpRegex.test(wiki)) return wiki;
  return "https://wiki.openstreetmap.org/wiki/".concat(wiki);
}
function utilQsString(obj, noencode) {
  // encode everything except special characters used in certain hash parameters:
  // "/" in map states, ":", ",", {" and "}" in background
  function softEncode(s) {
    return encodeURIComponent(s).replace(/(%2F|%3A|%2C|%7B|%7D)/g, decodeURIComponent);
  }
  return Object.keys(obj).sort().map(function (key) {
    return "".concat(encodeURIComponent(key), "=").concat(noencode ? softEncode(obj[key]) : encodeURIComponent(obj[key]));
  }).join("&");
}
function findGetParameter(parameterName) {
  var result;
  var tmp = [];
  location.search.substring(1).split("&").forEach(function (item) {
    tmp = item.split("=");
    if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
  });
  return result;
}

/***/ }),

/***/ "./ui/views/compare.ts":
/*!*****************************!*\
  !*** ./ui/views/compare.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18next */ "../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _utilities_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/html */ "./ui/utilities/html.ts");
/* harmony import */ var _utilities_renderImage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/renderImage */ "./ui/utilities/renderImage.ts");
/* harmony import */ var _renderBadges__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./renderBadges */ "./ui/views/renderBadges.ts");
/* harmony import */ var _renderFree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./renderFree */ "./ui/views/renderFree.ts");
/* harmony import */ var _templateData__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../templateData */ "./ui/templateData.ts");
/* harmony import */ var _getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../getLocalizedValue */ "./ui/getLocalizedValue.ts");
/* harmony import */ var _toWikiTable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./toWikiTable */ "./ui/views/toWikiTable.ts");
/* harmony import */ var _utilities_string__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/string */ "./ui/utilities/string.ts");
/* harmony import */ var _language__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../language */ "./ui/language.ts");

// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.











function render(apps, lang) {
  {
    var element = (0,_utilities_html__WEBPACK_IMPORTED_MODULE_2__.createElement)("div", ["<div class=\"cell header param-title\"></div>"].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(apps.map(function (app) {
      return "<div class=\"cell header text-center with-corner-badge\">".concat((0,_renderFree__WEBPACK_IMPORTED_MODULE_5__.renderFree)(app), "<strong>").concat(app.website ? "<a href=\"".concat(app.website, "\" target=\"_blank\">").concat(app.name, "</a>") : app.name, "</strong></div>");
    }))).join(""), ["row", "fixed"]);
    (0,_utilities_html__WEBPACK_IMPORTED_MODULE_2__.getHtmlElement)("#compare").appendChild(element);
  }

  // General
  renderGroup("general", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.general"), [{
    label: "",
    description: "",
    hasValue: function hasValue(app) {
      return app.images.length > 0;
    },
    renderToHtml: function renderToHtml(app) {
      return app.website ? "<a target=\"_blank\" href=\"".concat(app.website, "\">").concat((0,_utilities_renderImage__WEBPACK_IMPORTED_MODULE_3__.renderImage)(app), "</a>") : (0,_utilities_renderImage__WEBPACK_IMPORTED_MODULE_3__.renderImage)(app);
    },
    renderToWiki: function renderToWiki(app) {
      return app.imageWiki ? "[[File:".concat(app.imageWiki, "|160px]]") : "";
    },
    centered: true
  }, {
    label: "",
    description: "",
    hasValue: function hasValue(app) {
      return !!(app.website || app.install.asin || app.install.fDroidID || app.install.googlePlayID || app.install.huaweiAppGalleryID || app.install.appleStoreID || app.install.macAppStoreID || app.install.microsoftAppID);
    },
    renderToHtml: function renderToHtml(app) {
      return "".concat(app.website ? "<a class=\"download\" href=\"".concat(app.website, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.website"), "\"><i class=\"far fa-map\"></i></a>") : "", "\n").concat(app.install.asin ? "<a class=\"download\" href=\"https://www.amazon.com/dp/".concat(app.install.asin, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.asin"), "\" ><i class=\"fab fa-amazon\"></i></a>") : "", "\n").concat(app.install.fDroidID ? "<a class=\"download\" href=\"https://f-droid.org/repository/browse/?fdid=".concat(app.install.fDroidID, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.fDroid"), "\" ><i class=\"fab fa-android\"></i></a>") : "", "\n").concat(app.install.googlePlayID ? "<a class=\"download\" href=\"https://play.google.com/store/apps/details?id=".concat(app.install.googlePlayID, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.googlePlay"), "\" ><i class=\"fab fa-google-play\"></i></a>") : "", "\n").concat(app.install.huaweiAppGalleryID ? "<a class=\"download\" href=\"https://appgallery.huawei.com/#/app/".concat(app.install.huaweiAppGalleryID, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.huaweiAppGallery"), "\" ><i class=\"fas fa-shopping-bag\"></i></a>") : "", "\n").concat(app.install.appleStoreID ? "<a class=\"download\" href=\"https://apps.apple.com/app/".concat(app.install.appleStoreID.toUpperCase().startsWith("ID") ? app.install.appleStoreID : "id".concat(app.install.appleStoreID), "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.appleStore"), "\"><i class=\"fab fa-app-store-ios\"></i></a>") : "", "\n").concat(app.install.macAppStoreID ? "<a class=\"download\" href=\"https://apps.apple.com/app/".concat(app.install.macAppStoreID.toUpperCase().startsWith("ID") ? app.install.macAppStoreID : "id".concat(app.install.macAppStoreID), "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.macAppStore"), "\"><i class=\"fab fa-app-store\"></i></a>") : "", "\n").concat(app.install.microsoftAppID ? "<a class=\"download\" href=\"https://apps.microsoft.com/detail/".concat(app.install.microsoftAppID, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.microsoftApp"), "\"><i class=\"fab fa-microsoft\"></i></a>") : "");
    },
    renderToWiki: function renderToWiki(app) {
      return [app.website ? "[".concat(app.website, " ").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.website"), "]") : "", app.install.asin ? "[https://www.amazon.com/dp/".concat(app.install.asin, " ").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.asin"), "]") : "", app.install.fDroidID ? "[https://f-droid.org/repository/browse/?fdid=".concat(app.install.fDroidID, " ").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.fDroid"), "]") : "", app.install.googlePlayID ? "[https://play.google.com/store/apps/details?id=".concat(app.install.googlePlayID, " ").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.googlePlay"), "]") : "", app.install.huaweiAppGalleryID ? "[https://appgallery.huawei.com/#/app/".concat(app.install.huaweiAppGalleryID, " ").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.huaweiAppGallery"), "]") : "", app.install.appleStoreID ? "[https://apps.apple.com/app/".concat(app.install.appleStoreID.toUpperCase().startsWith("ID") ? app.install.appleStoreID : "id".concat(app.install.appleStoreID), " iTunes App Store]") : "", app.install.macAppStoreID ? "[https://apps.apple.com/app/".concat(app.install.macAppStoreID.toUpperCase().startsWith("ID") ? app.install.macAppStoreID : "id".concat(app.install.macAppStoreID), " ").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.appleStore"), "]") : "", app.install.microsoftAppID ? "[https://apps.microsoft.com/detail/".concat(app.install.microsoftAppID, " ").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.install.macAppStore"), "]") : ""].filter(function (o) {
        return o;
      }).join(", ");
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["genre"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["genre"].description, lang),
    hasValue: function hasValue(app) {
      var _app$genre;
      return ((_app$genre = app.genre) === null || _app$genre === void 0 ? void 0 : _app$genre.length) > 0;
    },
    renderToHtml: function renderToHtml(app) {
      return (0,_renderBadges__WEBPACK_IMPORTED_MODULE_4__.renderBadges)(app.genre);
    },
    renderToWiki: function renderToWiki(app) {
      var _app$genre2;
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)((_app$genre2 = app.genre) === null || _app$genre2 === void 0 ? void 0 : _app$genre2.join(", "));
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["description"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["description"].description, lang),
    hasValue: function hasValue(app) {
      return !!app.description;
    },
    renderToHtml: function renderToHtml(app) {
      return app.description;
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)(app.description);
    },
    more: true
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["platform"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["platform"].description, lang),
    hasValue: function hasValue(app) {
      var _app$platform;
      return ((_app$platform = app.platform) === null || _app$platform === void 0 ? void 0 : _app$platform.length) > 0;
    },
    renderToHtml: function renderToHtml(app) {
      return (0,_renderBadges__WEBPACK_IMPORTED_MODULE_4__.renderBadges)(app.platform);
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)(app.platform.join(", "));
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["date"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["date"].description, lang),
    hasValue: function hasValue(app) {
      return !!(app.lastRelease || app.unmaintained);
    },
    renderToHtml: function renderToHtml(app) {
      return (app.lastRelease ? app.lastRelease : app.unmaintained ? "????-??-??" : "") + (app.unmaintained ? " <span class=\"warning\">".concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.unmaintained", {
        icon: "<i class=\"fas fa-exclamation-triangle\"></i>",
        interpolation: {
          escapeValue: false
        }
      }), "</span>") : "");
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)((app.unmaintained ? "style=\"background-color: #ffc680\" | " : "") + (app.lastRelease ? app.lastRelease : app.unmaintained ? "????-??-??" : "") + (app.unmaintained ? i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("app.unmaintained", {
        icon: "\u26A0\uFE0F"
      }) : ""));
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["languages"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["languages"].description, lang),
    hasValue: function hasValue(app) {
      return !!app.languagesUrl || !!(app.languages.length > 0);
    },
    renderToHtml: function renderToHtml(app) {
      return app.languagesUrl ? "<a class=\"language-url\" href=\"".concat(app.languagesUrl, "\" target=\"_blank\"\">\n      ").concat(app.languages.length > 0 ? (0,_renderBadges__WEBPACK_IMPORTED_MODULE_4__.renderBadges)(app.languages) : "<i class=\"fas fa-language\"></i>", "\n      <i class=\"fas fa-external-link-alt\"></i>\n    </a>") : (0,_renderBadges__WEBPACK_IMPORTED_MODULE_4__.renderBadges)(app.languages);
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)(app.languagesUrl ? "[".concat(app.languagesUrl).concat(app.languages.length > 0 ? app.languages.join(", ") : (0,_language__WEBPACK_IMPORTED_MODULE_10__.languageValueToDisplay)("mul"), "]") : app.languages.join(", "));
    },
    more: true
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["coverage"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["coverage"].description, lang),
    hasValue: function hasValue(app) {
      return !!(app.coverage && app.coverage.length);
    },
    renderToHtml: function renderToHtml(app) {
      return app.coverage[app.coverage.length - 1];
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)(app.coverage[app.coverage.length - 1]);
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["author"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["author"].description, lang),
    hasValue: function hasValue(app) {
      return !!app.author;
    },
    renderToHtml: function renderToHtml(app) {
      return app.author;
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)(app.author);
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["price"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["price"].description, lang),
    hasValue: function hasValue(app) {
      return !!app.price;
    },
    renderToHtml: function renderToHtml(app) {
      return app.price;
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)(app.gratis ? "{{free|{{TranslationOf gratis|{{{lang|}}}}}}}" : app.price);
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["license"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["license"].description, lang),
    hasValue: function hasValue(app) {
      return !!app.license;
    },
    renderToHtml: function renderToHtml(app) {
      return (0,_renderBadges__WEBPACK_IMPORTED_MODULE_4__.renderBadges)(app.license);
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)(app.libre ? "{{free|".concat(app.license || unknown(), "}}") : app.license);
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["repo"].label, lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params["repo"].description, lang),
    hasValue: function hasValue(app) {
      return !!app.sourceCode;
    },
    renderToHtml: function renderToHtml(app) {
      return app.sourceCode ? "<a target=\"_blank\" href=\"".concat(app.sourceCode, "\"><i class=\"fas fa-code\"></i></a>") : "";
    },
    renderToWiki: function renderToWiki(app) {
      return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)(app.sourceCode ? "[".concat(app.sourceCode, " </>]") : "");
    }
  }, {
    label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)("Source", lang),
    description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)("Source where this data comes from.", lang),
    hasValue: function hasValue() {
      return true;
    },
    renderToHtml: function renderToHtml(app) {
      return app.source.map(function (s) {
        return "<a target=\"_blank\" href=\"".concat(s.url, "\">").concat(s.displayName, "</a>");
      }).join(", ");
    }
  }], apps, lang);

  // Map display
  renderGroup("map", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.map"), ["map", "mapData", "datasource", "rotateMap", "3D", "showWebsite", "showPhoneNumber", "showOpeningHours"], apps, lang);

  // Routing
  renderGroup("routing", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.routing"), ["routing", "createRouteManually", "calculateRoute", "createRouteViaWaypoints", "profiles", "turnRestrictions", "calculateRouteOffline", "routingProviders", "avoidTraffic", "trafficProvider"], apps, lang);

  // Navigating
  renderGroup("navigating", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.navigating"), ["navigating", "findLocation", "findNearbyPOI", "navToPoint", "voice", "keepOnRoad", "turnLanes", "withoutGPS", "predefinedRoute"], apps, lang);

  // Tracking
  renderGroup("tracking", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.tracking"), ["tracking", "customInterval", "trackFormats", "geotagging", "fastWayPointAdding", "uploadGPX"], apps, lang);

  // Monitoring
  renderGroup("monitoring", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.monitoring"), ["monitoring", "showTrack", "showExistingTrack", "showAltitudeDiagram", "showDOP", "showSatellites", "showNMEAlive", "showSpeed", "sendPosition"], apps, lang);

  // Editing
  renderGroup("editing", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.editing"), ["addPOI", "editPOI", "addWay", "editGeom", "editTags", "editRelations", "viewNotes", "createNotes", "editNotes", "editSource", "offsetDBsupport", "uploadOSMData"], apps, lang);

  // Rendering
  renderGroup("rendering", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.rendering"), ["rendererOutputFormats"], apps, lang);

  // Accessibility
  renderGroup("accessibility", i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.group.header.accessibility"), ["accessibility", "textOnlyUI", "brailleUI", "explorerMode", "publicTransportMode", "dangerWarnings", "screenReader", "screenReaderLang"], apps, lang);
}
function renderGroup(id, display, params, apps, lang) {
  var extendedParams = params.map(function (p) {
    if (typeof p !== "string") {
      return p;
    }
    return {
      label: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params[p].label, lang),
      description: (0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_7__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_6__.templateData.params[p].description, lang),
      hasValue: function hasValue(app) {
        var _id;
        var value = (_id = app[id]) === null || _id === void 0 ? void 0 : _id[p];
        if (Array.isArray(value)) {
          return value.some(function (v) {
            return !!v;
          });
        }
        return !!value;
      },
      notNo: function notNo(app) {
        var _id2;
        var value = (_id2 = app[id]) === null || _id2 === void 0 ? void 0 : _id2[p];
        if (Array.isArray(value)) {
          return value.some(function (v) {
            return v && !(0,_utilities_string__WEBPACK_IMPORTED_MODULE_9__.equalsIgnoreCase)(v, "no") && !(0,_utilities_string__WEBPACK_IMPORTED_MODULE_9__.equalsIgnoreCase)(v, "none");
          });
        }
        return !(0,_utilities_string__WEBPACK_IMPORTED_MODULE_9__.equalsIgnoreCase)(value, "no") && !(0,_utilities_string__WEBPACK_IMPORTED_MODULE_9__.equalsIgnoreCase)(value, "none");
      },
      renderToHtml: function renderToHtml(app) {
        var _id3;
        return (0,_renderBadges__WEBPACK_IMPORTED_MODULE_4__.renderBadges)((_id3 = app[id]) === null || _id3 === void 0 ? void 0 : _id3[p]);
      },
      renderToWiki: function renderToWiki(app) {
        var _id4;
        return (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiValue)((_id4 = app[id]) === null || _id4 === void 0 ? void 0 : _id4[p]);
      }
    };
  });
  var elements = extendedParams.map(function (p) {
    if (!apps.some(function (app) {
      return p.hasValue(app) && (!p.notNo || p.notNo(app));
    })) {
      return undefined;
    }
    return createParamElement(apps, p.label, p.description, function (app) {
      return p.renderToHtml(app);
    }, id + "-detail", p.more, p.centered);
  }).filter(function (e) {
    return e;
  });
  if (elements.length) {
    var element = (0,_utilities_html__WEBPACK_IMPORTED_MODULE_2__.createElement)("div", "<div class=\"cell header params-title params-group-title\">\n        <a class=\"group\" data-target=\".".concat(id, "-detail\" href=\"#\"><i class=\"fas fa-fw fa-caret-down ").concat(id, "-detail\"></i><i class=\"fas fa-fw fa-caret-right ").concat(id, "-detail hidden\"></i> ").concat(display, "</a>\n        <a class=\"export\" href=\"#\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.share"), "\"><i class=\"fas fa-share-alt\"></i></a> </div>"), ["row"]);
    (0,_utilities_html__WEBPACK_IMPORTED_MODULE_2__.getHtmlElement)(".export", element).addEventListener("click", function (e) {
      e.preventDefault();
      var wikiTable = (0,_toWikiTable__WEBPACK_IMPORTED_MODULE_8__.toWikiTable)(apps, extendedParams.filter(function (p) {
        return !!p.renderToWiki;
      }), lang);
      navigator.clipboard.writeText("== ".concat(display, " == <!-- ").concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("wiki.generatedBy"), " -->\n").concat(wikiTable));
      alert(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("share.wiki", {
        group: display
      }));
    });
    (0,_utilities_html__WEBPACK_IMPORTED_MODULE_2__.getHtmlElement)(".group", element).addEventListener("click", function (e) {
      document.querySelectorAll(e.currentTarget.dataset["target"] || "").forEach(function (e) {
        return e.classList.toggle("hidden");
      });
    });
    (0,_utilities_html__WEBPACK_IMPORTED_MODULE_2__.getHtmlElement)("#compare").appendChild(element);
    elements.forEach(function (element) {
      (0,_utilities_html__WEBPACK_IMPORTED_MODULE_2__.getHtmlElement)("#compare").appendChild(element);
    });
  }
}
function createParamElement(apps, label, description, value) {
  var group = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
  var more = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var centered = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
  var values = apps.map(function (app) {
    return value(app);
  });
  if (values.filter(function (v) {
    return v;
  }).length === 0) {
    return undefined;
  }
  var element = (0,_utilities_html__WEBPACK_IMPORTED_MODULE_2__.createElement)("div", ["<div class=\"cell header param-title\" title=\"".concat(description, "\">").concat(label, "</div>")].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(values.map(function (v) {
    return more ? "<div class=\"cell param-text".concat(centered ? " align-middle text-center" : "", "\"><div class=\"dynamic-more\">").concat(v || unknown(), "</div></div>") : "<div class=\"cell param-text".concat(centered ? " align-middle text-center" : "", "\">").concat(v || unknown(), "</div>");
  }))).join(""), ["row", group]);
  return element;
}
function unknown() {
  return "<span class=\"unknown\">".concat(i18next__WEBPACK_IMPORTED_MODULE_1__["default"].t("compare.unknown"), "</span>");
}

/***/ }),

/***/ "./ui/views/list.ts":
/*!**************************!*\
  !*** ./ui/views/list.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var _utilities_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/html */ "./ui/utilities/html.ts");
/* harmony import */ var _utilities_renderImage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/renderImage */ "./ui/utilities/renderImage.ts");
/* harmony import */ var _renderBadges__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderBadges */ "./ui/views/renderBadges.ts");
/* harmony import */ var _renderFree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderFree */ "./ui/views/renderFree.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! i18next */ "../node_modules/i18next/dist/esm/i18next.js");
// Copyright (C) 2020 Markus Peloso
//
// This file is part of OSM Apps Catalog.
//
// OSM Apps Catalog is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// OSM Apps Catalog is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with OSM Apps Catalog.  If not, see <http://www.gnu.org/licenses/>.






function render(app) {
  var element = (0,_utilities_html__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", "<div class=\"header\">\n      \n      <div class=\"with-corner-badge\">".concat((0,_renderFree__WEBPACK_IMPORTED_MODULE_3__.renderFree)(app), "<strong>").concat(app.website ? "<a href=\"".concat(app.website, "\" target=\"_blank\">").concat(app.name, "</a>") : app.name, "</strong></div>\n        ").concat(app.website ? "<a href=\"".concat(app.website, "\" target=\"_blank\" title=\"").concat(app.name, "\">").concat((0,_utilities_renderImage__WEBPACK_IMPORTED_MODULE_1__.renderImage)(app), "</a>") : (0,_utilities_renderImage__WEBPACK_IMPORTED_MODULE_1__.renderImage)(app), "\n      </div>\n      <div><small>").concat(app.description).concat(app.documentation ? " <a href=\"".concat(app.documentation, "\" target=\"_blank\">").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("list.documentation"), "</a>") : "", "</small></div>\n      ").concat(app.website ? "<a class=\"download\" href=\"".concat(app.website, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.website"), "\"><i class=\"far fa-map\"></i></a>") : "", "\n\n      ").concat(app.install.asin ? "<a class=\"download\" href=\"https://www.amazon.com/dp/".concat(app.install.asin, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.install.asin"), "\"><i class=\"fab fa-amazon\"></i></a>") : "", "\n      ").concat(app.install.fDroidID ? "<a class=\"download\" href=\"https://f-droid.org/repository/browse/?fdid=".concat(app.install.fDroidID, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.install.fDroid"), "\"><i class=\"fab fa-android\"></i></a>") : "", "\n      ").concat(app.install.googlePlayID ? "<a class=\"download\" href=\"https://play.google.com/store/apps/details?id=".concat(app.install.googlePlayID, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.install.googlePlay"), "\"><i class=\"fab fa-google-play\"></i></a>") : "", "\n      ").concat(app.install.huaweiAppGalleryID ? "<a class=\"download\" href=\"https://appgallery.huawei.com/#/app/".concat(app.install.huaweiAppGalleryID, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.install.huaweiAppGallery"), "\"><i class=\"fas fa-shopping-bag\"></i></a>") : "", "\n      ").concat(app.install.appleStoreID ? "<a class=\"download\" href=\"https://apps.apple.com/app/".concat(app.install.appleStoreID.toUpperCase().startsWith("ID") ? app.install.appleStoreID : "id".concat(app.install.appleStoreID), "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.install.appleStore"), "\"><i class=\"fab fa-app-store-ios\"></i></a>") : "", "\n      ").concat(app.install.macAppStoreID ? "<a class=\"download\" href=\"https://apps.apple.com/app/".concat(app.install.macAppStoreID.toUpperCase().startsWith("ID") ? app.install.macAppStoreID : "id".concat(app.install.macAppStoreID), "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.install.macAppStore"), "\"><i class=\"fab fa-app-store\"></i></a>") : "", "\n      ").concat(app.install.microsoftAppID ? "<a class=\"download\" href=\"https://apps.microsoft.com/detail/".concat(app.install.microsoftAppID, "\" title=\"").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.install.microsoftApp"), "\"><i class=\"fab fa-microsoft\"></i></a>") : "", "\n      <div class=\"badges\">").concat((0,_renderBadges__WEBPACK_IMPORTED_MODULE_2__.renderBadges)(app.topics), "</div>\n\n            <a class=\"more-infos-button\" href=\"#\">More <i class=\"fas fa-angle-down\"></i></a>\n            <div class=\"more-infos\" style=\"display:none;\">\n        <div class=\"more-infos-title\">").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("list.moreInfos"), "</div>\n        ").concat(app.platform.length > 0 ? "<div class=\"more-info\">\n          <span class=\"more-info-title\">".concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.platforms"), "</span> <span class=\"more-info-text\">").concat(app.platform.join(", "), "</span>\n        </div>") : "", "\n        ").concat(app.lastRelease || app.unmaintained ? "<div class=\"more-info\">\n          <span class=\"more-info-title\">".concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.lastRelease"), "</span> <span class=\"more-info-text\">").concat(app.lastRelease ? app.lastRelease : "????-??-??").concat(app.unmaintained ? " <span class=\"warning\">(<i class=\"fas fa-exclamation-triangle\"></i> Unmaintained)</span>" : "", "</span>\n        </div>") : "", "\n        ").concat(app.languagesUrl ? "<a class=\"more-info\" href=\"".concat(app.languagesUrl, "\" target=\"_blank\">\n                <span class=\"more-info-title\">").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.languages"), "</span> <span class=\"more-info-text\">").concat(app.languages.length > 0 ? app.languages.join(", ") : "<i class=\"fas fa-language\"></i>", "</span>\n              </a>") : app.languages.length > 0 ? "<div class=\"more-info\">\n          <span class=\"more-info-title\">".concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.languages"), "</span> <span class=\"more-info-text\">").concat(app.languages.join(", "), "</span>\n        </div>") : "", "\n        ").concat(app.coverage && app.coverage.length ? "<div class=\"more-info\">\n          <span class=\"more-info-title\">".concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.coverage"), "</span> <span class=\"more-info-text\">").concat(app.coverage[app.coverage.length - 1], "</span>\n        </div>") : "", "\n        ").concat(app.author ? "<div class=\"more-info\">\n          <span class=\"more-info-title\">".concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.author"), "</span> <span class=\"more-info-text\">").concat(app.author, "</span>\n        </div>") : "", "\n        ").concat(app.price ? "<div class=\"more-info\">\n          <span class=\"more-info-title\">".concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.price"), "</span> <span class=\"more-info-text\">").concat(app.price, "</span>\n        </div>") : "", "\n        ").concat(app.license ? "<div class=\"more-info\">\n          <span class=\"more-info-title\">".concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.license"), "</span> <span class=\"more-info-text\">").concat(app.license, "</span>\n        </div>") : "", "\n        ").concat(app.sourceCode ? "<a class=\"more-info\" href=\"".concat(app.sourceCode, "\" target=\"_blank\">\n          <span class=\"more-info-title\">").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.sourceCode"), "</span> <span class=\"more-info-text\"><i class=\"fas fa-code\"></i></span>\n        </a>") : "", "\n        <div class=\"more-info\">\n        <span class=\"more-info-title\">").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("app.source"), "</span> <span class=\"more-info-text\">").concat(app.source.map(function (s) {
    return "<a href=\"".concat(s.url, "\" target=\"_blank\">").concat(s.displayName, "</a>");
  }).join(", "), "</span>\n        </div>\n        "), ["app"]);
  var moreButton = element.querySelector(".more-infos-button");
  var moreInfos = element.querySelector(".more-infos");
  moreButton === null || moreButton === void 0 || moreButton.addEventListener("click", function (ev) {
    moreButton === null || moreButton === void 0 || moreButton.setAttribute("style", "display: none;");
    moreInfos === null || moreInfos === void 0 || moreInfos.setAttribute("style", "");
    ev.preventDefault();
  });
  (0,_utilities_html__WEBPACK_IMPORTED_MODULE_0__.getHtmlElement)("#list").appendChild(element);
}

/***/ }),

/***/ "./ui/views/renderBadges.ts":
/*!**********************************!*\
  !*** ./ui/views/renderBadges.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderBadges: () => (/* binding */ renderBadges)
/* harmony export */ });
/* harmony import */ var _utilities_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/string */ "./ui/utilities/string.ts");

function renderBadge(t) {
  var background = (0,_utilities_string__WEBPACK_IMPORTED_MODULE_0__.textToColor)(t);
  var yiq = (background.r * 299 + background.g * 587 + background.b * 114) / 1000;
  return "<span class=\"badge\" style=\"background: rgb(".concat(background.r, ",").concat(background.g, ",").concat(background.b, "); color:").concat(yiq >= 128 ? "black" : "white", ";\">").concat(t, "</span>");
}
function renderBadges(values) {
  if (!values) {
    return undefined;
  }
  if (typeof values === "string") {
    return renderBadge(values);
  }
  return values.map(renderBadge).join("");
}

/***/ }),

/***/ "./ui/views/renderFree.ts":
/*!********************************!*\
  !*** ./ui/views/renderFree.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderFree: () => (/* binding */ renderFree)
/* harmony export */ });
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../node_modules/i18next/dist/esm/i18next.js");

function renderFree(app) {
  return app.gratis || app.libre ? "<div class=\"corner-badge\">\n        <span title=\"".concat(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("app.free"), "\"><i class=\"fas fa-fw fa-gift\"></i></span>\n        ").concat(app.libre ? "<span title=\"".concat(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("libre"), "\"><i class=\"fas fa-fw fa-book-open\"></i></span>") : app.gratis ? "<span title=\"".concat(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("proprietary"), "\"><i class=\"fas fa-wine-bottle\"></i></span>") : "", "\n      </div>") : "";
}

/***/ }),

/***/ "./ui/views/toWikiTable.ts":
/*!*********************************!*\
  !*** ./ui/views/toWikiTable.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toWikiTable: () => (/* binding */ toWikiTable),
/* harmony export */   toWikiValue: () => (/* binding */ toWikiValue)
/* harmony export */ });
/* harmony import */ var _data_template_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../data/template/utilities */ "./data/template/utilities.ts");
/* harmony import */ var _templateData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../templateData */ "./ui/templateData.ts");
/* harmony import */ var _getLocalizedValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../getLocalizedValue */ "./ui/getLocalizedValue.ts");
/* harmony import */ var _utilities_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/string */ "./ui/utilities/string.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! i18next */ "../node_modules/i18next/dist/esm/i18next.js");





function isUnknown(value) {
  if (Array.isArray(value)) {
    if (value.length === 0) {
      return true;
    } else if (value.length === 2) {
      return (0,_utilities_string__WEBPACK_IMPORTED_MODULE_3__.equalsIgnoreCase)(value[0], "yes") && (0,_utilities_string__WEBPACK_IMPORTED_MODULE_3__.equalsIgnoreCase)(value[1], "no");
    }
    return false;
  }
  return (0,_utilities_string__WEBPACK_IMPORTED_MODULE_3__.equalsIgnoreCase)(value, "?") || !value;
}
function toWikiTable(apps, params, lang) {
  // Filter params with none values or all no
  params = params.filter(function (p) {
    return apps.some(function (app) {
      return p.hasValue(app) && (!p.notNo || p.notNo(app));
    });
  }).filter(function (e) {
    return e;
  });
  var more = params.some(function (p) {
    return p.more;
  });
  var appWithFields = apps.filter(function (app) {
    return params.some(function (p) {
      return p.hasValue(app) && (!p.notNo || p.notNo(app));
    });
  }).sort(function (a, b) {
    var nameA = a.name.toUpperCase() || "";
    var nameB = b.name.toUpperCase() || "";
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    return 0;
  });
  var rows = params.map(function (p) {
    return "! title=\"".concat(p.description, "\" |").concat(p.label, "\n").concat(appWithFields.map(function (app) {
      var value = p.renderToWiki(app) || "";
      return "| title=\"".concat(p.label, "\" ").concat(value.startsWith("{{no") || value.startsWith("{{yes") || value.startsWith("{{free") || value.startsWith("style=") ? "" : "|", " ").concat(value, "\n");
    }).join(""));
  });
  var wikiTable = "<div style=\"overflow-x:auto;max-width:100%\">\n{| class=\"wikitable sticky\" style=\"font-size: 85%; text-align: center; margin-bottom: 0;\"\n|+\n! title=\"".concat((0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_2__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_1__.templateData.params["name"].description, lang), "\" |").concat((0,_getLocalizedValue__WEBPACK_IMPORTED_MODULE_2__.getLocalizedValue)(_templateData__WEBPACK_IMPORTED_MODULE_1__.templateData.params["name"].label, lang), "\n").concat(appWithFields.map(function (app) {
    var _app$source$find, _app$source$find2;
    var wiki = ((_app$source$find = app.source.find(function (s) {
      return s.name === "Software";
    })) === null || _app$source$find === void 0 ? void 0 : _app$source$find.wiki) || ((_app$source$find2 = app.source.find(function (s) {
      return s.name === "Layer";
    })) === null || _app$source$find2 === void 0 ? void 0 : _app$source$find2.wiki);
    return "! style=\"min-width: ".concat(more ? 160 : 120, "px\" |[[").concat(toWikiValue(wiki || app.name), "|").concat(toWikiValue(app.name), "]]\n");
  }).join(""), "|-\n").concat(rows.join("|-\n"), "|}\n</div>\n[[Category:Software list]]\n<p style=\"font-size:80%\">").concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("wiki.generatedByOsmAppsCatalog", {
    link: document.location.href,
    date: new Date().toISOString().substring(0, 10),
    interpolation: {
      escapeValue: false
    }
  }), "</p>");
  return wikiTable;
}
function toWikiValue(value) {
  if (isUnknown(value)) {
    return "{{?}}";
  }
  if (typeof value === "string") {
    if ((0,_utilities_string__WEBPACK_IMPORTED_MODULE_3__.equalsYes)(value)) {
      return "{{yes}}";
    } else if ((0,_utilities_string__WEBPACK_IMPORTED_MODULE_3__.equalsIgnoreCase)(value, "no")) {
      return "{{no}}";
    } else if ((0,_utilities_string__WEBPACK_IMPORTED_MODULE_3__.equalsIgnoreCase)(value, "none")) {
      return "{{no|".concat(i18next__WEBPACK_IMPORTED_MODULE_4__["default"].t("wiki.none"), "}}");
    }
    return (0,_data_template_utilities__WEBPACK_IMPORTED_MODULE_0__.toWikiText)(value);
  }
  return value.map(function (v) {
    return toWikiValue(v);
  }).join(", ");
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "../node_modules/@babel/runtime/helpers/typeof.js")["default"]);
function _regeneratorRuntime() {
  "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return e;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function define(t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function value(t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(_typeof(e) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function complete(t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function finish(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    "catch": function _catch(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/typeof.js":
/*!********************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/typeof.js ***!
  \********************************************************/
/***/ ((module) => {

function _typeof(o) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "../node_modules/@babel/runtime/regenerator/index.js":
/*!***********************************************************!*\
  !*** ../node_modules/@babel/runtime/regenerator/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "../node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "../node_modules/slim-select/dist/slimselect.min.mjs":
/*!***********************************************************!*\
  !*** ../node_modules/slim-select/dist/slimselect.min.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var exports = {};!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.SlimSelect=t():e.SlimSelect=t()}(window,function(){return n={},s.m=i=[function(e,t,i){"use strict";function n(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var i=document.createEvent("CustomEvent");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i}t.__esModule=!0,t.kebabCase=t.highlight=t.isValueInArrayOfObjects=t.debounce=t.putContent=t.ensureElementInView=t.hasClassInTree=void 0,t.hasClassInTree=function(e,t){function n(e,t){return t&&e&&e.classList&&e.classList.contains(t)?e:null}return n(e,t)||function e(t,i){return t&&t!==document?n(t,i)?t:e(t.parentNode,i):null}(e,t)},t.ensureElementInView=function(e,t){var i=e.scrollTop+e.offsetTop,n=i+e.clientHeight,s=t.offsetTop,t=s+t.clientHeight;s<i?e.scrollTop-=i-s:n<t&&(e.scrollTop+=t-n)},t.putContent=function(e,t,i){var n=e.offsetHeight,s=e.getBoundingClientRect(),e=i?s.top:s.top-n,n=i?s.bottom:s.bottom+n;return e<=0?"below":n>=window.innerHeight?"above":i?t:"below"},t.debounce=function(s,a,o){var l;return void 0===a&&(a=100),void 0===o&&(o=!1),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=self,n=o&&!l;clearTimeout(l),l=setTimeout(function(){l=null,o||s.apply(i,e)},a),n&&s.apply(i,e)}},t.isValueInArrayOfObjects=function(e,t,i){if(!Array.isArray(e))return e[t]===i;for(var n=0,s=e;n<s.length;n++){var a=s[n];if(a&&a[t]&&a[t]===i)return!0}return!1},t.highlight=function(e,t,i){var n=e,s=new RegExp("("+t.trim()+")(?![^<]*>[^<>]*</)","i");if(!e.match(s))return e;var a=e.match(s).index,t=a+e.match(s)[0].toString().length,t=e.substring(a,t);return n=n.replace(s,'<mark class="'.concat(i,'">').concat(t,"</mark>"))},t.kebabCase=function(e){var t=e.replace(/[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g,function(e){return"-"+e.toLowerCase()});return e[0]===e[0].toUpperCase()?t.substring(1):t},"function"!=typeof(t=window).CustomEvent&&(n.prototype=t.Event.prototype,t.CustomEvent=n)},function(e,t,i){"use strict";t.__esModule=!0,t.validateOption=t.validateData=t.Data=void 0;var n=(s.prototype.newOption=function(e){return{id:e.id||String(Math.floor(1e8*Math.random())),value:e.value||"",text:e.text||"",innerHTML:e.innerHTML||"",selected:e.selected||!1,display:void 0===e.display||e.display,disabled:e.disabled||!1,placeholder:e.placeholder||!1,class:e.class||void 0,data:e.data||{},mandatory:e.mandatory||!1}},s.prototype.add=function(e){this.data.push({id:String(Math.floor(1e8*Math.random())),value:e.value,text:e.text,innerHTML:"",selected:!1,display:!0,disabled:!1,placeholder:!1,class:void 0,mandatory:e.mandatory,data:{}})},s.prototype.parseSelectData=function(){this.data=[];for(var e=0,t=this.main.select.element.childNodes;e<t.length;e++){var i=t[e];if("OPTGROUP"===i.nodeName){for(var n={label:i.label,options:[]},s=0,a=i.childNodes;s<a.length;s++){var o,l=a[s];"OPTION"===l.nodeName&&(o=this.pullOptionData(l),n.options.push(o),o.placeholder&&""!==o.text.trim()&&(this.main.config.placeholderText=o.text))}this.data.push(n)}else"OPTION"===i.nodeName&&(o=this.pullOptionData(i),this.data.push(o),o.placeholder&&""!==o.text.trim()&&(this.main.config.placeholderText=o.text))}},s.prototype.pullOptionData=function(e){return{id:!!e.dataset&&e.dataset.id||String(Math.floor(1e8*Math.random())),value:e.value,text:e.text,innerHTML:e.innerHTML,selected:e.selected,disabled:e.disabled,placeholder:"true"===e.dataset.placeholder,class:e.className,style:e.style.cssText,data:e.dataset,mandatory:!!e.dataset&&"true"===e.dataset.mandatory}},s.prototype.setSelectedFromSelect=function(){if(this.main.config.isMultiple){for(var e=[],t=0,i=this.main.select.element.options;t<i.length;t++){var n=i[t];!n.selected||(n=this.getObjectFromData(n.value,"value"))&&n.id&&e.push(n.id)}this.setSelected(e,"id")}else{var s=this.main.select.element;-1!==s.selectedIndex&&(s=s.options[s.selectedIndex].value,this.setSelected(s,"value"))}},s.prototype.setSelected=function(e,t){void 0===t&&(t="id");for(var i=0,n=this.data;i<n.length;i++){var s=n[i];if(s.hasOwnProperty("label")){if(s.hasOwnProperty("options")){var a=s.options;if(a)for(var o=0,l=a;o<l.length;o++){var r=l[o];r.placeholder||(r.selected=this.shouldBeSelected(r,e,t))}}}else s.selected=this.shouldBeSelected(s,e,t)}},s.prototype.shouldBeSelected=function(e,t,i){if(void 0===i&&(i="id"),Array.isArray(t))for(var n=0,s=t;n<s.length;n++){var a=s[n];if(i in e&&String(e[i])===String(a))return!0}else if(i in e&&String(e[i])===String(t))return!0;return!1},s.prototype.getSelected=function(){for(var e={text:"",placeholder:this.main.config.placeholderText},t=[],i=0,n=this.data;i<n.length;i++){var s=n[i];if(s.hasOwnProperty("label")){if(s.hasOwnProperty("options")){var a=s.options;if(a)for(var o=0,l=a;o<l.length;o++){var r=l[o];r.selected&&(this.main.config.isMultiple?t.push(r):e=r)}}}else s.selected&&(this.main.config.isMultiple?t.push(s):e=s)}return this.main.config.isMultiple?t:e},s.prototype.addToSelected=function(e,t){if(void 0===t&&(t="id"),this.main.config.isMultiple){var i=[],n=this.getSelected();if(Array.isArray(n))for(var s=0,a=n;s<a.length;s++){var o=a[s];i.push(o[t])}i.push(e),this.setSelected(i,t)}},s.prototype.removeFromSelected=function(e,t){if(void 0===t&&(t="id"),this.main.config.isMultiple){for(var i=[],n=0,s=this.getSelected();n<s.length;n++){var a=s[n];String(a[t])!==String(e)&&i.push(a[t])}this.setSelected(i,t)}},s.prototype.onDataChange=function(){this.main.onChange&&this.isOnChangeEnabled&&this.main.onChange(JSON.parse(JSON.stringify(this.getSelected())))},s.prototype.getObjectFromData=function(e,t){void 0===t&&(t="id");for(var i=0,n=this.data;i<n.length;i++){var s=n[i];if(t in s&&String(s[t])===String(e))return s;if(s.hasOwnProperty("options"))if(s.options)for(var a=0,o=s.options;a<o.length;a++){var l=o[a];if(String(l[t])===String(e))return l}}return null},s.prototype.search=function(n){var s,e;""!==(this.searchValue=n).trim()?(s=this.main.config.searchFilter,e=this.data.slice(0),n=n.trim(),e=e.map(function(e){if(e.hasOwnProperty("options")){var t=e,i=[];if(0!==(i=t.options?t.options.filter(function(e){return s(e,n)}):i).length){t=Object.assign({},t);return t.options=i,t}}if(e.hasOwnProperty("text")&&s(e,n))return e;return null}),this.filtered=e.filter(function(e){return e})):this.filtered=null},s);function s(e){this.contentOpen=!1,this.contentPosition="below",this.isOnChangeEnabled=!0,this.main=e.main,this.searchValue="",this.data=[],this.filtered=null,this.parseSelectData(),this.setSelectedFromSelect()}function r(e){return void 0!==e.text||(console.error("Data object option must have at least have a text value. Check object: "+JSON.stringify(e)),!1)}t.Data=n,t.validateData=function(e){if(!e)return console.error("Data must be an array of objects"),!1;for(var t=0,i=0,n=e;i<n.length;i++){var s=n[i];if(s.hasOwnProperty("label")){if(s.hasOwnProperty("options")){var a=s.options;if(a)for(var o=0,l=a;o<l.length;o++)r(l[o])||t++}}else r(s)||t++}return 0===t},t.validateOption=r},function(e,t,i){"use strict";t.__esModule=!0;var n=i(3),s=i(4),a=i(5),r=i(1),o=i(0),i=(l.prototype.validate=function(e){e="string"==typeof e.select?document.querySelector(e.select):e.select;if(!e)throw new Error("Could not find select element");if("SELECT"!==e.tagName)throw new Error("Element isnt of type select");return e},l.prototype.selected=function(){if(this.config.isMultiple){for(var e=[],t=0,i=s=this.data.getSelected();t<i.length;t++){var n=i[t];e.push(n.value)}return e}var s;return(s=this.data.getSelected())?s.value:""},l.prototype.set=function(e,t,i,n){void 0===t&&(t="value"),void 0===i&&(i=!0),void 0===n&&(n=!0),this.config.isMultiple&&!Array.isArray(e)?this.data.addToSelected(e,t):this.data.setSelected(e,t),this.select.setValue(),this.data.onDataChange(),this.render(),(i=this.config.hideSelectedOption&&this.config.isMultiple&&this.data.getSelected().length===this.data.data.length?!0:i)&&this.close()},l.prototype.setSelected=function(e,t,i,n){this.set(e,t=void 0===t?"value":t,i=void 0===i?!0:i,n=void 0===n?!0:n)},l.prototype.setData=function(e){if((0,r.validateData)(e)){for(var t=JSON.parse(JSON.stringify(e)),i=this.data.getSelected(),n=0;n<t.length;n++)t[n].value||t[n].placeholder||(t[n].value=t[n].text);if(this.config.isAjax&&i)if(this.config.isMultiple)for(var s=0,a=i.reverse();s<a.length;s++){var o=a[s];t.unshift(o)}else{t.unshift(i);for(n=0;n<t.length;n++)t[n].placeholder||t[n].value!==i.value||t[n].text!==i.text||t.splice(n,1);for(var l=!1,n=0;n<t.length;n++)t[n].placeholder&&(l=!0);l||t.unshift({text:"",placeholder:!0})}this.select.create(t),this.data.parseSelectData(),this.data.setSelectedFromSelect()}else console.error("Validation problem on: #"+this.select.element.id)},l.prototype.addData=function(e){(0,r.validateData)([e])?(this.data.add(this.data.newOption(e)),this.select.create(this.data.data),this.data.parseSelectData(),this.data.setSelectedFromSelect(),this.render()):console.error("Validation problem on: #"+this.select.element.id)},l.prototype.open=function(){var e,t=this;this.config.isEnabled&&(this.data.contentOpen||this.config.hideSelectedOption&&this.config.isMultiple&&this.data.getSelected().length===this.data.data.length||(this.beforeOpen&&this.beforeOpen(),this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.plus.classList.add("ss-cross"):this.slim.singleSelected&&(this.slim.singleSelected.arrowIcon.arrow.classList.remove("arrow-down"),this.slim.singleSelected.arrowIcon.arrow.classList.add("arrow-up")),this.slim[this.config.isMultiple?"multiSelected":"singleSelected"].container.classList.add("above"===this.data.contentPosition?this.config.openAbove:this.config.openBelow),this.config.addToBody&&(e=this.slim.container.getBoundingClientRect(),this.slim.content.style.top=e.top+e.height+window.scrollY+"px",this.slim.content.style.left=e.left+window.scrollX+"px",this.slim.content.style.width=e.width+"px"),this.slim.content.classList.add(this.config.open),"up"===this.config.showContent.toLowerCase()||"down"!==this.config.showContent.toLowerCase()&&"above"===(0,o.putContent)(this.slim.content,this.data.contentPosition,this.data.contentOpen)?this.moveContentAbove():this.moveContentBelow(),this.config.isMultiple||(e=this.data.getSelected())&&(e=e.id,(e=this.slim.list.querySelector('[data-id="'+e+'"]'))&&(0,o.ensureElementInView)(this.slim.list,e)),setTimeout(function(){t.data.contentOpen=!0,t.config.searchFocus&&t.slim.search.input.focus(),t.afterOpen&&t.afterOpen()},this.config.timeoutDelay)))},l.prototype.close=function(){var e=this;this.data.contentOpen&&(this.beforeClose&&this.beforeClose(),this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openAbove),this.slim.multiSelected.container.classList.remove(this.config.openBelow),this.slim.multiSelected.plus.classList.remove("ss-cross")):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openAbove),this.slim.singleSelected.container.classList.remove(this.config.openBelow),this.slim.singleSelected.arrowIcon.arrow.classList.add("arrow-down"),this.slim.singleSelected.arrowIcon.arrow.classList.remove("arrow-up")),this.slim.content.classList.remove(this.config.open),this.data.contentOpen=!1,this.search(""),setTimeout(function(){e.slim.content.removeAttribute("style"),e.data.contentPosition="below",e.config.isMultiple&&e.slim.multiSelected?(e.slim.multiSelected.container.classList.remove(e.config.openAbove),e.slim.multiSelected.container.classList.remove(e.config.openBelow)):e.slim.singleSelected&&(e.slim.singleSelected.container.classList.remove(e.config.openAbove),e.slim.singleSelected.container.classList.remove(e.config.openBelow)),e.slim.search.input.blur(),e.afterClose&&e.afterClose()},this.config.timeoutDelay))},l.prototype.moveContentAbove=function(){var e=0;this.config.isMultiple&&this.slim.multiSelected?e=this.slim.multiSelected.container.offsetHeight:this.slim.singleSelected&&(e=this.slim.singleSelected.container.offsetHeight);var t=e+this.slim.content.offsetHeight-1;this.slim.content.style.margin="-"+t+"px 0 0 0",this.slim.content.style.height=t-e+1+"px",this.slim.content.style.transformOrigin="center bottom",this.data.contentPosition="above",this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openBelow),this.slim.multiSelected.container.classList.add(this.config.openAbove)):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openBelow),this.slim.singleSelected.container.classList.add(this.config.openAbove))},l.prototype.moveContentBelow=function(){this.data.contentPosition="below",this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openAbove),this.slim.multiSelected.container.classList.add(this.config.openBelow)):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openAbove),this.slim.singleSelected.container.classList.add(this.config.openBelow))},l.prototype.enable=function(){this.config.isEnabled=!0,this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.container.classList.remove(this.config.disabled):this.slim.singleSelected&&this.slim.singleSelected.container.classList.remove(this.config.disabled),this.select.triggerMutationObserver=!1,this.select.element.disabled=!1,this.slim.search.input.disabled=!1,this.select.triggerMutationObserver=!0},l.prototype.disable=function(){this.config.isEnabled=!1,this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.container.classList.add(this.config.disabled):this.slim.singleSelected&&this.slim.singleSelected.container.classList.add(this.config.disabled),this.select.triggerMutationObserver=!1,this.select.element.disabled=!0,this.slim.search.input.disabled=!0,this.select.triggerMutationObserver=!0},l.prototype.search=function(t){var i;this.data.searchValue!==t&&(this.slim.search.input.value=t,this.config.isAjax?((i=this).config.isSearching=!0,this.render(),this.ajax&&this.ajax(t,function(e){i.config.isSearching=!1,Array.isArray(e)?(e.unshift({text:"",placeholder:!0}),i.setData(e),i.data.search(t),i.render()):"string"==typeof e?i.slim.options(e):i.render()})):(this.data.search(t),this.render()))},l.prototype.setSearchText=function(e){this.config.searchText=e},l.prototype.render=function(){this.config.isMultiple?this.slim.values():(this.slim.placeholder(),this.slim.deselect()),this.slim.options()},l.prototype.destroy=function(e){var t=(e=void 0===e?null:e)?document.querySelector("."+e+".ss-main"):this.slim.container,i=e?document.querySelector("[data-ssid=".concat(e,"]")):this.select.element;t&&i&&(document.removeEventListener("click",this.documentClick),"auto"===this.config.showContent&&window.removeEventListener("scroll",this.windowScroll,!1),i.style.display="",delete i.dataset.ssid,i.slim=null,t.parentElement&&t.parentElement.removeChild(t),!this.config.addToBody||(e=e?document.querySelector("."+e+".ss-content"):this.slim.content)&&document.body.removeChild(e))},l);function l(e){var t=this;this.ajax=null,this.addable=null,this.beforeOnChange=null,this.onChange=null,this.beforeOpen=null,this.afterOpen=null,this.beforeClose=null,this.afterClose=null,this.windowScroll=(0,o.debounce)(function(e){t.data.contentOpen&&("above"===(0,o.putContent)(t.slim.content,t.data.contentPosition,t.data.contentOpen)?t.moveContentAbove():t.moveContentBelow())}),this.documentClick=function(e){e.target&&!(0,o.hasClassInTree)(e.target,t.config.id)&&t.close()};var i=this.validate(e);i.dataset.ssid&&this.destroy(i.dataset.ssid),e.ajax&&(this.ajax=e.ajax),e.addable&&(this.addable=e.addable),this.config=new n.Config({select:i,isAjax:!!e.ajax,showSearch:e.showSearch,searchPlaceholder:e.searchPlaceholder,searchText:e.searchText,searchingText:e.searchingText,searchFocus:e.searchFocus,searchHighlight:e.searchHighlight,searchFilter:e.searchFilter,closeOnSelect:e.closeOnSelect,showContent:e.showContent,placeholderText:e.placeholder,allowDeselect:e.allowDeselect,allowDeselectOption:e.allowDeselectOption,hideSelectedOption:e.hideSelectedOption,deselectLabel:e.deselectLabel,isEnabled:e.isEnabled,valuesUseText:e.valuesUseText,showOptionTooltips:e.showOptionTooltips,selectByGroup:e.selectByGroup,limit:e.limit,timeoutDelay:e.timeoutDelay,addToBody:e.addToBody}),this.select=new s.Select({select:i,main:this}),this.data=new r.Data({main:this}),this.slim=new a.Slim({main:this}),this.select.element.parentNode&&this.select.element.parentNode.insertBefore(this.slim.container,this.select.element.nextSibling),e.data?this.setData(e.data):this.render(),document.addEventListener("click",this.documentClick),"auto"===this.config.showContent&&window.addEventListener("scroll",this.windowScroll,!1),e.beforeOnChange&&(this.beforeOnChange=e.beforeOnChange),e.onChange&&(this.onChange=e.onChange),e.beforeOpen&&(this.beforeOpen=e.beforeOpen),e.afterOpen&&(this.afterOpen=e.afterOpen),e.beforeClose&&(this.beforeClose=e.beforeClose),e.afterClose&&(this.afterClose=e.afterClose),this.config.isEnabled||this.disable()}t.default=i},function(e,t,i){"use strict";t.__esModule=!0,t.Config=void 0;var n=(s.prototype.searchFilter=function(e,t){return-1!==e.text.toLowerCase().indexOf(t.toLowerCase())},s);function s(e){this.id="",this.isMultiple=!1,this.isAjax=!1,this.isSearching=!1,this.showSearch=!0,this.searchFocus=!0,this.searchHighlight=!1,this.closeOnSelect=!0,this.showContent="auto",this.searchPlaceholder="Search",this.searchText="No Results",this.searchingText="Searching...",this.placeholderText="Select Value",this.allowDeselect=!1,this.allowDeselectOption=!1,this.hideSelectedOption=!1,this.deselectLabel="x",this.isEnabled=!0,this.valuesUseText=!1,this.showOptionTooltips=!1,this.selectByGroup=!1,this.limit=0,this.timeoutDelay=200,this.addToBody=!1,this.main="ss-main",this.singleSelected="ss-single-selected",this.arrow="ss-arrow",this.multiSelected="ss-multi-selected",this.add="ss-add",this.plus="ss-plus",this.values="ss-values",this.value="ss-value",this.valueText="ss-value-text",this.valueDelete="ss-value-delete",this.content="ss-content",this.open="ss-open",this.openAbove="ss-open-above",this.openBelow="ss-open-below",this.search="ss-search",this.searchHighlighter="ss-search-highlight",this.addable="ss-addable",this.list="ss-list",this.optgroup="ss-optgroup",this.optgroupLabel="ss-optgroup-label",this.optgroupLabelSelectable="ss-optgroup-label-selectable",this.option="ss-option",this.optionSelected="ss-option-selected",this.highlighted="ss-highlighted",this.disabled="ss-disabled",this.hide="ss-hide",this.id="ss-"+Math.floor(1e5*Math.random()),this.style=e.select.style.cssText,this.class=e.select.className.split(" "),this.isMultiple=e.select.multiple,this.isAjax=e.isAjax,this.showSearch=!1!==e.showSearch,this.searchFocus=!1!==e.searchFocus,this.searchHighlight=!0===e.searchHighlight,this.closeOnSelect=!1!==e.closeOnSelect,e.showContent&&(this.showContent=e.showContent),this.isEnabled=!1!==e.isEnabled,e.searchPlaceholder&&(this.searchPlaceholder=e.searchPlaceholder),e.searchText&&(this.searchText=e.searchText),e.searchingText&&(this.searchingText=e.searchingText),e.placeholderText&&(this.placeholderText=e.placeholderText),this.allowDeselect=!0===e.allowDeselect,this.allowDeselectOption=!0===e.allowDeselectOption,this.hideSelectedOption=!0===e.hideSelectedOption,e.deselectLabel&&(this.deselectLabel=e.deselectLabel),e.valuesUseText&&(this.valuesUseText=e.valuesUseText),e.showOptionTooltips&&(this.showOptionTooltips=e.showOptionTooltips),e.selectByGroup&&(this.selectByGroup=e.selectByGroup),e.limit&&(this.limit=e.limit),e.searchFilter&&(this.searchFilter=e.searchFilter),null!=e.timeoutDelay&&(this.timeoutDelay=e.timeoutDelay),this.addToBody=!0===e.addToBody}t.Config=n},function(e,t,i){"use strict";t.__esModule=!0,t.Select=void 0;var n=i(0),i=(s.prototype.setValue=function(){if(this.main.data.getSelected()){if(this.main.config.isMultiple)for(var e=this.main.data.getSelected(),t=0,i=this.element.options;t<i.length;t++){var n=i[t];n.selected=!1;for(var s=0,a=e;s<a.length;s++)a[s].value===n.value&&(n.selected=!0)}else{e=this.main.data.getSelected();this.element.value=e?e.value:""}this.main.data.isOnChangeEnabled=!1,this.element.dispatchEvent(new CustomEvent("change",{bubbles:!0})),this.main.data.isOnChangeEnabled=!0}},s.prototype.addAttributes=function(){this.element.tabIndex=-1,this.element.style.display="none",this.element.dataset.ssid=this.main.config.id,this.element.setAttribute("aria-hidden","true")},s.prototype.addEventListeners=function(){var t=this;this.element.addEventListener("change",function(e){t.main.data.setSelectedFromSelect(),t.main.render()})},s.prototype.addMutationObserver=function(){var t=this;this.main.config.isAjax||(this.mutationObserver=new MutationObserver(function(e){t.triggerMutationObserver&&(t.main.data.parseSelectData(),t.main.data.setSelectedFromSelect(),t.main.render(),e.forEach(function(e){"class"===e.attributeName&&t.main.slim.updateContainerDivClass(t.main.slim.container)}))}),this.observeMutationObserver())},s.prototype.observeMutationObserver=function(){this.mutationObserver&&this.mutationObserver.observe(this.element,{attributes:!0,childList:!0,characterData:!0})},s.prototype.disconnectMutationObserver=function(){this.mutationObserver&&this.mutationObserver.disconnect()},s.prototype.create=function(e){this.element.innerHTML="";for(var t=0,i=e;t<i.length;t++){var n=i[t];if(n.hasOwnProperty("options")){var s=n,a=document.createElement("optgroup");if(a.label=s.label,s.options)for(var o=0,l=s.options;o<l.length;o++){var r=l[o];a.appendChild(this.createOption(r))}this.element.appendChild(a)}else this.element.appendChild(this.createOption(n))}},s.prototype.createOption=function(t){var i=document.createElement("option");return i.value=""!==t.value?t.value:t.text,i.innerHTML=t.innerHTML||t.text,t.selected&&(i.selected=t.selected),!1===t.display&&(i.style.display="none"),t.disabled&&(i.disabled=!0),t.placeholder&&i.setAttribute("data-placeholder","true"),t.mandatory&&i.setAttribute("data-mandatory","true"),t.class&&t.class.split(" ").forEach(function(e){i.classList.add(e)}),t.data&&"object"==typeof t.data&&Object.keys(t.data).forEach(function(e){i.setAttribute("data-"+(0,n.kebabCase)(e),t.data[e])}),i},s);function s(e){this.triggerMutationObserver=!0,this.element=e.select,this.main=e.main,this.element.disabled&&(this.main.config.isEnabled=!1),this.addAttributes(),this.addEventListeners(),this.mutationObserver=null,this.addMutationObserver(),this.element.slim=e.main}t.Select=i},function(e,t,i){"use strict";t.__esModule=!0,t.Slim=void 0;var n=i(0),o=i(1),i=(s.prototype.containerDiv=function(){var e=document.createElement("div");return e.style.cssText=this.main.config.style,this.updateContainerDivClass(e),e},s.prototype.updateContainerDivClass=function(e){this.main.config.class=this.main.select.element.className.split(" "),e.className="",e.classList.add(this.main.config.id),e.classList.add(this.main.config.main);for(var t=0,i=this.main.config.class;t<i.length;t++){var n=i[t];""!==n.trim()&&e.classList.add(n)}},s.prototype.singleSelectedDiv=function(){var t=this,e=document.createElement("div");e.classList.add(this.main.config.singleSelected);var i=document.createElement("span");i.classList.add("placeholder"),e.appendChild(i);var n=document.createElement("span");n.innerHTML=this.main.config.deselectLabel,n.classList.add("ss-deselect"),n.onclick=function(e){e.stopPropagation(),t.main.config.isEnabled&&t.main.set("")},e.appendChild(n);var s=document.createElement("span");s.classList.add(this.main.config.arrow);var a=document.createElement("span");return a.classList.add("arrow-down"),s.appendChild(a),e.appendChild(s),e.onclick=function(){t.main.config.isEnabled&&(t.main.data.contentOpen?t.main.close():t.main.open())},{container:e,placeholder:i,deselect:n,arrowIcon:{container:s,arrow:a}}},s.prototype.placeholder=function(){var e,t=this.main.data.getSelected();null===t||t&&t.placeholder?((e=document.createElement("span")).classList.add(this.main.config.disabled),e.innerHTML=this.main.config.placeholderText,this.singleSelected&&(this.singleSelected.placeholder.innerHTML=e.outerHTML)):(e="",t&&(e=t.innerHTML&&!0!==this.main.config.valuesUseText?t.innerHTML:t.text),this.singleSelected&&(this.singleSelected.placeholder.innerHTML=t?e:""))},s.prototype.deselect=function(){this.singleSelected&&(!this.main.config.allowDeselect||""===this.main.selected()?this.singleSelected.deselect.classList.add("ss-hide"):this.singleSelected.deselect.classList.remove("ss-hide"))},s.prototype.multiSelectedDiv=function(){var t=this,e=document.createElement("div");e.classList.add(this.main.config.multiSelected);var i=document.createElement("div");i.classList.add(this.main.config.values),e.appendChild(i);var n=document.createElement("div");n.classList.add(this.main.config.add);var s=document.createElement("span");return s.classList.add(this.main.config.plus),s.onclick=function(e){t.main.data.contentOpen&&(t.main.close(),e.stopPropagation())},n.appendChild(s),e.appendChild(n),e.onclick=function(e){t.main.config.isEnabled&&(e.target.classList.contains(t.main.config.valueDelete)||(t.main.data.contentOpen?t.main.close():t.main.open()))},{container:e,values:i,add:n,plus:s}},s.prototype.values=function(){if(this.multiSelected){for(var e=this.multiSelected.values.childNodes,t=this.main.data.getSelected(),i=[],n=0,s=e;n<s.length;n++){for(var a=s[n],o=!0,l=0,r=t;l<r.length;l++){var c=r[l];String(c.id)===String(a.dataset.id)&&(o=!1)}o&&i.push(a)}for(var d=0,h=i;d<h.length;d++){var u=h[d];u.classList.add("ss-out"),this.multiSelected.values.removeChild(u)}for(var p,e=this.multiSelected.values.childNodes,c=0;c<t.length;c++){o=!1;for(var m=0,f=e;m<f.length;m++){a=f[m];String(t[c].id)===String(a.dataset.id)&&(o=!0)}o||(0!==e.length&&HTMLElement.prototype.insertAdjacentElement?0===c?this.multiSelected.values.insertBefore(this.valueDiv(t[c]),e[c]):e[c-1].insertAdjacentElement("afterend",this.valueDiv(t[c])):this.multiSelected.values.appendChild(this.valueDiv(t[c])))}0===t.length&&((p=document.createElement("span")).classList.add(this.main.config.disabled),p.innerHTML=this.main.config.placeholderText,this.multiSelected.values.innerHTML=p.outerHTML)}},s.prototype.valueDiv=function(s){var a=this,e=document.createElement("div");e.classList.add(this.main.config.value),e.dataset.id=s.id;var t=document.createElement("span");return t.classList.add(this.main.config.valueText),t.innerHTML=s.innerHTML&&!0!==this.main.config.valuesUseText?s.innerHTML:s.text,e.appendChild(t),s.mandatory||((t=document.createElement("span")).classList.add(this.main.config.valueDelete),t.innerHTML=this.main.config.deselectLabel,t.onclick=function(e){e.preventDefault(),e.stopPropagation();var t=!1;if(a.main.beforeOnChange||(t=!0),a.main.beforeOnChange){for(var e=a.main.data.getSelected(),i=JSON.parse(JSON.stringify(e)),n=0;n<i.length;n++)i[n].id===s.id&&i.splice(n,1);!1!==a.main.beforeOnChange(i)&&(t=!0)}t&&(a.main.data.removeFromSelected(s.id,"id"),a.main.render(),a.main.select.setValue(),a.main.data.onDataChange())},e.appendChild(t)),e},s.prototype.contentDiv=function(){var e=document.createElement("div");return e.classList.add(this.main.config.content),e},s.prototype.searchDiv=function(){var n=this,e=document.createElement("div"),s=document.createElement("input"),a=document.createElement("div");e.classList.add(this.main.config.search);var t={container:e,input:s};return this.main.config.showSearch||(e.classList.add(this.main.config.hide),s.readOnly=!0),s.type="search",s.placeholder=this.main.config.searchPlaceholder,s.tabIndex=0,s.setAttribute("aria-label",this.main.config.searchPlaceholder),s.setAttribute("autocapitalize","off"),s.setAttribute("autocomplete","off"),s.setAttribute("autocorrect","off"),s.onclick=function(e){setTimeout(function(){""===e.target.value&&n.main.search("")},10)},s.onkeydown=function(e){"ArrowUp"===e.key?(n.main.open(),n.highlightUp(),e.preventDefault()):"ArrowDown"===e.key?(n.main.open(),n.highlightDown(),e.preventDefault()):"Tab"===e.key?n.main.data.contentOpen?n.main.close():setTimeout(function(){n.main.close()},n.main.config.timeoutDelay):"Enter"===e.key&&e.preventDefault()},s.onkeyup=function(e){var t=e.target;if("Enter"===e.key){if(n.main.addable&&e.ctrlKey)return a.click(),e.preventDefault(),void e.stopPropagation();var i=n.list.querySelector("."+n.main.config.highlighted);i&&i.click()}else"ArrowUp"===e.key||"ArrowDown"===e.key||("Escape"===e.key?n.main.close():n.main.config.showSearch&&n.main.data.contentOpen?n.main.search(t.value):s.value="");e.preventDefault(),e.stopPropagation()},s.onfocus=function(){n.main.open()},e.appendChild(s),this.main.addable&&(a.classList.add(this.main.config.addable),a.innerHTML="+",a.onclick=function(e){var t;n.main.addable&&(e.preventDefault(),e.stopPropagation(),""!==(e=n.search.input.value).trim()?(e=n.main.addable(e),t="",e&&("object"==typeof e?(0,o.validateOption)(e)&&(n.main.addData(e),t=e.value||e.text):(n.main.addData(n.main.data.newOption({text:e,value:e})),t=e),n.main.search(""),setTimeout(function(){n.main.set(t,"value",!1,!1)},100),n.main.config.closeOnSelect&&setTimeout(function(){n.main.close()},100))):n.search.input.focus())},e.appendChild(a),t.addable=a),t},s.prototype.highlightUp=function(){var e=this.list.querySelector("."+this.main.config.highlighted),t=null;if(e)for(t=e.previousSibling;null!==t&&t.classList.contains(this.main.config.disabled);)t=t.previousSibling;else var i=this.list.querySelectorAll("."+this.main.config.option+":not(."+this.main.config.disabled+")"),t=i[i.length-1];null!==(t=t&&t.classList.contains(this.main.config.optgroupLabel)?null:t)||(i=e.parentNode).classList.contains(this.main.config.optgroup)&&(!i.previousSibling||(i=i.previousSibling.querySelectorAll("."+this.main.config.option+":not(."+this.main.config.disabled+")")).length&&(t=i[i.length-1])),t&&(e&&e.classList.remove(this.main.config.highlighted),t.classList.add(this.main.config.highlighted),(0,n.ensureElementInView)(this.list,t))},s.prototype.highlightDown=function(){var e,t=this.list.querySelector("."+this.main.config.highlighted),i=null;if(t)for(i=t.nextSibling;null!==i&&i.classList.contains(this.main.config.disabled);)i=i.nextSibling;else i=this.list.querySelector("."+this.main.config.option+":not(."+this.main.config.disabled+")");null!==i||null===t||(e=t.parentNode).classList.contains(this.main.config.optgroup)&&e.nextSibling&&(i=e.nextSibling.querySelector("."+this.main.config.option+":not(."+this.main.config.disabled+")")),i&&(t&&t.classList.remove(this.main.config.highlighted),i.classList.add(this.main.config.highlighted),(0,n.ensureElementInView)(this.list,i))},s.prototype.listDiv=function(){var e=document.createElement("div");return e.classList.add(this.main.config.list),e.setAttribute("role","listbox"),e},s.prototype.options=function(e){void 0===e&&(e="");var t=this.main.data.filtered||this.main.data.data;if((this.list.innerHTML="")!==e)return(i=document.createElement("div")).classList.add(this.main.config.option),i.classList.add(this.main.config.disabled),i.innerHTML=e,void this.list.appendChild(i);if(this.main.config.isAjax&&this.main.config.isSearching)return(i=document.createElement("div")).classList.add(this.main.config.option),i.classList.add(this.main.config.disabled),i.innerHTML=this.main.config.searchingText,void this.list.appendChild(i);if(0===t.length){var i=document.createElement("div");return i.classList.add(this.main.config.option),i.classList.add(this.main.config.disabled),i.innerHTML=this.main.config.searchText,void this.list.appendChild(i)}for(var r=this,n=0,s=t;n<s.length;n++)!function(e){if(e.hasOwnProperty("label")){var t=e,s=document.createElement("div");s.classList.add(r.main.config.optgroup);var i=document.createElement("div");i.classList.add(r.main.config.optgroupLabel),r.main.config.selectByGroup&&r.main.config.isMultiple&&i.classList.add(r.main.config.optgroupLabelSelectable),i.innerHTML=t.label,s.appendChild(i);t=t.options;if(t){for(var a,n=0,o=t;n<o.length;n++){var l=o[n];s.appendChild(r.option(l))}r.main.config.selectByGroup&&r.main.config.isMultiple&&(a=r,i.addEventListener("click",function(e){e.preventDefault(),e.stopPropagation();for(var t=0,i=s.children;t<i.length;t++){var n=i[t];-1!==n.className.indexOf(a.main.config.option)&&n.click()}}))}r.list.appendChild(s)}else r.list.appendChild(r.option(e))}(s[n])},s.prototype.option=function(o){if(o.placeholder){var e=document.createElement("div");return e.classList.add(this.main.config.option),e.classList.add(this.main.config.hide),e}var t=document.createElement("div");t.classList.add(this.main.config.option),t.setAttribute("role","option"),o.class&&o.class.split(" ").forEach(function(e){t.classList.add(e)}),o.style&&(t.style.cssText=o.style);var l=this.main.data.getSelected();t.dataset.id=o.id,this.main.config.searchHighlight&&this.main.slim&&o.innerHTML&&""!==this.main.slim.search.input.value.trim()?t.innerHTML=(0,n.highlight)(o.innerHTML,this.main.slim.search.input.value,this.main.config.searchHighlighter):o.innerHTML&&(t.innerHTML=o.innerHTML),this.main.config.showOptionTooltips&&t.textContent&&t.setAttribute("title",t.textContent);var r=this;t.addEventListener("click",function(e){e.preventDefault(),e.stopPropagation();var t=this.dataset.id;if(!0===o.selected&&r.main.config.allowDeselectOption){var i=!1;if(r.main.beforeOnChange&&r.main.config.isMultiple||(i=!0),r.main.beforeOnChange&&r.main.config.isMultiple){for(var n=r.main.data.getSelected(),s=JSON.parse(JSON.stringify(n)),a=0;a<s.length;a++)s[a].id===t&&s.splice(a,1);!1!==r.main.beforeOnChange(s)&&(i=!0)}i&&(r.main.config.isMultiple?(r.main.data.removeFromSelected(t,"id"),r.main.render(),r.main.select.setValue(),r.main.data.onDataChange()):r.main.set(""))}else o.disabled||o.selected||r.main.config.limit&&Array.isArray(l)&&r.main.config.limit<=l.length||(r.main.beforeOnChange?(n=void 0,(i=JSON.parse(JSON.stringify(r.main.data.getObjectFromData(t)))).selected=!0,r.main.config.isMultiple?(n=JSON.parse(JSON.stringify(l))).push(i):n=JSON.parse(JSON.stringify(i)),!1!==r.main.beforeOnChange(n)&&r.main.set(t,"id",r.main.config.closeOnSelect)):r.main.set(t,"id",r.main.config.closeOnSelect))});e=l&&(0,n.isValueInArrayOfObjects)(l,"id",o.id);return(o.disabled||e)&&(t.onclick=null,r.main.config.allowDeselectOption||t.classList.add(this.main.config.disabled),r.main.config.hideSelectedOption&&t.classList.add(this.main.config.hide)),e?t.classList.add(this.main.config.optionSelected):t.classList.remove(this.main.config.optionSelected),t},s);function s(e){this.main=e.main,this.container=this.containerDiv(),this.content=this.contentDiv(),this.search=this.searchDiv(),this.list=this.listDiv(),this.options(),this.singleSelected=null,this.multiSelected=null,this.main.config.isMultiple?(this.multiSelected=this.multiSelectedDiv(),this.multiSelected&&this.container.appendChild(this.multiSelected.container)):(this.singleSelected=this.singleSelectedDiv(),this.container.appendChild(this.singleSelected.container)),this.main.config.addToBody?(this.content.classList.add(this.main.config.id),document.body.appendChild(this.content)):this.container.appendChild(this.content),this.content.appendChild(this.search.container),this.content.appendChild(this.list)}t.Slim=i}],s.c=n,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=2).default;function s(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return i[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}var i,n});/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (exports.SlimSelect);

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayLikeToArray)
/* harmony export */ });
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayWithoutHoles)
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arr);
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ "../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ "../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js");

function _defineProperty(obj, key, value) {
  key = (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/iterableToArray.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _iterableToArray)
/* harmony export */ });
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _nonIterableSpread)
/* harmony export */ });
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _toConsumableArray)
/* harmony export */ });
/* harmony import */ var _arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithoutHoles.js */ "../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js");
/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ "../node_modules/@babel/runtime/helpers/esm/iterableToArray.js");
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");
/* harmony import */ var _nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableSpread.js */ "../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js");




function _toConsumableArray(arr) {
  return (0,_arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(arr) || (0,_nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__["default"])();
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/toPrimitive.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/toPrimitive.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _toPrimitive)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "../node_modules/@babel/runtime/helpers/esm/typeof.js");

function _toPrimitive(input, hint) {
  if ((0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if ((0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _toPropertyKey)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "../node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPrimitive.js */ "../node_modules/@babel/runtime/helpers/esm/toPrimitive.js");


function _toPropertyKey(arg) {
  var key = (0,_toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__["default"])(arg, "string");
  return (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(key) === "symbol" ? key : String(key);
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _unsupportedIterableToArray)
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
}

/***/ }),

/***/ "../node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Browser)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/createClass.js");



var arr = [];
var each = arr.forEach;
var slice = arr.slice;
function defaults(obj) {
  each.call(slice.call(arguments, 1), function (source) {
    if (source) {
      for (var prop in source) {
        if (obj[prop] === undefined) obj[prop] = source[prop];
      }
    }
  });
  return obj;
}

// eslint-disable-next-line no-control-regex
var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
var serializeCookie = function serializeCookie(name, val, options) {
  var opt = options || {};
  opt.path = opt.path || '/';
  var value = encodeURIComponent(val);
  var str = "".concat(name, "=").concat(value);
  if (opt.maxAge > 0) {
    var maxAge = opt.maxAge - 0;
    if (Number.isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += "; Max-Age=".concat(Math.floor(maxAge));
  }
  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }
    str += "; Domain=".concat(opt.domain);
  }
  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }
    str += "; Path=".concat(opt.path);
  }
  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }
    str += "; Expires=".concat(opt.expires.toUTCString());
  }
  if (opt.httpOnly) str += '; HttpOnly';
  if (opt.secure) str += '; Secure';
  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;
    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      case 'none':
        str += '; SameSite=None';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }
  return str;
};
var cookie = {
  create: function create(name, value, minutes, domain) {
    var cookieOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      path: '/',
      sameSite: 'strict'
    };
    if (minutes) {
      cookieOptions.expires = new Date();
      cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1000);
    }
    if (domain) cookieOptions.domain = domain;
    document.cookie = serializeCookie(name, encodeURIComponent(value), cookieOptions);
  },
  read: function read(name) {
    var nameEQ = "".concat(name, "=");
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  },
  remove: function remove(name) {
    this.create(name, '', -1);
  }
};
var cookie$1 = {
  name: 'cookie',
  lookup: function lookup(options) {
    var found;
    if (options.lookupCookie && typeof document !== 'undefined') {
      var c = cookie.read(options.lookupCookie);
      if (c) found = c;
    }
    return found;
  },
  cacheUserLanguage: function cacheUserLanguage(lng, options) {
    if (options.lookupCookie && typeof document !== 'undefined') {
      cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain, options.cookieOptions);
    }
  }
};

var querystring = {
  name: 'querystring',
  lookup: function lookup(options) {
    var found;
    if (typeof window !== 'undefined') {
      var search = window.location.search;
      if (!window.location.search && window.location.hash && window.location.hash.indexOf('?') > -1) {
        search = window.location.hash.substring(window.location.hash.indexOf('?'));
      }
      var query = search.substring(1);
      var params = query.split('&');
      for (var i = 0; i < params.length; i++) {
        var pos = params[i].indexOf('=');
        if (pos > 0) {
          var key = params[i].substring(0, pos);
          if (key === options.lookupQuerystring) {
            found = params[i].substring(pos + 1);
          }
        }
      }
    }
    return found;
  }
};

var hasLocalStorageSupport = null;
var localStorageAvailable = function localStorageAvailable() {
  if (hasLocalStorageSupport !== null) return hasLocalStorageSupport;
  try {
    hasLocalStorageSupport = window !== 'undefined' && window.localStorage !== null;
    var testKey = 'i18next.translate.boo';
    window.localStorage.setItem(testKey, 'foo');
    window.localStorage.removeItem(testKey);
  } catch (e) {
    hasLocalStorageSupport = false;
  }
  return hasLocalStorageSupport;
};
var localStorage = {
  name: 'localStorage',
  lookup: function lookup(options) {
    var found;
    if (options.lookupLocalStorage && localStorageAvailable()) {
      var lng = window.localStorage.getItem(options.lookupLocalStorage);
      if (lng) found = lng;
    }
    return found;
  },
  cacheUserLanguage: function cacheUserLanguage(lng, options) {
    if (options.lookupLocalStorage && localStorageAvailable()) {
      window.localStorage.setItem(options.lookupLocalStorage, lng);
    }
  }
};

var hasSessionStorageSupport = null;
var sessionStorageAvailable = function sessionStorageAvailable() {
  if (hasSessionStorageSupport !== null) return hasSessionStorageSupport;
  try {
    hasSessionStorageSupport = window !== 'undefined' && window.sessionStorage !== null;
    var testKey = 'i18next.translate.boo';
    window.sessionStorage.setItem(testKey, 'foo');
    window.sessionStorage.removeItem(testKey);
  } catch (e) {
    hasSessionStorageSupport = false;
  }
  return hasSessionStorageSupport;
};
var sessionStorage = {
  name: 'sessionStorage',
  lookup: function lookup(options) {
    var found;
    if (options.lookupSessionStorage && sessionStorageAvailable()) {
      var lng = window.sessionStorage.getItem(options.lookupSessionStorage);
      if (lng) found = lng;
    }
    return found;
  },
  cacheUserLanguage: function cacheUserLanguage(lng, options) {
    if (options.lookupSessionStorage && sessionStorageAvailable()) {
      window.sessionStorage.setItem(options.lookupSessionStorage, lng);
    }
  }
};

var navigator$1 = {
  name: 'navigator',
  lookup: function lookup(options) {
    var found = [];
    if (typeof navigator !== 'undefined') {
      if (navigator.languages) {
        // chrome only; not an array, so can't use .push.apply instead of iterating
        for (var i = 0; i < navigator.languages.length; i++) {
          found.push(navigator.languages[i]);
        }
      }
      if (navigator.userLanguage) {
        found.push(navigator.userLanguage);
      }
      if (navigator.language) {
        found.push(navigator.language);
      }
    }
    return found.length > 0 ? found : undefined;
  }
};

var htmlTag = {
  name: 'htmlTag',
  lookup: function lookup(options) {
    var found;
    var htmlTag = options.htmlTag || (typeof document !== 'undefined' ? document.documentElement : null);
    if (htmlTag && typeof htmlTag.getAttribute === 'function') {
      found = htmlTag.getAttribute('lang');
    }
    return found;
  }
};

var path = {
  name: 'path',
  lookup: function lookup(options) {
    var found;
    if (typeof window !== 'undefined') {
      var language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
      if (language instanceof Array) {
        if (typeof options.lookupFromPathIndex === 'number') {
          if (typeof language[options.lookupFromPathIndex] !== 'string') {
            return undefined;
          }
          found = language[options.lookupFromPathIndex].replace('/', '');
        } else {
          found = language[0].replace('/', '');
        }
      }
    }
    return found;
  }
};

var subdomain = {
  name: 'subdomain',
  lookup: function lookup(options) {
    // If given get the subdomain index else 1
    var lookupFromSubdomainIndex = typeof options.lookupFromSubdomainIndex === 'number' ? options.lookupFromSubdomainIndex + 1 : 1;
    // get all matches if window.location. is existing
    // first item of match is the match itself and the second is the first group macht which sould be the first subdomain match
    // is the hostname no public domain get the or option of localhost
    var language = typeof window !== 'undefined' && window.location && window.location.hostname && window.location.hostname.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);

    // if there is no match (null) return undefined
    if (!language) return undefined;
    // return the given group match
    return language[lookupFromSubdomainIndex];
  }
};

function getDefaults() {
  return {
    order: ['querystring', 'cookie', 'localStorage', 'sessionStorage', 'navigator', 'htmlTag'],
    lookupQuerystring: 'lng',
    lookupCookie: 'i18next',
    lookupLocalStorage: 'i18nextLng',
    lookupSessionStorage: 'i18nextLng',
    // cache user language
    caches: ['localStorage'],
    excludeCacheFor: ['cimode'],
    // cookieMinutes: 10,
    // cookieDomain: 'myDomain'

    convertDetectedLanguage: function convertDetectedLanguage(l) {
      return l;
    }
  };
}
var Browser = /*#__PURE__*/function () {
  function Browser(services) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Browser);
    this.type = 'languageDetector';
    this.detectors = {};
    this.init(services, options);
  }
  (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Browser, [{
    key: "init",
    value: function init(services) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var i18nOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.services = services || {
        languageUtils: {}
      }; // this way the language detector can be used without i18next
      this.options = defaults(options, this.options || {}, getDefaults());
      if (typeof this.options.convertDetectedLanguage === 'string' && this.options.convertDetectedLanguage.indexOf('15897') > -1) {
        this.options.convertDetectedLanguage = function (l) {
          return l.replace('-', '_');
        };
      }

      // backwards compatibility
      if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
      this.i18nOptions = i18nOptions;
      this.addDetector(cookie$1);
      this.addDetector(querystring);
      this.addDetector(localStorage);
      this.addDetector(sessionStorage);
      this.addDetector(navigator$1);
      this.addDetector(htmlTag);
      this.addDetector(path);
      this.addDetector(subdomain);
    }
  }, {
    key: "addDetector",
    value: function addDetector(detector) {
      this.detectors[detector.name] = detector;
    }
  }, {
    key: "detect",
    value: function detect(detectionOrder) {
      var _this = this;
      if (!detectionOrder) detectionOrder = this.options.order;
      var detected = [];
      detectionOrder.forEach(function (detectorName) {
        if (_this.detectors[detectorName]) {
          var lookup = _this.detectors[detectorName].lookup(_this.options);
          if (lookup && typeof lookup === 'string') lookup = [lookup];
          if (lookup) detected = detected.concat(lookup);
        }
      });
      detected = detected.map(function (d) {
        return _this.options.convertDetectedLanguage(d);
      });
      if (this.services.languageUtils.getBestMatchFromCodes) return detected; // new i18next v19.5.0
      return detected.length > 0 ? detected[0] : null; // a little backward compatibility
    }
  }, {
    key: "cacheUserLanguage",
    value: function cacheUserLanguage(lng, caches) {
      var _this2 = this;
      if (!caches) caches = this.options.caches;
      if (!caches) return;
      if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;
      caches.forEach(function (cacheName) {
        if (_this2.detectors[cacheName]) _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);
      });
    }
  }]);
  return Browser;
}();
Browser.type = 'languageDetector';




/***/ }),

/***/ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

/***/ }),

/***/ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/toPrimitive.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/toPrimitive.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toPrimitive)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/typeof.js");

function toPrimitive(t, r) {
  if ("object" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

/***/ }),

/***/ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toPropertyKey)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPrimitive.js */ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/toPrimitive.js");


function toPropertyKey(t) {
  var i = (0,_toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__["default"])(t, "string");
  return "symbol" == (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(i) ? i : String(i);
}

/***/ }),

/***/ "../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/i18next-browser-languagedetector/node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

/***/ }),

/***/ "../node_modules/i18next/dist/esm/i18next.js":
/*!***************************************************!*\
  !*** ../node_modules/i18next/dist/esm/i18next.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   changeLanguage: () => (/* binding */ changeLanguage),
/* harmony export */   createInstance: () => (/* binding */ createInstance),
/* harmony export */   "default": () => (/* binding */ instance),
/* harmony export */   dir: () => (/* binding */ dir),
/* harmony export */   exists: () => (/* binding */ exists),
/* harmony export */   getFixedT: () => (/* binding */ getFixedT),
/* harmony export */   hasLoadedNamespace: () => (/* binding */ hasLoadedNamespace),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   loadLanguages: () => (/* binding */ loadLanguages),
/* harmony export */   loadNamespaces: () => (/* binding */ loadNamespaces),
/* harmony export */   loadResources: () => (/* binding */ loadResources),
/* harmony export */   reloadResources: () => (/* binding */ reloadResources),
/* harmony export */   setDefaultNamespace: () => (/* binding */ setDefaultNamespace),
/* harmony export */   t: () => (/* binding */ t),
/* harmony export */   use: () => (/* binding */ use)
/* harmony export */ });
const consoleLogger = {
  type: 'logger',
  log(args) {
    this.output('log', args);
  },
  warn(args) {
    this.output('warn', args);
  },
  error(args) {
    this.output('error', args);
  },
  output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};
class Logger {
  constructor(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.init(concreteLogger, options);
  }
  init(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.prefix = options.prefix || 'i18next:';
    this.logger = concreteLogger || consoleLogger;
    this.options = options;
    this.debug = options.debug;
  }
  log() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return this.forward(args, 'log', '', true);
  }
  warn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.forward(args, 'warn', '', true);
  }
  error() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.forward(args, 'error', '');
  }
  deprecate() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return null;
    if (typeof args[0] === 'string') args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options) {
    options = options || this.options;
    options.prefix = options.prefix || this.prefix;
    return new Logger(this.logger, options);
  }
}
var baseLogger = new Logger();

class EventEmitter {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(' ').forEach(event => {
      this.observers[event] = this.observers[event] || [];
      this.observers[event].push(listener);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event]) return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event] = this.observers[event].filter(l => l !== listener);
  }
  emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (this.observers[event]) {
      const cloned = [].concat(this.observers[event]);
      cloned.forEach(observer => {
        observer(...args);
      });
    }
    if (this.observers['*']) {
      const cloned = [].concat(this.observers['*']);
      cloned.forEach(observer => {
        observer.apply(observer, [event, ...args]);
      });
    }
  }
}

function defer() {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null) return '';
  return '' + object;
}
function copy(a, s, t) {
  a.forEach(m => {
    if (s[m]) t[m] = s[m];
  });
}
function getLastOfPath(object, path, Empty) {
  function cleanKey(key) {
    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
  }
  function canNotTraverseDeeper() {
    return !object || typeof object === 'string';
  }
  const stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    const key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
  }
  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}
function setPath(object, path, newValue) {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
  const {
    obj,
    k
  } = getLastOfPath(object, path, Object);
  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object, path) {
  const {
    obj,
    k
  } = getLastOfPath(object, path);
  if (!obj) return undefined;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  const value = getPath(data, key);
  if (value !== undefined) {
    return value;
  }
  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (const prop in source) {
    if (prop !== '__proto__' && prop !== 'constructor') {
      if (prop in target) {
        if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
var _entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;'
};
function escape(data) {
  if (typeof data === 'string') {
    return data.replace(/[&<>"'\/]/g, s => _entityMap[s]);
  }
  return data;
}
const chars = [' ', ',', '?', '!', ';'];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || '';
  keySeparator = keySeparator || '';
  const possibleChars = chars.filter(c => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
  if (possibleChars.length === 0) return true;
  const r = new RegExp(`(${possibleChars.map(c => c === '?' ? '\\?' : c).join('|')})`);
  let matched = !r.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
}
function deepFind(obj, path) {
  let keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
  if (!obj) return undefined;
  if (obj[path]) return obj[path];
  const paths = path.split(keySeparator);
  let current = obj;
  for (let i = 0; i < paths.length; ++i) {
    if (!current) return undefined;
    if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {
      return undefined;
    }
    if (current[paths[i]] === undefined) {
      let j = 2;
      let p = paths.slice(i, i + j).join(keySeparator);
      let mix = current[p];
      while (mix === undefined && paths.length > i + j) {
        j++;
        p = paths.slice(i, i + j).join(keySeparator);
        mix = current[p];
      }
      if (mix === undefined) return undefined;
      if (mix === null) return null;
      if (path.endsWith(p)) {
        if (typeof mix === 'string') return mix;
        if (p && typeof mix[p] === 'string') return mix[p];
      }
      const joinedPath = paths.slice(i + j).join(keySeparator);
      if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
      return undefined;
    }
    current = current[paths[i]];
  }
  return current;
}
function getCleanedCode(code) {
  if (code && code.indexOf('_') > 0) return code.replace('_', '-');
  return code;
}

class ResourceStore extends EventEmitter {
  constructor(data) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      ns: ['translation'],
      defaultNS: 'translation'
    };
    super();
    this.data = data || {};
    this.options = options;
    if (this.options.keySeparator === undefined) {
      this.options.keySeparator = '.';
    }
    if (this.options.ignoreJSONStructure === undefined) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  }
  removeNamespaces(ns) {
    const index = this.options.ns.indexOf(ns);
    if (index > -1) {
      this.options.ns.splice(index, 1);
    }
  }
  getResource(lng, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path = [lng, ns];
    if (key && typeof key !== 'string') path = path.concat(key);
    if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
    }
    const result = getPath(this.data, path);
    if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
    return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
  }
  addResource(lng, ns, key, value) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      silent: false
    };
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    let path = [lng, ns];
    if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      value = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    setPath(this.data, path, value);
    if (!options.silent) this.emit('added', lng, ns, key, value);
  }
  addResources(lng, ns, resources) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
      silent: false
    };
    for (const m in resources) {
      if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
        silent: true
      });
    }
    if (!options.silent) this.emit('added', lng, ns, resources);
  }
  addResourceBundle(lng, ns, resources, deep, overwrite) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
      silent: false
    };
    let path = [lng, ns];
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      deep = resources;
      resources = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    let pack = getPath(this.data, path) || {};
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path, pack);
    if (!options.silent) this.emit('added', lng, ns, resources);
  }
  removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);
    this.emit('removed', lng, ns);
  }
  hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== undefined;
  }
  getResourceBundle(lng, ns) {
    if (!ns) ns = this.options.defaultNS;
    if (this.options.compatibilityAPI === 'v1') return {
      ...{},
      ...this.getResource(lng, ns)
    };
    return this.getResource(lng, ns);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n = data && Object.keys(data) || [];
    return !!n.find(v => data[v] && Object.keys(data[v]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}

var postProcessor = {
  processors: {},
  addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle(processors, value, key, options, translator) {
    processors.forEach(processor => {
      if (this.processors[processor]) value = this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};

const checkedLoadedFor = {};
class Translator extends EventEmitter {
  constructor(services) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super();
    copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, this);
    this.options = options;
    if (this.options.keySeparator === undefined) {
      this.options.keySeparator = '.';
    }
    this.logger = baseLogger.create('translator');
  }
  changeLanguage(lng) {
    if (lng) this.language = lng;
  }
  exists(key) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      interpolation: {}
    };
    if (key === undefined || key === null) {
      return false;
    }
    const resolved = this.resolve(key, options);
    return resolved && resolved.res !== undefined;
  }
  extractFromKey(key, options) {
    let nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === undefined) nsSeparator = ':';
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    let namespaces = options.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m = key.match(this.interpolator.nestingRegexp);
      if (m && m.length > 0) {
        return {
          key,
          namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    if (typeof namespaces === 'string') namespaces = [namespaces];
    return {
      key,
      namespaces
    };
  }
  translate(keys, options, lastKey) {
    if (typeof options !== 'object' && this.options.overloadTranslationOptionHandler) {
      options = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof options === 'object') options = {
      ...options
    };
    if (!options) options = {};
    if (keys === undefined || keys === null) return '';
    if (!Array.isArray(keys)) keys = [String(keys)];
    const returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
    const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys[keys.length - 1], options);
    const namespace = namespaces[namespaces.length - 1];
    const lng = options.lng || this.language;
    const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (lng && lng.toLowerCase() === 'cimode') {
      if (appendNamespaceToCIMode) {
        const nsSeparator = options.nsSeparator || this.options.nsSeparator;
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(options)
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace,
          usedParams: this.getUsedParamsDetails(options)
        };
      }
      return key;
    }
    const resolved = this.resolve(keys, options);
    let res = resolved && resolved.res;
    const resUsedKey = resolved && resolved.usedKey || key;
    const resExactUsedKey = resolved && resolved.exactUsedKey || key;
    const resType = Object.prototype.toString.apply(res);
    const noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
    const joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';
    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
      if (!options.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn('accessing an object - but returnObjects options is not enabled!');
        }
        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
          ...options,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r;
          resolved.usedParams = this.getUsedParamsDetails(options);
          return resolved;
        }
        return r;
      }
      if (keySeparator) {
        const resTypeIsArray = resType === '[object Array]';
        const copy = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m in res) {
          if (Object.prototype.hasOwnProperty.call(res, m)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m}`;
            copy[m] = this.translate(deepKey, {
              ...options,
              ...{
                joinArrays: false,
                ns: namespaces
              }
            });
            if (copy[m] === deepKey) copy[m] = res[m];
          }
        }
        res = copy;
      }
    } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
      res = res.join(joinArrays);
      if (res) res = this.extendTranslation(res, keys, options, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      const needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
      const hasDefaultValue = Translator.hasDefaultValue(options);
      const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
      const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {
        ordinal: false
      }) : '';
      const defaultValue = options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...options,
            keySeparator: false
          });
          if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
        if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
          for (let i = 0; i < fallbackLngs.length; i++) {
            lngs.push(fallbackLngs[i]);
          }
        } else if (this.options.saveMissingTo === 'all') {
          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
        } else {
          lngs.push(options.lng || this.language);
        }
        const send = (l, k, specificDefaultValue) => {
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
          } else if (this.backendConnector && this.backendConnector.saveMissing) {
            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
          }
          this.emit('missingKey', l, namespace, k, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach(language => {
              this.pluralResolver.getSuffixes(language, options).forEach(suffix => {
                send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys, options, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        if (this.options.compatibilityAPI !== 'v1') {
          res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : undefined);
        } else {
          res = this.options.parseMissingKeyHandler(res);
        }
      }
    }
    if (returnDetails) {
      resolved.res = res;
      resolved.usedParams = this.getUsedParamsDetails(options);
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, options, resolved, lastKey) {
    var _this = this;
    if (this.i18nFormat && this.i18nFormat.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...options
      }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!options.skipInterpolation) {
      if (options.interpolation) this.interpolator.init({
        ...options,
        ...{
          interpolation: {
            ...this.options.interpolation,
            ...options.interpolation
          }
        }
      });
      const skipOnVariables = typeof res === 'string' && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
      if (this.options.interpolation.defaultVariables) data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
      res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft) options.nest = false;
      }
      if (!options.lng && this.options.compatibilityAPI !== 'v1' && resolved && resolved.res) options.lng = resolved.usedLng;
      if (options.nest !== false) res = this.interpolator.nest(res, function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (lastKey && lastKey[0] === args[0] && !options.context) {
          _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
          return null;
        }
        return _this.translate(...args, key);
      }, options);
      if (options.interpolation) this.interpolator.reset();
    }
    const postProcess = options.postProcess || this.options.postProcess;
    const postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;
    if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: {
          ...resolved,
          usedParams: this.getUsedParamsDetails(options)
        },
        ...options
      } : options, this);
    }
    return res;
  }
  resolve(keys) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (typeof keys === 'string') keys = [keys];
    keys.forEach(k => {
      if (this.isValidLookup(found)) return;
      const extracted = this.extractFromKey(k, options);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
      const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
      namespaces.forEach(ns => {
        if (this.isValidLookup(found)) return;
        usedNS = ns;
        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
          checkedLoadedFor[`${codes[0]}-${ns}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes.join(', ')}" won't get resolved as namespace "${usedNS}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        }
        codes.forEach(code => {
          if (this.isValidLookup(found)) return;
          usedLng = code;
          const finalKeys = [key];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
          } else {
            let pluralSuffix;
            if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              finalKeys.push(key + pluralSuffix);
              if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator}${options.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                finalKeys.push(contextKey + pluralSuffix);
                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code, ns, possibleKey, options);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
  }
  getResource(code, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
    return this.resourceStore.getResource(code, ns, key, options);
  }
  getUsedParamsDetails() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const optionsKeys = ['defaultValue', 'ordinal', 'context', 'replace', 'lng', 'lngs', 'fallbackLng', 'ns', 'keySeparator', 'nsSeparator', 'returnObjects', 'returnDetails', 'joinArrays', 'postProcess', 'interpolation'];
    const useOptionsReplaceForData = options.replace && typeof options.replace !== 'string';
    let data = useOptionsReplaceForData ? options.replace : options;
    if (useOptionsReplaceForData && typeof options.count !== 'undefined') {
      data.count = options.count;
    }
    if (this.options.interpolation.defaultVariables) {
      data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
    }
    if (!useOptionsReplaceForData) {
      data = {
        ...data
      };
      for (const key of optionsKeys) {
        delete data[key];
      }
    }
    return data;
  }
  static hasDefaultValue(options) {
    const prefix = 'defaultValue';
    for (const option in options) {
      if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
        return true;
      }
    }
    return false;
  }
}

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
class LanguageUtil {
  constructor(options) {
    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create('languageUtils');
  }
  getScriptPartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf('-') < 0) return null;
    const p = code.split('-');
    if (p.length === 2) return null;
    p.pop();
    if (p[p.length - 1].toLowerCase() === 'x') return null;
    return this.formatLanguageCode(p.join('-'));
  }
  getLanguagePartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf('-') < 0) return code;
    const p = code.split('-');
    return this.formatLanguageCode(p[0]);
  }
  formatLanguageCode(code) {
    if (typeof code === 'string' && code.indexOf('-') > -1) {
      const specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
      let p = code.split('-');
      if (this.options.lowerCaseLng) {
        p = p.map(part => part.toLowerCase());
      } else if (p.length === 2) {
        p[0] = p[0].toLowerCase();
        p[1] = p[1].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
      } else if (p.length === 3) {
        p[0] = p[0].toLowerCase();
        if (p[1].length === 2) p[1] = p[1].toUpperCase();
        if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
      }
      return p.join('-');
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
  }
  isSupportedCode(code) {
    if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
  }
  getBestMatchFromCodes(codes) {
    if (!codes) return null;
    let found;
    codes.forEach(code => {
      if (found) return;
      const cleanedLng = this.formatLanguageCode(code);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes.forEach(code => {
        if (found) return;
        const lngOnly = this.getLanguagePartFromCode(code);
        if (this.isSupportedCode(lngOnly)) return found = lngOnly;
        found = this.options.supportedLngs.find(supportedLng => {
          if (supportedLng === lngOnly) return supportedLng;
          if (supportedLng.indexOf('-') < 0 && lngOnly.indexOf('-') < 0) return;
          if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
        });
      });
    }
    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code) {
    if (!fallbacks) return [];
    if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
    if (typeof fallbacks === 'string') fallbacks = [fallbacks];
    if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
    if (!code) return fallbacks.default || [];
    let found = fallbacks[code];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found) found = fallbacks[this.formatLanguageCode(code)];
    if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
    if (!found) found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
    const codes = [];
    const addCode = c => {
      if (!c) return;
      if (this.isSupportedCode(c)) {
        codes.push(c);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
      }
    };
    if (typeof code === 'string' && (code.indexOf('-') > -1 || code.indexOf('_') > -1)) {
      if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
      if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
      if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
    } else if (typeof code === 'string') {
      addCode(this.formatLanguageCode(code));
    }
    fallbackCodes.forEach(fc => {
      if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
    });
    return codes;
  }
}

let sets = [{
  lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
  nr: [1],
  fc: 3
}, {
  lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ['ar'],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ['cs', 'sk'],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ['csb', 'pl'],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ['cy'],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ['fr'],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ['ga'],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ['gd'],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ['is'],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ['jv'],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ['kw'],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ['lt'],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ['lv'],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ['mk'],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ['mnk'],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ['mt'],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ['or'],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ['ro'],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ['sl'],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ['he', 'iw'],
  nr: [1, 2, 20, 21],
  fc: 22
}];
let _rulesPluralsTypes = {
  1: function (n) {
    return Number(n > 1);
  },
  2: function (n) {
    return Number(n != 1);
  },
  3: function (n) {
    return 0;
  },
  4: function (n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function (n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function (n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function (n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function (n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function (n) {
    return Number(n >= 2);
  },
  10: function (n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function (n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function (n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function (n) {
    return Number(n !== 0);
  },
  14: function (n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function (n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function (n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function (n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function (n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function (n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function (n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function (n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function (n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};
const nonIntlVersions = ['v1', 'v2', 'v3'];
const intlVersions = ['v4'];
const suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function createRules() {
  const rules = {};
  sets.forEach(set => {
    set.lngs.forEach(l => {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}
class PluralResolver {
  constructor(languageUtils) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create('pluralResolver');
    if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
      this.options.compatibilityJSON = 'v3';
      this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
    }
    this.rules = createRules();
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  getRule(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (this.shouldUseIntlApi()) {
      try {
        return new Intl.PluralRules(getCleanedCode(code), {
          type: options.ordinal ? 'ordinal' : 'cardinal'
        });
      } catch (err) {
        return;
      }
    }
    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
  }
  needsPlural(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const rule = this.getRule(code, options);
    if (this.shouldUseIntlApi()) {
      return rule && rule.resolvedOptions().pluralCategories.length > 1;
    }
    return rule && rule.numbers.length > 1;
  }
  getPluralFormsOfKey(code, key) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return this.getSuffixes(code, options).map(suffix => `${key}${suffix}`);
  }
  getSuffixes(code) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const rule = this.getRule(code, options);
    if (!rule) {
      return [];
    }
    if (this.shouldUseIntlApi()) {
      return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map(pluralCategory => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${pluralCategory}`);
    }
    return rule.numbers.map(number => this.getSuffix(code, number, options));
  }
  getSuffix(code, count) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const rule = this.getRule(code, options);
    if (rule) {
      if (this.shouldUseIntlApi()) {
        return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${rule.select(count)}`;
      }
      return this.getSuffixRetroCompatible(rule, count);
    }
    this.logger.warn(`no plural rule found for: ${code}`);
    return '';
  }
  getSuffixRetroCompatible(rule, count) {
    const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
    let suffix = rule.numbers[idx];
    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      if (suffix === 2) {
        suffix = 'plural';
      } else if (suffix === 1) {
        suffix = '';
      }
    }
    const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
    if (this.options.compatibilityJSON === 'v1') {
      if (suffix === 1) return '';
      if (typeof suffix === 'number') return `_plural_${suffix.toString()}`;
      return returnSuffix();
    } else if (this.options.compatibilityJSON === 'v2') {
      return returnSuffix();
    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      return returnSuffix();
    }
    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
  }
  shouldUseIntlApi() {
    return !nonIntlVersions.includes(this.options.compatibilityJSON);
  }
}

function deepFindWithDefaults(data, defaultData, key) {
  let keySeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';
  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  let path = getPathWithDefaults(data, defaultData, key);
  if (!path && ignoreJSONStructure && typeof key === 'string') {
    path = deepFind(data, key, keySeparator);
    if (path === undefined) path = deepFind(defaultData, key, keySeparator);
  }
  return path;
}
class Interpolator {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.logger = baseLogger.create('interpolator');
    this.options = options;
    this.format = options.interpolation && options.interpolation.format || (value => value);
    this.init(options);
  }
  init() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!options.interpolation) options.interpolation = {
      escapeValue: true
    };
    const iOpts = options.interpolation;
    this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
    this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
    this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
    this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
    this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
    this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
    this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
    this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
    this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
    this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
    this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
    this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options) this.init(this.options);
  }
  resetRegExp() {
    const regexpStr = `${this.prefix}(.+?)${this.suffix}`;
    this.regexp = new RegExp(regexpStr, 'g');
    const regexpUnescapeStr = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;
    this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
    const nestingRegexpStr = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;
    this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
  }
  interpolate(str, data, lng, options) {
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    function regexSafe(val) {
      return val.replace(/\$/g, '$$$$');
    }
    const handleFormat = key => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path, undefined, lng, {
          ...options,
          ...data,
          interpolationkey: key
        }) : path;
      }
      const p = key.split(this.formatSeparator);
      const k = p.shift().trim();
      const f = p.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
        ...options,
        ...data,
        interpolationkey: k
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
    const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: val => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: val => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach(todo => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === undefined) {
          if (typeof missingInterpolationHandler === 'function') {
            const temp = missingInterpolationHandler(str, match, options);
            value = typeof temp === 'string' ? temp : '';
          } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
            value = '';
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = '';
          }
        } else if (typeof value !== 'string' && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let match;
    let value;
    let clonedOptions;
    function handleHasOptions(key, inheritedOptions) {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0) return key;
      const c = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c[1]}`;
      key = c[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions) clonedOptions = {
          ...inheritedOptions,
          ...clonedOptions
        };
      } catch (e) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
        return `${key}${sep}${optionsString}`;
      }
      delete clonedOptions.defaultValue;
      return key;
    }
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options
      };
      clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== 'string' ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      let doReduce = false;
      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
        const r = match[1].split(this.formatSeparator).map(elem => elem.trim());
        match[1] = r.shift();
        formatters = r;
        doReduce = true;
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && typeof value !== 'string') return value;
      if (typeof value !== 'string') value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = '';
      }
      if (doReduce) {
        value = formatters.reduce((v, f) => this.format(v, f, options.lng, {
          ...options,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
}

function parseFormatStr(formatStr) {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf('(') > -1) {
    const p = formatStr.split('(');
    formatName = p[0].toLowerCase().trim();
    const optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === 'currency' && optStr.indexOf(':') < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(';');
      opts.forEach(opt => {
        if (!opt) return;
        const [key, ...rest] = opt.split(':');
        const val = rest.join(':').trim().replace(/^'+|'+$/g, '');
        if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
        if (val === 'false') formatOptions[key.trim()] = false;
        if (val === 'true') formatOptions[key.trim()] = true;
        if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
}
function createCachedFormatter(fn) {
  const cache = {};
  return function invokeFormatter(val, lng, options) {
    const key = lng + JSON.stringify(options);
    let formatter = cache[key];
    if (!formatter) {
      formatter = fn(getCleanedCode(lng), options);
      cache[key] = formatter;
    }
    return formatter(val);
  };
}
class Formatter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.logger = baseLogger.create('formatter');
    this.options = options;
    this.formats = {
      number: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      }),
      currency: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: 'currency'
        });
        return val => formatter.format(val);
      }),
      datetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      }),
      relativetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return val => formatter.format(val, opt.range || 'day');
      }),
      list: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return val => formatter.format(val);
      })
    };
    this.init(options);
  }
  init(services) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      interpolation: {}
    };
    const iOpts = options.interpolation;
    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
  }
  add(name, fc) {
    this.formats[name.toLowerCase().trim()] = fc;
  }
  addCached(name, fc) {
    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    const formats = format.split(this.formatSeparator);
    const result = formats.reduce((mem, f) => {
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
          const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
          formatted = this.formats[formatName](mem, l, {
            ...formatOptions,
            ...options,
            ...valOptions
          });
        } catch (error) {
          this.logger.warn(error);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
}

function removePending(q, name) {
  if (q.pending[name] !== undefined) {
    delete q.pending[name];
    q.pendingCount--;
  }
}
class Connector extends EventEmitter {
  constructor(backend, store, services) {
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    super();
    this.backend = backend;
    this.store = store;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options;
    this.logger = baseLogger.create('backendConnector');
    this.waitingReads = [];
    this.maxParallelReads = options.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
    this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    if (this.backend && this.backend.init) {
      this.backend.init(services, options.backend, options);
    }
  }
  queueLoad(languages, namespaces, options, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach(lng => {
      let hasAllNamespaces = true;
      namespaces.forEach(ns => {
        const name = `${lng}|${ns}`;
        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
          this.state[name] = 2;
        } else if (this.state[name] < 0) ; else if (this.state[name] === 1) {
          if (pending[name] === undefined) pending[name] = true;
        } else {
          this.state[name] = 1;
          hasAllNamespaces = false;
          if (pending[name] === undefined) pending[name] = true;
          if (toLoad[name] === undefined) toLoad[name] = true;
          if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
        }
      });
      if (!hasAllNamespaces) toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name, err, data) {
    const s = name.split('|');
    const lng = s[0];
    const ns = s[1];
    if (err) this.emit('failedLoading', lng, ns, err);
    if (data) {
      this.store.addResourceBundle(lng, ns, data);
    }
    this.state[name] = err ? -1 : 2;
    const loaded = {};
    this.queue.forEach(q => {
      pushPath(q.loaded, [lng], ns);
      removePending(q, name);
      if (err) q.errors.push(err);
      if (q.pendingCount === 0 && !q.done) {
        Object.keys(q.loaded).forEach(l => {
          if (!loaded[l]) loaded[l] = {};
          const loadedKeys = q.loaded[l];
          if (loadedKeys.length) {
            loadedKeys.forEach(n => {
              if (loaded[l][n] === undefined) loaded[l][n] = true;
            });
          }
        });
        q.done = true;
        if (q.errors.length) {
          q.callback(q.errors);
        } else {
          q.callback();
        }
      }
    });
    this.emit('loaded', loaded);
    this.queue = this.queue.filter(q => !q.done);
  }
  read(lng, ns, fcName) {
    let tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;
    let callback = arguments.length > 5 ? arguments[5] : undefined;
    if (!lng.length) return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r = fc(lng, ns);
        if (r && typeof r.then === 'function') {
          r.then(data => resolver(null, data)).catch(resolver);
        } else {
          resolver(null, r);
        }
      } catch (err) {
        resolver(err);
      }
      return;
    }
    return fc(lng, ns, resolver);
  }
  prepareLoading(languages, namespaces) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let callback = arguments.length > 3 ? arguments[3] : undefined;
    if (!this.backend) {
      this.logger.warn('No backend was added via i18next.use. Will not load resources.');
      return callback && callback();
    }
    if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
    if (typeof namespaces === 'string') namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback();
      return null;
    }
    toLoad.toLoad.forEach(name => {
      this.loadOne(name);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name) {
    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    const s = name.split('|');
    const lng = s[0];
    const ns = s[1];
    this.read(lng, ns, 'read', undefined, undefined, (err, data) => {
      if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
      if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
      this.loaded(name, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    let clb = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : () => {};
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
      return;
    }
    if (key === undefined || key === null || key === '') return;
    if (this.backend && this.backend.create) {
      const opts = {
        ...options,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r;
          if (fc.length === 5) {
            r = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r = fc(languages, namespace, key, fallbackValue);
          }
          if (r && typeof r.then === 'function') {
            r.then(data => clb(null, data)).catch(clb);
          } else {
            clb(null, r);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
}

function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ['translation'],
    defaultNS: ['translation'],
    fallbackLng: ['dev'],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: 'all',
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: '.',
    nsSeparator: ':',
    pluralSeparator: '_',
    contextSeparator: '_',
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: 'fallback',
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: false,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle(args) {
      let ret = {};
      if (typeof args[1] === 'object') ret = args[1];
      if (typeof args[1] === 'string') ret.defaultValue = args[1];
      if (typeof args[2] === 'string') ret.tDescription = args[2];
      if (typeof args[2] === 'object' || typeof args[3] === 'object') {
        const options = args[3] || args[2];
        Object.keys(options).forEach(key => {
          ret[key] = options[key];
        });
      }
      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: (value, format, lng, options) => value,
      prefix: '{{',
      suffix: '}}',
      formatSeparator: ',',
      unescapePrefix: '-',
      nestingPrefix: '$t(',
      nestingSuffix: ')',
      nestingOptionsSeparator: ',',
      maxReplaces: 1000,
      skipOnVariables: true
    }
  };
}
function transformOptions(options) {
  if (typeof options.ns === 'string') options.ns = [options.ns];
  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];
  if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
    options.supportedLngs = options.supportedLngs.concat(['cimode']);
  }
  return options;
}

function noop() {}
function bindMemberFunctions(inst) {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(mem => {
    if (typeof inst[mem] === 'function') {
      inst[mem] = inst[mem].bind(inst);
    }
  });
}
class I18n extends EventEmitter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    super();
    this.options = transformOptions(options);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options.isClone) {
      if (!this.options.initImmediate) {
        this.init(options, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options, callback);
      }, 0);
    }
  }
  init() {
    var _this = this;
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (!options.defaultNS && options.defaultNS !== false && options.ns) {
      if (typeof options.ns === 'string') {
        options.defaultNS = options.ns;
      } else if (options.ns.indexOf('translation') < 0) {
        options.defaultNS = options.ns[0];
      }
    }
    const defOpts = get();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options)
    };
    if (this.options.compatibilityAPI !== 'v1') {
      this.options.interpolation = {
        ...defOpts.interpolation,
        ...this.options.interpolation
      };
    }
    if (options.keySeparator !== undefined) {
      this.options.userDefinedKeySeparator = options.keySeparator;
    }
    if (options.nsSeparator !== undefined) {
      this.options.userDefinedNsSeparator = options.nsSeparator;
    }
    function createClassOnDemand(ClassOrObject) {
      if (!ClassOrObject) return null;
      if (typeof ClassOrObject === 'function') return new ClassOrObject();
      return ClassOrObject;
    }
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else if (typeof Intl !== 'undefined') {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s = this.services;
      s.logger = baseLogger;
      s.resourceStore = this.store;
      s.languageUtils = lu;
      s.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s.formatter = createClassOnDemand(formatter);
        s.formatter.init(s, this.options);
        this.options.interpolation.format = s.formatter.format.bind(s.formatter);
      }
      s.interpolator = new Interpolator(this.options);
      s.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
      s.backendConnector.on('*', function (event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s.i18nFormat.init) s.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on('*', function (event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        _this.emit(event, ...args);
      });
      this.modules.external.forEach(m => {
        if (m.init) m.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback) callback = noop;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn('init: no languageDetector is used and no lng is defined');
    }
    const storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
    storeApi.forEach(fcName => {
      this[fcName] = function () {
        return _this.store[fcName](...arguments);
      };
    });
    const storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
    storeApiChained.forEach(fcName => {
      this[fcName] = function () {
        _this.store[fcName](...arguments);
        return _this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t) => {
        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn('init: i18next is already initialized. You should call init just once!');
        this.isInitialized = true;
        if (!this.options.isClone) this.logger.log('initialized', this.options);
        this.emit('initialized', this.options);
        deferred.resolve(t);
        callback(err, t);
      };
      if (this.languages && this.options.compatibilityAPI !== 'v1' && !this.isInitialized) return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initImmediate) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language) {
    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
    let usedCallback = callback;
    const usedLng = typeof language === 'string' ? language : this.language;
    if (typeof language === 'function') usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if (usedLng && usedLng.toLowerCase() === 'cimode' && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
      const toLoad = [];
      const append = lng => {
        if (!lng) return;
        if (lng === 'cimode') return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach(l => {
          if (l === 'cimode') return;
          if (toLoad.indexOf(l) < 0) toLoad.push(l);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach(l => append(l));
      } else {
        append(usedLng);
      }
      if (this.options.preload) {
        this.options.preload.forEach(l => append(l));
      }
      this.services.backendConnector.load(toLoad, this.options.ns, e => {
        if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
        usedCallback(e);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns, callback) {
    const deferred = defer();
    if (!lngs) lngs = this.languages;
    if (!ns) ns = this.options.ns;
    if (!callback) callback = noop;
    this.services.backendConnector.reload(lngs, ns, err => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module) {
    if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
    if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
    if (module.type === 'backend') {
      this.modules.backend = module;
    }
    if (module.type === 'logger' || module.log && module.warn && module.error) {
      this.modules.logger = module;
    }
    if (module.type === 'languageDetector') {
      this.modules.languageDetector = module;
    }
    if (module.type === 'i18nFormat') {
      this.modules.i18nFormat = module;
    }
    if (module.type === 'postProcessor') {
      postProcessor.addPostProcessor(module);
    }
    if (module.type === 'formatter') {
      this.modules.formatter = module;
    }
    if (module.type === '3rdParty') {
      this.modules.external.push(module);
    }
    return this;
  }
  setResolvedLanguage(l) {
    if (!l || !this.languages) return;
    if (['cimode', 'dev'].indexOf(l) > -1) return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
  }
  changeLanguage(lng, callback) {
    var _this2 = this;
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit('languageChanging', lng);
    const setLngProps = l => {
      this.language = l;
      this.languages = this.services.languageUtils.toResolveHierarchy(l);
      this.resolvedLanguage = undefined;
      this.setResolvedLanguage(l);
    };
    const done = (err, l) => {
      if (l) {
        setLngProps(l);
        this.translator.changeLanguage(l);
        this.isLanguageChangingTo = undefined;
        this.emit('languageChanged', l);
        this.logger.log('languageChanged', l);
      } else {
        this.isLanguageChangingTo = undefined;
      }
      deferred.resolve(function () {
        return _this2.t(...arguments);
      });
      if (callback) callback(err, function () {
        return _this2.t(...arguments);
      });
    };
    const setLng = lngs => {
      if (!lng && !lngs && this.services.languageDetector) lngs = [];
      const l = typeof lngs === 'string' ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
      if (l) {
        if (!this.language) {
          setLngProps(l);
        }
        if (!this.translator.language) this.translator.changeLanguage(l);
        if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l);
      }
      this.loadResources(l, err => {
        done(err, l);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns, keyPrefix) {
    var _this3 = this;
    const fixedT = function (key, opts) {
      let options;
      if (typeof opts !== 'object') {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          rest[_key3 - 2] = arguments[_key3];
        }
        options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        options = {
          ...opts
        };
      }
      options.lng = options.lng || fixedT.lng;
      options.lngs = options.lngs || fixedT.lngs;
      options.ns = options.ns || fixedT.ns;
      options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = _this3.options.keySeparator || '.';
      let resultKey;
      if (options.keyPrefix && Array.isArray(key)) {
        resultKey = key.map(k => `${options.keyPrefix}${keySeparator}${k}`);
      } else {
        resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;
      }
      return _this3.t(resultKey, options);
    };
    if (typeof lng === 'string') {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  }
  hasLoadedNamespace(ns) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!this.isInitialized) {
      this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
      return false;
    }
    const lng = options.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === 'cimode') return true;
    const loadNotPending = (l, n) => {
      const loadState = this.services.backendConnector.state[`${l}|${n}`];
      return loadState === -1 || loadState === 2;
    };
    if (options.precheck) {
      const preResult = options.precheck(this, loadNotPending);
      if (preResult !== undefined) return preResult;
    }
    if (this.hasResourceBundle(lng, ns)) return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
    return false;
  }
  loadNamespaces(ns, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback) callback();
      return Promise.resolve();
    }
    if (typeof ns === 'string') ns = [ns];
    ns.forEach(n => {
      if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);
    });
    this.loadResources(err => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (typeof lngs === 'string') lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter(lng => preloaded.indexOf(lng) < 0);
    if (!newLngs.length) {
      if (callback) callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources(err => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  dir(lng) {
    if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
    if (!lng) return 'rtl';
    const rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
    const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
  }
  static createInstance() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : undefined;
    return new I18n(options, callback);
  }
  cloneInstance() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
    const forkResourceStore = options.forkResourceStore;
    if (forkResourceStore) delete options.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options,
      ...{
        isClone: true
      }
    };
    const clone = new I18n(mergedOptions);
    if (options.debug !== undefined || options.prefix !== undefined) {
      clone.logger = clone.logger.clone(options);
    }
    const membersToCopy = ['store', 'services', 'language'];
    membersToCopy.forEach(m => {
      clone[m] = this[m];
    });
    clone.services = {
      ...this.services
    };
    clone.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    if (forkResourceStore) {
      clone.store = new ResourceStore(this.store.data, mergedOptions);
      clone.services.resourceStore = clone.store;
    }
    clone.translator = new Translator(clone.services, mergedOptions);
    clone.translator.on('*', function (event) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      clone.emit(event, ...args);
    });
    clone.init(mergedOptions, callback);
    clone.translator.options = mergedOptions;
    clone.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    return clone;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;

const createInstance = instance.createInstance;
const dir = instance.dir;
const init = instance.init;
const loadResources = instance.loadResources;
const reloadResources = instance.reloadResources;
const use = instance.use;
const changeLanguage = instance.changeLanguage;
const getFixedT = instance.getFixedT;
const t = instance.t;
const exists = instance.exists;
const setDefaultNamespace = instance.setDefaultNamespace;
const hasLoadedNamespace = instance.hasLoadedNamespace;
const loadNamespaces = instance.loadNamespaces;
const loadLanguages = instance.loadLanguages;




/***/ }),

/***/ "./data/locales/cs.json":
/*!******************************!*\
  !*** ./data/locales/cs.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.author":"Autor","app.website":"Webová stránka","app.sourceCode":"zdrojový kód","app.license":"Licence","filter.platform":"Platforma","filter.language":"Jazyk","app.languages":"Jazyky","app.platforms":"Platformy"}');

/***/ }),

/***/ "./data/locales/de.json":
/*!******************************!*\
  !*** ./data/locales/de.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"about.translations.header":"Kannst du eine andere Sprache sprechen?","proprietary":"Proprietär","compare.group.header.general":"Allgemein","libre":"Frei","wiki.generatedByOsmAppsCatalog":"Diese Tabelle wurde vom [{{link}} OSM Apps Catalog] am {{date}} generiert.","filter.category.focus":"Fokus","filter.category.latest":"Neueste","filter.language":"Sprache","filter.category":"Kategorie","filter.category.all":"Alle","filter.category.navigation":"Finde deinen Weg","filter.coverage":"Abdeckung","filter.category.edit":"Mitmachen","filter.category.mobile":"Für unterwegs","list.documentation":"Dokumentation","category.latest.description":"Zeigt {{numberOfApps}} Apps geordnet nach dem letzten Veröffentlichungsdatum.","app.author":"Author","multilingual":"Mehrsprachig","wiki.none":"Keine","list.moreInfos":"Informationen","category.all.description":"Zeigt {{numberOfApps}} Apps aus dem OpenStreetMap-Wiki, Wikidata und Taginfo in zufälliger Reihenfolge an.","filter.topic":"Themen","app.sourceCode":"Quellcode","app.license":"Lizenz","category.focus.description":"Zeigt zehn Apps der zuletzt aktualisierten Seiten an.","category.mobile.description":"Zeigt {{numberOfApps}} Apps, die für mobile Geräte entwickelt wurden oder die Offline-Nutzung unterstützen.","noResults":"Kein Resultat","category.navigation.description":"Zeigt {{numberOfApps}} Apps, die Routenplanung oder Navigation unterstützen.","app.website":"Webseite","app.free":"Frei","app.source":"Quelle","app.coverage":"Abdeckung","compare.unknown":"Unbekannt","app.platforms":"Platformen","filter.platform":"Platform","app.price":"Preis","app.languages":"Sprachen","category.edit.description":"Zeigt {{numberOfApps}} Apps, die das Hinzufügen, Bearbeiten oder Analysieren von OpenStreetMap-Daten oder das Aufzeichnen von Geotracks unterstützen.","app.lastRelease":"Letzte Veröffentlichung","relatedApps":"{{numberOfApps}} ähnliche Apps","filter.search":"Suche","filter.free":"Frei","compare.group.header.map":"Kartenanzeige","about":"Über","compare.group.header.routing":"Routenplanung","compare.group.header.navigating":"Navigieren","compare.group.header.editing":"Bearbeiten","compare.group.header.accessibility":"Zugänglichkeit"}');

/***/ }),

/***/ "./data/locales/el.json":
/*!******************************!*\
  !*** ./data/locales/el.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"about":"Σχετικά","filter.search":"Αναζήτηση","filter.free":"Δωρεάν","filter.topic":"Θεματική","filter.platform":"Πλατφόρμα","filter.language":"Γλώσσα","filter.coverage":"Κάλυψη","filter.category":"Κατηγορία","filter.category.all":"Όλα","filter.category.focus":"Εστίαση","filter.category.latest":"Τελευταία","filter.category.mobile":"Φορητό","filter.category.navigation":"Βρες τον δρόμο σου","filter.category.edit":"Συνείσφερε","category.all.description":"Δείχνει {{numberOfApps}} εφαρμογές που βρέθηκαν στο Wiki του OpenStreetMap και πληροφορίες ετικέτας με τυχαία σειρά.","category.focus.description":"Δείχνει δέκα εφαρμογές με τις πιο πρόσφατα ανανεωμένες σελίδες.","category.latest.description":"Δείχνει {{numberOfApps}} εφαρμογές σε σειρά τελευταίας κυκλοφορίας.","category.navigation.description":"Δείχνει {{numberOfApps}} εφαρμογές που υποστηρίζουν τη δρομολόγηση ή την πλοήγηση.","relatedApps":"{{numberOfApps}} σχετικές εφαρμογές","compare.group.header.general":"Γενικά","compare.group.header.map":"Προβολή χάρτη","compare.group.header.navigating":"Πλοήγηση","compare.group.header.tracking":"Διαδρομές","compare.group.header.monitoring":"Παρακολούθηση","compare.group.header.editing":"Επεξεργασία","compare.group.header.rendering":"Απόδοση","compare.group.header.accessibility":"Προσβασιμότητα","app.free":"Δωρεάν","libre":"Ελεύθερη","proprietary":"Ιδιόκτητη","list.documentation":"Οδηγίες","list.moreInfos":"Πληροφορίες","app.website":"Ιστοσελίδα","app.install.asin":"Amazon Appstore","app.install.huaweiAppGallery":"Huawei App Gallery","app.install.appleStore":"Apple App Store","app.install.macAppStore":"Mac App Store","app.install.microsoftApp":"Microsoft Store","app.lastRelease":"Τελευταία έκδοση","app.languages":"Γλώσσες","app.coverage":"Κάλυψη","compare.unknown":"άγνωστο","share.wiki":"Αντιγράφηκε ο πίνακας {{group}} στο πρόχειρο σε μορφή για το wiki.openstreetmap.org.","wiki.generatedBy":"Παρήχθη από τον Κατάλογο Εφαρμογών OSM","wiki.none":"κανένα","wiki.generatedByOsmAppsCatalog":"Αυτός ο πίνακας παρήχθη από τον [{{link}} Κατάλογο Εφαρμογών OSM] στις {{date}}.","about.translations.header":"Μπορείτε να μιλήσετε άλλη γλώσσα;","about.translations.text":"Δημιουργήστε μεταφράσεις\\n  - για τον Κατάλογο Εφαρμογών OSM στο [Weblate](https://hosted.weblate.org/projects/osm-apps-catalog/osm-apps-catalog) <a href=\\"https://hosted.weblate.org/engage/osm-apps-catalog/\\"><img src=\\"https://hosted.weblate.org/widgets/osm-apps-catalog/-/svg-badge.svg\\" alt=\\"Translation status\\"></a>\\n  -  για τις εφαρμογές που τεκμηριώνονται εδώ στο [Wiki του OpenStreetMap Wiki](https://wiki.openstreetmap.org/)","category.mobile.description":"Δείχνει {{numberOfApps}} εφαρμογές ανεπτυγμένες για φορητές συσκευές ή που υποστηρίζουν την χρήση εκτός δικτύου.","category.edit.description":"Δείχνει {{numberOfApps}} εφαρμογές που υποστηρίζουν την προσθήκη, επεξεργασία ή ανάλυση δεδομένων OpenStreetMap ή την καταγραφή γεωγραφικών διαδρομών.","compare.group.header.routing":"Δρομολόγηση","noResults":"Καθόλου αποτελέσματα","multilingual":"Πολύγλωσση","app.install.fDroid":"F-Droid","app.install.googlePlay":"Google Play","app.platforms":"Πλατφόρμες","app.unmaintained":"({{icon}} Δεν υποστηρίζεται)","app.price":"Τιμή","app.author":"Συγγραφέας","app.license":"Άδεια","app.sourceCode":"Πηγαίος κώδικας","compare.share":"Μοιραστείτε στο wiki.openstreetmap.org","app.source":"Πηγή"}');

/***/ }),

/***/ "./data/locales/en.json":
/*!******************************!*\
  !*** ./data/locales/en.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"about":"About","filter.search":"Search","filter.free":"Free","filter.topic":"Topic","filter.platform":"Platform","filter.language":"Language","filter.coverage":"Coverage","filter.category":"Category","filter.category.all":"All","filter.category.focus":"Focus","filter.category.latest":"Latest","filter.category.mobile":"To go","filter.category.navigation":"Find your way","filter.category.edit":"Contribute","category.all.description":"Shows {{numberOfApps}} apps found on the OpenStreetMap wiki, Wikidata and taginfo in random order.","category.focus.description":"Shows ten apps from the most recently updated pages.","category.latest.description":"Shows {{numberOfApps}} apps ordered by last release date.","category.mobile.description":"Shows {{numberOfApps}} apps developed for mobile devices or that support offline use.","category.navigation.description":"Shows {{numberOfApps}} apps that support routing or navigation.","category.edit.description":"Shows {{numberOfApps}} apps that support adding, editing or analysing OpenStreetMap data or recording geotracks.","relatedApps":"{{numberOfApps}} related apps","noResults":"No results","compare.group.header.general":"General","compare.group.header.map":"Map display","compare.group.header.routing":"Routing","compare.group.header.navigating":"Navigating","compare.group.header.tracking":"Tracking","compare.group.header.monitoring":"Monitoring","compare.group.header.editing":"Editing","compare.group.header.rendering":"Rendering","compare.group.header.accessibility":"Accessibility","app.free":"Free","multilingual":"Multilingual","libre":"Libre","proprietary":"Proprietary","list.documentation":"Documentation","list.moreInfos":"Informations","app.website":"Website","app.install.asin":"Amazon Appstore","app.install.fDroid":"F-Droid","app.install.googlePlay":"Google Play","app.install.huaweiAppGallery":"Huawei App Gallery","app.install.appleStore":"Apple App Store","app.install.macAppStore":"Mac App Store","app.install.microsoftApp":"Microsoft Store","app.platforms":"Platforms","app.lastRelease":"Last release","app.unmaintained":"({{icon}} Unmaintained)","app.languages":"Languages","app.coverage":"Coverage","app.author":"Author","app.price":"Price","app.license":"License","app.sourceCode":"Source code","app.source":"Source","compare.share":"Share in wiki.openstreetmap.org","compare.unknown":"unknown","share.wiki":"Copied {{group}} table to the clipboard formatted for wiki.openstreetmap.org.","wiki.generatedBy":"Generated by OSM Apps Catalog","wiki.none":"none","wiki.generatedByOsmAppsCatalog":"This table was generated by the [{{link}} OSM Apps Catalog] at {{date}}.","about.translations.header":"Can you speak another language?","about.translations.text":"Make translations\\n  - for the OSM Apps Catalog on [Weblate](https://hosted.weblate.org/projects/osm-apps-catalog/osm-apps-catalog) <a href=\'https://hosted.weblate.org/engage/osm-apps-catalog/\'><img src=\'https://hosted.weblate.org/widgets/osm-apps-catalog/-/svg-badge.svg\' alt=\'Translation status\' /></a>\\n  - for the apps documented in [OpenStreetMap Wiki](https://wiki.openstreetmap.org/)"}');

/***/ }),

/***/ "./data/locales/es.json":
/*!******************************!*\
  !*** ./data/locales/es.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"about.translations.text":"Hacer traducciones\\n  - para el catálogo de aplicaciones OSM en [Weblate](https://hosted.weblate.org/projects/osm-apps-catalog/osm-apps-catalog) <a href=\\"https://hosted.weblate.org/engage/osm-apps-catalog/\\"><img src=\\"https://hosted.weblate.org/widgets/osm-apps-catalog/-/svg-badge.svg\\" alt=\\"Estado de la traducción\\"></a>\\n  - para las aplicaciones documentadas en [OpenStreetMap Wiki](https://wiki.openstreetmap.org/)","category.latest.description":"Muestra {{numberOfApps}} aplicaciones ordenadas por la última fecha de lanzamiento.","about.translations.header":"¿Habla otro idioma?","filter.category.focus":"Enfoque","filter.category.latest":"Última","proprietary":"Propietario","wiki.none":"ninguno","category.all.description":"Muestra {{numberOfApps}} aplicaciones encontradas en la wiki de OpenStreetMap y taginfo en orden aleatorio.","filter.language":"Idioma","category.focus.description":"Muestra diez aplicaciones de las páginas actualizadas más recientemente.","wiki.generatedByOsmAppsCatalog":"Esta tabla fue generada por el [{{link}} Catálogo de aplicaciones OSM] en {{date}}.","filter.category":"Categoría","category.mobile.description":"Muestra {{numberOfApps}} aplicaciones desarrolladas para dispositivos móviles o que admiten el uso sin conexión.","filter.category.all":"Todo","noResults":"Sin resultados","category.navigation.description":"Muestra {{numberOfApps}} las aplicaciones que admiten enrutamiento o navegación.","filter.category.navigation":"Encuentra tu camino","compare.group.header.general":"General","filter.coverage":"Cobertura","filter.category.edit":"Contribuir","compare.group.header.map":"Visualización del mapa","filter.platform":"Plataforma","filter.category.mobile":"Ir a","category.edit.description":"Muestra {{numberOfApps}} aplicaciones que permiten añadir, editar o analizar datos de OpenStreetMap o grabar geotracks.","libre":"Libre","relatedApps":"{{numberOfApps}} aplicaciones relacionadas","list.documentation":"Documentación","filter.topic":"Tema","app.website":"Página web","app.free":"Gratis","compare.share":"Compartir en wiki.openstreetmap.org","share.wiki":"Copiada la tabla {{group}} al portapapeles con formato para wiki.openstreetmap.org.","app.install.macAppStore":"Mac App Store","app.author":"Autor","app.install.fDroid":"F-Droid","app.install.googlePlay":"Google Play","app.install.microsoftApp":"Microsoft Store","list.moreInfos":"Información","app.sourceCode":"Código fuente","app.license":"Licencia","app.install.appleStore":"App Store","app.install.huaweiAppGallery":"Huawei App Gallery","app.install.asin":"Amazon Appstore","app.source":"Fuente","app.coverage":"Cobertura","compare.unknown":"desconocido","app.platforms":"Plataformas","wiki.generatedBy":"Creado por OSM Apps Catalog","app.price":"Precio","app.languages":"Idiomas","app.lastRelease":"Última edición","compare.group.header.monitoring":"Seguimiento","compare.group.header.rendering":"Renderizado","multilingual":"Multilingüe","compare.group.header.editing":"Editar","app.unmaintained":"({{icon}} Sin mantenimiento)","filter.search":"Buscar","compare.group.header.routing":"Enrutamiento","filter.free":"Gratis","compare.group.header.navigating":"Navegando","compare.group.header.tracking":"Rastreo","compare.group.header.accessibility":"Accesibilidad","about":"Acerca de"}');

/***/ }),

/***/ "./data/locales/fr.json":
/*!******************************!*\
  !*** ./data/locales/fr.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"about.translations.text":"Réalisez des traductions\\n - Pour le catalogue des applications OSM sur [Weblate](https ://hosted.weblate.org/projects/osm-apps-catalog/osm-apps-catalog) <a href=\\"https ://hosted.weblate.org/engage/osm-apps-catalog/\\"><img src=\\"https ://hosted.weblate.org/widgets/osm-apps-catalog/-/svg-badge.svg\\" alt=\\"Translation status\\"></a>\\n- Pour les applications documentées sur le [Wiki OpenStreetMap](https ://wiki.openstreetmap.org/)","category.latest.description":"Affiche les {{numberOfApps}} applications classées par date de sortie.","about.translations.header":"Vous pouvez parler une autre langue ?","filter.category.focus":"En vedette","filter.category.latest":"Les plus récents","proprietary":"Propriétaire","wiki.none":"aucun","category.all.description":"Affichage de {{numberOfApps}} applications trouvées sur le wiki OpenStreetMap et taginfo dans un ordre aléatoire.","filter.language":"Langue","category.focus.description":"Affiche dix applications parmi les pages les plus récemment mises à jour.","wiki.generatedByOsmAppsCatalog":"Ce tableau a été généré par le [{{link}} Catalogue des applications OSM] le {{date}}.","filter.category":"Catégorie","category.mobile.description":"Affiche les {{numberOfApps}} applications développées pour les appareils mobiles ou qui permettent une utilisation hors ligne.","filter.category.all":"Tout","noResults":"Aucun résultat","category.navigation.description":"Affiche les {{numberOfApps}} applications qui prennent en charge le guidage ou la navigation.","filter.category.navigation":"Trouver son chemin","compare.group.header.general":"Général","filter.coverage":"Couverture","filter.category.edit":"Contribuer","compare.group.header.map":"Affichage de carte","filter.platform":"Plateforme","filter.category.mobile":"À emporter","category.edit.description":"Affiche les {{numberOfApps}} applications qui permettent d\'ajouter, de modifier ou d\'analyser des données d\'OpenStreetMap ou d\'enregistrer des traces GPS.","libre":"Libre","relatedApps":"{{numberOfApps}} applications associées","app.website":"Site Internet","app.author":"Auteur","app.sourceCode":"Code source","app.license":"Licence","app.languages":"Langues","app.platforms":"Plateformes"}');

/***/ }),

/***/ "./data/locales/id.json":
/*!******************************!*\
  !*** ./data/locales/id.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.website":"Situs web","app.sourceCode":"Kode sumber","app.license":"Lisensi","filter.language":"Bahasa","app.languages":"Bahasa","filter.category.focus":"Fokus","filter.search":"Cari","about":"Tentang","filter.platform":"Platform","filter.category":"Kategori","filter.category.latest":"Terbaru","filter.topic":"Topik","filter.coverage":"Cakupan","filter.category.all":"Semua","filter.free":"Gratis"}');

/***/ }),

/***/ "./data/locales/it.json":
/*!******************************!*\
  !*** ./data/locales/it.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.website":"Sito web","app.author":"Autore","app.sourceCode":"Codice sorgente","app.license":"Licenza","filter.language":"Linguaggi","filter.platform":"Piattaforme","app.languages":"Linguaggio","app.platforms":"Piattaforma"}');

/***/ }),

/***/ "./data/locales/ja.json":
/*!******************************!*\
  !*** ./data/locales/ja.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.author":"作者","app.website":"ウェブサイト","app.sourceCode":"ソースコード","app.license":"ライセンス","filter.platform":"動作環境","filter.language":"言語","app.platforms":"動作環境","app.languages":"言語"}');

/***/ }),

/***/ "./data/locales/ko.json":
/*!******************************!*\
  !*** ./data/locales/ko.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.website":"웹 사이트","app.author":"제작","app.sourceCode":"소스 코드","app.license":"라이선스","filter.platform":"플랫폼","filter.language":"언어","app.platforms":"플랫폼","app.languages":"언어"}');

/***/ }),

/***/ "./data/locales/nb_NO.json":
/*!*********************************!*\
  !*** ./data/locales/nb_NO.json ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"compare.group.header.general":"Generelt","app.website":"Nettsted","app.sourceCode":"Kildekode","app.license":"Lisens","filter.platform":"Platform","filter.language":"Språk","app.languages":"Språk"}');

/***/ }),

/***/ "./data/locales/pl.json":
/*!******************************!*\
  !*** ./data/locales/pl.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"category.latest.description":"Pokaż {{numberOfApps}} aplikacji posortowanych według daty wydania.","about.translations.header":"Czy znasz inny język?","filter.category.focus":"Skupienie","filter.category.latest":"Ostatnie","proprietary":"Własnościowe","wiki.none":"brak","filter.language":"Język","filter.category":"Kategoria","filter.category.all":"Wszystko","noResults":"Brak wyników","category.navigation.description":"Pokaż {{numberOfApps}} aplikacji, które wspierają wyznaczanie trasy i nawigację.","filter.category.navigation":"Znajdź swoją drogę","compare.group.header.general":"Ogólne","filter.category.edit":"Pomóż w rozwoju projektu","compare.group.header.map":"Wyświetlanie mapy","filter.platform":"Platforma","libre":"Wolne","relatedApps":"{{numberOfApps}} powiązanych aplikacji","app.website":"Strona internetowa","app.author":"Autor","app.sourceCode":"Kod źródłowy","app.license":"Licencja","app.languages":"Języki","app.platforms":"Platformy"}');

/***/ }),

/***/ "./data/locales/pt.json":
/*!******************************!*\
  !*** ./data/locales/pt.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.website":"Site da Internet","app.author":"Autor","app.sourceCode":"Código fonte","app.license":"Licença","filter.platform":"Plataforma","filter.language":"Linguagem","app.languages":"Linguagens","app.platforms":"Plataformas"}');

/***/ }),

/***/ "./data/locales/ru.json":
/*!******************************!*\
  !*** ./data/locales/ru.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.author":"автор","app.website":"веб-сайт","app.sourceCode":"исходный код","app.license":"лицензия","filter.language":"язык","filter.platform":"платформa","app.platforms":"платформ","app.languages":"языки"}');

/***/ }),

/***/ "./data/locales/tr.json":
/*!******************************!*\
  !*** ./data/locales/tr.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.website":"Internet sitesi","app.sourceCode":"Kaynak kodu","app.license":"Lisans","filter.platform":"Platform","filter.language":"Dili","app.languages":"Dilleri","app.platforms":"Platformlar"}');

/***/ }),

/***/ "./data/locales/uk.json":
/*!******************************!*\
  !*** ./data/locales/uk.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.author":"автор","app.website":"веб-сайт","app.sourceCode":"сирці","app.license":"ліцензія","filter.language":"мовa","filter.platform":"платформa","app.platforms":"платформи","app.languages":"мови"}');

/***/ }),

/***/ "./data/locales/zh_Hans.json":
/*!***********************************!*\
  !*** ./data/locales/zh_Hans.json ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.author":"作者","app.website":"网站","app.sourceCode":"源代码","app.license":"执照","filter.platform":"平台","filter.language":"语言","app.platforms":"平台","app.languages":"语言"}');

/***/ }),

/***/ "./data/locales/zh_Hant.json":
/*!***********************************!*\
  !*** ./data/locales/zh_Hant.json ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"app.website":"網站","app.author":"作者","app.sourceCode":"原始碼","app.license":"許可證","filter.platform":"平臺","filter.language":"語言","app.languages":"語言","app.platforms":"平臺","about":"關於","filter.free":"免費","filter.category.edit":"貢獻","filter.category":"類別","filter.category.all":"全部","filter.category.latest":"最新","category.all.description":"以隨機順序顯示在 OpenStreetMap wiki 和 taginfo 上找到的 {{numberOfApps}} 個應用程式。","category.latest.description":"顯示按上次發佈日期排序的 {{numberOfApps}} 個應用程式。","category.mobile.description":"顯示為行動裝置開發或支援離線使用的 {{numberOfApps}} 個應用程式。","compare.group.header.monitoring":"監測","compare.group.header.navigating":"導航","compare.group.header.tracking":"追蹤","compare.group.header.editing":"編輯","compare.group.header.accessibility":"無障礙","app.free":"免費","list.moreInfos":"資訊","multilingual":"多種語言","app.coverage":"覆蓋範圍","app.install.macAppStore":"Mac App Store","about.translations.header":"你能說另一種語言嗎？","filter.topic":"主題","category.edit.description":"顯示支援新增、編輯或分析 OpenStreetMap 資料或記錄地理軌跡的 {{numberOfApps}} 個應用程式。","relatedApps":"{{numberOfApps}} 個相關應用程式","noResults":"沒有結果","app.unmaintained":"（{{icon}} 未維護）","app.price":"價格","app.source":"來源","compare.share":"在 wiki.openstreetmap.org 中分享","filter.search":"搜尋","compare.group.header.routing":"路由","app.install.microsoftApp":"Microsoft Store","app.lastRelease":"上次發佈","filter.coverage":"覆蓋範圍","filter.category.focus":"焦點","category.focus.description":"顯示最近更新頁面的十個應用程式。","category.navigation.description":"顯示支援路由或導航的 {{numberOfApps}} 個應用程式。","compare.group.header.general":"一般","compare.group.header.map":"地圖顯示","libre":"自由","proprietary":"專有","list.documentation":"文件","app.install.asin":"亞馬遜應用商店","app.install.fDroid":"F-Droid","app.install.googlePlay":"Google Play","app.install.huaweiAppGallery":"華為應用市場","app.install.appleStore":"Apple App Store","compare.unknown":"未知","share.wiki":"已複製 {{group}} 表格為 wiki.openstreetmap.org 格式至剪貼簿。","wiki.generatedBy":"由 OSM Apps Catalog 產生","wiki.none":"無","wiki.generatedByOsmAppsCatalog":"此表格由 [{{link}} OSM Apps Catalog] 於 {{date}} 產生。"}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./script.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,